/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Tue Apr  2 17:08:50 2024.
 */

#ifndef FORMULA_MAIN_DBC_H
#define FORMULA_MAIN_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_FRAME_ID (0x259u)
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_FRAME_ID (0x6feu)
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_FRAME_ID (0x6ffu)
#define FORMULA_MAIN_DBC_VC_STATUS_FRAME_ID (0x12du)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_FRAME_ID (0x12eu)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_FRAME_ID (0x12fu)
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_FRAME_ID (0x130u)
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_FRAME_ID (0x131u)
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_FRAME_ID (0x137u)
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_FRAME_ID (0x13bu)
#define FORMULA_MAIN_DBC_VC_RTDS_REQUEST_FRAME_ID (0x13cu)
#define FORMULA_MAIN_DBC_PBX_STATUS_FRAME_ID (0x700u)
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_FRAME_ID (0xadu)
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_FRAME_ID (0xacu)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_FRAME_ID (0xc2u)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_FRAME_ID (0xc1u)
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_FRAME_ID (0xc0u)
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_FRAME_ID (0xabu)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_FRAME_ID (0xaau)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_FRAME_ID (0xa9u)
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_FRAME_ID (0xa8u)
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_FRAME_ID (0xa7u)
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_FRAME_ID (0xa6u)
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_FRAME_ID (0xa5u)
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_FRAME_ID (0xa4u)
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_FRAME_ID (0xa3u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_FRAME_ID (0xa2u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_FRAME_ID (0xa1u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_FRAME_ID (0xa0u)
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_FRAME_ID (0xaeu)
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_FRAME_ID (0xafu)
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_FRAME_ID (0x1d7u)
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_FRAME_ID (0x1d5u)
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_FRAME_ID (0x202u)
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_FRAME_ID (0xb0u)
#define FORMULA_MAIN_DBC_BMS_STATUS_FRAME_ID (0x258u)
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_FRAME_ID (0x2bcu)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_FRAME_ID (0x2bdu)
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_FRAME_ID (0x2beu)
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_FRAME_ID (0x2bfu)
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_FRAME_ID (0x2c0u)
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_FRAME_ID (0x320u)
#define FORMULA_MAIN_DBC_BMS_CURRENT_FRAME_ID (0x384u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_FRAME_ID (0x3b6u)
#define FORMULA_MAIN_DBC_BMS_REF_FRAME_ID (0x3b7u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_FRAME_ID (0x385u)
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_FRAME_ID (0x1806e5f4u)
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_FRAME_ID (0x18ff50e5u)

/* Frame lengths in bytes. */
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_LENGTH (8u)
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_LENGTH (8u)
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_LENGTH (8u)
#define FORMULA_MAIN_DBC_VC_RTDS_REQUEST_LENGTH (8u)
#define FORMULA_MAIN_DBC_PBX_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_LENGTH (8u)
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_CURRENT_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_REF_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_LENGTH (8u)
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_LENGTH (8u)
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_LENGTH (8u)

/* Extended or standard frame types. */
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_VC_RTDS_REQUEST_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_PBX_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_CURRENT_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_REF_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_IS_EXTENDED (0)
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_IS_EXTENDED (1)
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_NOT_READY_CHOICE (0u)
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_STARTUP_CHOICE (1u)
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_READY_TO_DRIVE_CHOICE (2u)
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_FAULTED_CHOICE (3u)

#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_TASK_100_HZ_CHOICE (1u)

#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_DIRECTION_COMMAND_CW_CHOICE (0u)
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_DIRECTION_COMMAND_CCW_CHOICE (1u)

#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_INVERTER_DISCHARGE_DISCHARGE__DISABLE_CHOICE (0u)
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_INVERTER_DISCHARGE_DISCHARGE__ENABLE__IF_EEPROM_PARAMETER_IS_SET__CHOICE (1u)

#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM__START__STATE_CHOICE (0u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE__CHARGE__INIT_STATE_CHOICE (1u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE_CHARGE_ACTIVE_STATE_CHOICE (2u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE_CHARGE_COMPLETE_STATE_CHOICE (3u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM_WAIT_STATE_CHOICE (4u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM_READY_STATE_CHOICE (5u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_MOTOR__RUNNING__STATE_CHOICE (6u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_BLINK_FAULT_CODE_STATE_CHOICE (7u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_SHUTDOWN_STATE_FOR__KEY__SWITCH__MODE_1_CHOICE (14u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_RESET_THE_INVERTER_CHOICE (15u)

#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_POWER_UP_CHOICE (0u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_STOP_CHOICE (1u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_OPEN__LOOP_CHOICE (2u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_CLOSED__LOOP_CHOICE (3u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_4_CHOICE (4u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_5_CHOICE (5u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_6_CHOICE (6u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_7_CHOICE (7u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_IDLE__RUN_CHOICE (8u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_IDLE__STOP_CHOICE (9u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_10_CHOICE (10u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERN__STATE_CHOICE (11u)
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_12_CHOICE (12u)

#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_DISCONNECTED_CHOICE (0u)
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_COMPLETE_CHOICE (1u)
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCING_CHOICE (2u)
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_CHARGING_CHOICE (3u)
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCE_SENSING_CHOICE (4u)

#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_CELLS_CHOICE (0u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_TEMPS_CHOICE (1u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_DRAIN_REQUEST_CHOICE (2u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CURRENT_SENSOR_COMM_CHOICE (3u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_CURRENT_CHOICE (4u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_IRRATIONAL_CHOICE (5u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_DIFF_CHOICE (6u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULTCODE_OUT_OF_JUICE_CHOICE (7u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_TEMPERATURE_IRRATIONAL_CHOICE (8u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_TEMP_CHOICE (9u)
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_DRAIN_FAILURE_CHOICE (10u)

#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1_HZ_CHOICE (1u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_10_HZ_CHOICE (2u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1K_HZ_CHOICE (3u)
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_CAN_RX_TASK_CHOICE (4u)

#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_NO_LIMP_CHOICE (0u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_1_CHOICE (1u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_2_CHOICE (2u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_3_CHOICE (3u)

#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_NO_LIMP_CHOICE (0u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_1_CHOICE (1u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_2_CHOICE (2u)
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_3_CHOICE (3u)

/* Frame Names. */
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_NAME "BMS_CellOverview"
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_NAME "C70_WheelSpeeds"
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_NAME "C70_BrakePressures"
#define FORMULA_MAIN_DBC_VC_STATUS_NAME "VC_Status"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_NAME "VC_PedalInputs"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_NAME "VC_PedalInputsRaw"
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_NAME "VC_DashInputs"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_NAME "VC_ShutdownStatus"
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_NAME "VC_FaultVector"
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_NAME "VC_HardFaultIndicator"
#define FORMULA_MAIN_DBC_VC_RTDS_REQUEST_NAME "VC_RTDSRequest"
#define FORMULA_MAIN_DBC_PBX_STATUS_NAME "PBX_Status"
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_NAME "MCU_Modulation_And_Flux_Info"
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_NAME "MCU_Torque_And_Timer_Info"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_NAME "MCU_Read_Write_Param_Response"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_NAME "MCU_Read_Write_Param_Command"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_NAME "MCU_Command_Message"
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_NAME "MCU_Fault_Codes"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_NAME "MCU_Internal_States"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_NAME "MCU_Internal_Voltages"
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_NAME "MCU_Flux_ID_IQ_Info"
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_NAME "MCU_Voltage_Info"
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_NAME "MCU_Current_Info"
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_NAME "MCU_Motor_Position_Info"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_NAME "MCU_Digital_Input_Status"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_NAME "MCU_Analog_Input_Voltages"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_NAME "MCU_Temperature_Set_3"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_NAME "MCU_Temperature_Set_2"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_NAME "MCU_Temperature_Set_1"
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_NAME "MCU_Firmware_Info"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_NAME "MCU_Diag_Data"
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_NAME "MCU_U2C_Command_Txd"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_NAME "MCU_U2C_Message_Rxd"
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_NAME "BMS_Current_Limit"
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_NAME "MCU_Fast_Info"
#define FORMULA_MAIN_DBC_BMS_STATUS_NAME "BMS_Status"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_NAME "BMS_FaultVector"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_NAME "BMS_FaultAlert"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_NAME "BMS_Voltages"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_NAME "BMS_ThermistorVoltages"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_NAME "BMS_Temperatures"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_NAME "BMS_DrainStatus"
#define FORMULA_MAIN_DBC_BMS_CURRENT_NAME "BMS_Current"
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_NAME "BMS_HardFaultIndicator"
#define FORMULA_MAIN_DBC_BMS_REF_NAME "BMS_Ref"
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_NAME "BMS_LimpMode"
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_NAME "BMS_ChargeRequest"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_NAME "CHG_ChargeStats"

/* Signal Names. */
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_MIN_NAME "BMS_Overview_TempMin"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_MAX_NAME "BMS_Overview_TempMax"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_AVG_NAME "BMS_Overview_TempAvg"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_MIN_NAME "BMS_Overview_VoltMin"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_MAX_NAME "BMS_Overview_VoltMax"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_AVG_NAME "BMS_Overview_VoltAvg"
#define FORMULA_MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_DRAINS_NAME "BMS_Overview_Drains"
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_C70_WHEEL_SPEED_FL_NAME "C70_WheelSpeed_FL"
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_C70_WHEEL_SPEED_FR_NAME "C70_WheelSpeed_FR"
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_C70_WHEEL_SPEED_RL_NAME "C70_WheelSpeed_RL"
#define FORMULA_MAIN_DBC_C70_WHEEL_SPEEDS_C70_WHEEL_SPEED_RR_NAME "C70_WheelSpeed_RR"
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_C70_BRAKE_PRESSURE_FRONT_NAME "C70_BrakePressureFront"
#define FORMULA_MAIN_DBC_C70_BRAKE_PRESSURES_C70_BRAKE_PRESSURE_REAR_NAME "C70_BrakePressureRear"
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_NAME "VC_Status_VehicleState"
#define FORMULA_MAIN_DBC_VC_STATUS_VC_STATUS_MC_STATE_NAME "VC_Status_MC_State"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_BRAKE_PRESSURE_NAME "VC_PedalInputs_BrakePressure"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_A_NAME "VC_PedalInputs_AccelPositionA"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_B_NAME "VC_PedalInputs_AccelPositionB"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_AVG_NAME "VC_PedalInputs_AccelPositionAvg"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_ERR_NAME "VC_PedalInputs_AccelPositionErr"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_TORQUE_REQUESTED_NAME "VC_PedalInputs_TorqueRequested"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_ACCEL_VOLTAGE_A_NAME "VC_PedalInputsRaw_AccelVoltageA"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_ACCEL_VOLTAGE_B_NAME "VC_PedalInputsRaw_AccelVoltageB"
#define FORMULA_MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_BRAKE_VOLTAGE_NAME "VC_PedalInputsRaw_BrakeVoltage"
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_RT_DBUTTON_NAME "VC_DashInputs_RTDbutton"
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH0_NAME "VC_DashInputs_Switch0"
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH1_NAME "VC_DashInputs_Switch1"
#define FORMULA_MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH2_NAME "VC_DashInputs_Switch2"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BMS_FAULT_NAME "VC_ShutdownStatus_BMS_fault"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_IMD_FAULT_NAME "VC_ShutdownStatus_IMD_fault"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BSPD_FAULT_NAME "VC_ShutdownStatus_BSPD_fault"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BSPD_SIGNAL_LOST_NAME "VC_ShutdownStatus_BSPD_signal_lost"
#define FORMULA_MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_PRECHARGE_NAME "VC_ShutdownStatus_precharge"
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_BRAKE_SENSOR_IRRATIONAL_NAME "VC_FaultVector_BRAKE_SENSOR_IRRATIONAL"
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_ACCELERATOR_SENSOR_IRRATIONAL_NAME "VC_FaultVector_ACCELERATOR_SENSOR_IRRATIONAL"
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_APPS_SENSOR_DISAGREEMENT_NAME "VC_FaultVector_APPS_SENSOR_DISAGREEMENT"
#define FORMULA_MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_APPS_DOUBLE_PEDAL_NAME "VC_FaultVector_APPS_DOUBLE_PEDAL"
#define FORMULA_MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_NAME "VC_HardFaultIndicator_task"
#define FORMULA_MAIN_DBC_VC_RTDS_REQUEST_VC_REQUEST_RTDS_NAME "VC_RequestRTDS"
#define FORMULA_MAIN_DBC_PBX_STATUS_PBX_LV_VOLTAGE_NAME "PBX_LV_Voltage"
#define FORMULA_MAIN_DBC_PBX_STATUS_PBX_LV_CURRENT_NAME "PBX_LV_Current"
#define FORMULA_MAIN_DBC_PBX_STATUS_PBX_PUMPS_ON_NAME "PBX_PumpsOn"
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_D1_MODULATION_INDEX_NAME "D1_Modulation_Index"
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_D2_FLUX_WEAKENING_OUTPUT_NAME "D2_Flux_Weakening_Output"
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_D3_ID_COMMAND_NAME "D3_Id_Command"
#define FORMULA_MAIN_DBC_MCU_MODULATION_AND_FLUX_INFO_D4_IQ_COMMAND_NAME "D4_Iq_Command"
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_D1_COMMANDED_TORQUE_NAME "D1_Commanded_Torque"
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_D2_TORQUE_FEEDBACK_NAME "D2_Torque_Feedback"
#define FORMULA_MAIN_DBC_MCU_TORQUE_AND_TIMER_INFO_D3_POWER_ON_TIMER_NAME "D3_Power_On_Timer"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_D1_PARAMETER_ADDRESS_RESPONSE_NAME "D1_Parameter_Address_Response"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_D2_WRITE_SUCCESS_NAME "D2_Write_Success"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_RESPONSE_D3_DATA_RESPONSE_NAME "D3_Data_Response"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_D1_PARAMETER_ADDRESS_COMMAND_NAME "D1_Parameter_Address_Command"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_D2_READ_WRITE_COMMAND_NAME "D2_Read_Write_Command"
#define FORMULA_MAIN_DBC_MCU_READ_WRITE_PARAM_COMMAND_D3_DATA_COMMAND_NAME "D3_Data_Command"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_TORQUE_COMMAND_NAME "Torque_Command"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_SPEED_COMMAND_NAME "Speed_Command"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_DIRECTION_COMMAND_NAME "Direction_Command"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_INVERTER_ENABLE_NAME "Inverter_Enable"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_INVERTER_DISCHARGE_NAME "Inverter_Discharge"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_SPEED_MODE_ENABLE_NAME "Speed_Mode_Enable"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_ROLLING_COUNTER_NAME "RollingCounter"
#define FORMULA_MAIN_DBC_MCU_COMMAND_MESSAGE_TORQUE_LIMIT_COMMAND_NAME "Torque_Limit_Command"
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_D1_POST_FAULT_LO_NAME "D1_Post_Fault_Lo"
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_D2_POST_FAULT_HI_NAME "D2_Post_Fault_Hi"
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_D3_RUN_FAULT_LO_NAME "D3_Run_Fault_Lo"
#define FORMULA_MAIN_DBC_MCU_FAULT_CODES_D4_RUN_FAULT_HI_NAME "D4_Run_Fault_Hi"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_NAME "D1_VSM_State"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D1_PWM_FREQUENCY_NAME "D1_PWM_Frequency"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_NAME "D2_Inverter_State"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_1_STATUS_NAME "D3_Relay_1_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_2_STATUS_NAME "D3_Relay_2_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_3_STATUS_NAME "D3_Relay_3_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_4_STATUS_NAME "D3_Relay_4_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_5_STATUS_NAME "D3_Relay_5_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D3_RELAY_6_STATUS_NAME "D3_Relay_6_Status"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D4_INVERTER_RUN_MODE_NAME "D4_Inverter_Run_Mode"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D4_INVERTER_DISCHARGE_STATE_NAME "D4_Inverter_Discharge_State"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D5_INVERTER_COMMAND_MODE_NAME "D5_Inverter_Command_Mode"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D5_ROLLING_COUNTER_NAME "D5_Rolling_Counter"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D6_INVERTER_ENABLE_STATE_NAME "D6_Inverter_Enable_State"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D6_START_MODE_ACTIVE_NAME "D6_Start_Mode_Active"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D6_INVERTER_ENABLE_LOCKOUT_NAME "D6_Inverter_Enable_Lockout"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D7_DIRECTION_COMMAND_NAME "D7_Direction_Command"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D7_BMS_ACTIVE_NAME "D7_BMS_Active"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D7_BMS_TORQUE_LIMITING_NAME "D7_BMS_Torque_Limiting"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D7_MAX_SPEED_LIMITING_NAME "D7_Max_Speed_Limiting"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_STATES_D7_LOW_SPEED_LIMITING_NAME "D7_Low_Speed_Limiting"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_D1_REFERENCE_VOLTAGE_1_5_NAME "D1_Reference_Voltage_1_5"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_D2_REFERENCE_VOLTAGE_2_5_NAME "D2_Reference_Voltage_2_5"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_D3_REFERENCE_VOLTAGE_5_0_NAME "D3_Reference_Voltage_5_0"
#define FORMULA_MAIN_DBC_MCU_INTERNAL_VOLTAGES_D4_REFERENCE_VOLTAGE_12_0_NAME "D4_Reference_Voltage_12_0"
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_D1_FLUX_COMMAND_NAME "D1_Flux_Command"
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_D2_FLUX_FEEDBACK_NAME "D2_Flux_Feedback"
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_D3_ID_NAME "D3_Id"
#define FORMULA_MAIN_DBC_MCU_FLUX_ID_IQ_INFO_D4_IQ_NAME "D4_Iq"
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_D1_DC_BUS_VOLTAGE_NAME "D1_DC_Bus_Voltage"
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_D2_OUTPUT_VOLTAGE_NAME "D2_Output_Voltage"
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_D3_VAB_VD_VOLTAGE_NAME "D3_VAB_Vd_Voltage"
#define FORMULA_MAIN_DBC_MCU_VOLTAGE_INFO_D4_VBC_VQ_VOLTAGE_NAME "D4_VBC_Vq_Voltage"
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_D1_PHASE_A_CURRENT_NAME "D1_Phase_A_Current"
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_D2_PHASE_B_CURRENT_NAME "D2_Phase_B_Current"
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_D3_PHASE_C_CURRENT_NAME "D3_Phase_C_Current"
#define FORMULA_MAIN_DBC_MCU_CURRENT_INFO_D4_DC_BUS_CURRENT_NAME "D4_DC_Bus_Current"
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_D1_MOTOR_ANGLE_ELECTRICAL_NAME "D1_Motor_Angle_Electrical"
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_D2_MOTOR_SPEED_NAME "D2_Motor_Speed"
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_D3_ELECTRICAL_OUTPUT_FREQUENCY_NAME "D3_Electrical_Output_Frequency"
#define FORMULA_MAIN_DBC_MCU_MOTOR_POSITION_INFO_D4_DELTA_RESOLVER_FILTERED_NAME "D4_Delta_Resolver_Filtered"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D1_DIGITAL_INPUT_1_NAME "D1_Digital_Input_1"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D2_DIGITAL_INPUT_2_NAME "D2_Digital_Input_2"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D3_DIGITAL_INPUT_3_NAME "D3_Digital_Input_3"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D4_DIGITAL_INPUT_4_NAME "D4_Digital_Input_4"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D5_DIGITAL_INPUT_5_NAME "D5_Digital_Input_5"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D6_DIGITAL_INPUT_6_NAME "D6_Digital_Input_6"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D7_DIGITAL_INPUT_7_NAME "D7_Digital_Input_7"
#define FORMULA_MAIN_DBC_MCU_DIGITAL_INPUT_STATUS_D8_DIGITAL_INPUT_8_NAME "D8_Digital_Input_8"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D1_ANALOG_INPUT_1_NAME "D1_Analog_Input_1"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D2_ANALOG_INPUT_2_NAME "D2_Analog_Input_2"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D3_ANALOG_INPUT_3_NAME "D3_Analog_Input_3"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D4_ANALOG_INPUT_4_NAME "D4_Analog_Input_4"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D5_ANALOG_INPUT_5_NAME "D5_Analog_Input_5"
#define FORMULA_MAIN_DBC_MCU_ANALOG_INPUT_VOLTAGES_D6_ANALOG_INPUT_6_NAME "D6_Analog_Input_6"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_D1_RTD4_TEMPERATURE_NAME "D1_RTD4_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_D2_RTD5_TEMPERATURE_NAME "D2_RTD5_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_D3_MOTOR_TEMPERATURE_NAME "D3_Motor_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_3_D4_TORQUE_SHUDDER_NAME "D4_Torque_Shudder"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_D1_CONTROL_BOARD_TEMPERATURE_NAME "D1_Control_Board_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_D2_RTD1_TEMPERATURE_NAME "D2_RTD1_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_D3_RTD2_TEMPERATURE_NAME "D3_RTD2_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_2_D4_RTD3_TEMPERATURE_NAME "D4_RTD3_Temperature"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_D1_MODULE_A_NAME "D1_Module_A"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_D2_MODULE_B_NAME "D2_Module_B"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_D3_MODULE_C_NAME "D3_Module_C"
#define FORMULA_MAIN_DBC_MCU_TEMPERATURE_SET_1_D4_GATE_DRIVER_BOARD_NAME "D4_Gate_Driver_Board"
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_D1_PROJECT_CODE_EEP_VER_NAME "D1_Project_Code_EEP_Ver"
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_D2_SW_VERSION_NAME "D2_SW_Version"
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_D3_DATE_CODE_MMDD_NAME "D3_DateCode_MMDD"
#define FORMULA_MAIN_DBC_MCU_FIRMWARE_INFO_D4_DATE_CODE_YYYY_NAME "D4_DateCode_YYYY"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_D1_BUFFER_RECORD_NAME "D1_Buffer_Record"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_D2_BUFFER_SEGMENT_NAME "D2_Buffer_Segment"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_D3_DIAG_DATA_1_NAME "D3_Diag_Data_1"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_D4_DIAG_DATA_2_NAME "D4_Diag_Data_2"
#define FORMULA_MAIN_DBC_MCU_DIAG_DATA_D5_DIAG_DATA_3_NAME "D5_Diag_Data_3"
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_D1_ID_BYTE_NAME "D1_ID_Byte"
#define FORMULA_MAIN_DBC_MCU_U2_C_COMMAND_TXD_D2_SETPOINT_CALC_NAME "D2_Setpoint_Calc"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D1_HV_INPUT_CURRENT_SENSOR_VALIDITY_NAME "D1_HV_Input_Current_Sensor_Validity"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D2_14_V_MASTER_FAULT_NAME "D2_14V_Master_Fault"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D3_HV_INPUT_CURRENT_NAME "D3_HV_Input_Current"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D4_DTC_STATUS_NAME "D4_DTC_Status"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D5_DTC_INDEX_NAME "D5_DTC_Index"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D6_14_V_MONITOR_NAME "D6_14V_Monitor"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D7_14_V_CONDITIONAL_NAME "D7_14V_Conditional"
#define FORMULA_MAIN_DBC_MCU_U2_C_MESSAGE_RXD_D8_14_V_CURRENT_MONITOR_NAME "D8_14V_Current_Monitor"
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_D1_MAX_DISCHARGE_CURRENT_NAME "D1_Max_Discharge_Current"
#define FORMULA_MAIN_DBC_BMS_CURRENT_LIMIT_D2_MAX_CHARGE_CURRENT_NAME "D2_Max_Charge_Current"
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_FAST_TORQUE_COMMAND_NAME "Fast_Torque_Command"
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_FAST_TORQUE_FEEDBACK_NAME "Fast_Torque_Feedback"
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_FAST_MOTOR_SPEED_NAME "Fast_Motor_Speed"
#define FORMULA_MAIN_DBC_MCU_FAST_INFO_FAST_DC_BUS_VOLTAGE_NAME "Fast_DC_Bus_Voltage"
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_SOC_NAME "BMS_Status_SOC"
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_SOC_RAW_NAME "BMS_Status_SOC_raw"
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_NAME "BMS_Status_ChargeState"
#define FORMULA_MAIN_DBC_BMS_STATUS_BMS_STATUS_PACK_VOLTAGE_NAME "BMS_Status_PackVoltage"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_CELLS_NAME "BMS_FaultVector_SLAVE_COMM_CELLS"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_TEMPS_NAME "BMS_FaultVector_SLAVE_COMM_TEMPS"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_DRAIN_REQUEST_NAME "BMS_FaultVector_SLAVE_COMM_DRAIN_REQUEST"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CURRENT_SENSOR_COMM_NAME "BMS_FaultVector_CURRENT_SENSOR_COMM"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OVER_CURRENT_NAME "BMS_FaultVector_OVER_CURRENT"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CELL_VOLTAGE_IRRATIONAL_NAME "BMS_FaultVector_CELL_VOLTAGE_IRRATIONAL"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CELL_VOLTAGE_DIFF_NAME "BMS_FaultVector_CELL_VOLTAGE_DIFF"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OUT_OF_JUICE_NAME "BMS_FaultVector_OUT_OF_JUICE"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_TEMPERATURE_IRRATIONAL_NAME "BMS_FaultVector_TEMPERATURE_IRRATIONAL"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OVER_TEMPERATURE_NAME "BMS_FaultVector_OVER_TEMPERATURE"
#define FORMULA_MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_DRAIN_FAILURE_NAME "BMS_FaultVector_DRAIN_FAILURE"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_NAME "BMS_FaultAlert_code"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CELL_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_cell_comm_slave_board_num"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_TEMP_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_temp_comm_slave_board_num"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_DRAIN_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_drain_comm_slave_board_num"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_ADC_ERROR_CODE_NAME "BMS_FaultAlert_adc_error_code"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CURRENT_NAME "BMS_FaultAlert_current"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_IRRATIONAL_VOLTAGE_NAME "BMS_FaultAlert_irrational_voltage"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_VOLTAGE_DIFF_NAME "BMS_FaultAlert_voltage_diff"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_LOWEST_CELL_VOLTAGE_NAME "BMS_FaultAlert_lowest_cell_voltage"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_IRRATIONAL_TEMPERATURE_NAME "BMS_FaultAlert_irrational_temperature"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_OVER_TEMPERATURE_NAME "BMS_FaultAlert_over_temperature"
#define FORMULA_MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_FAILED_DRAIN_CELL_NAME "BMS_FaultAlert_failed_drain_cell"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_MUX_NAME "BMS_Voltages_mux"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL1_NAME "BMS_Voltages_Seg1_Cell1"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL7_NAME "BMS_Voltages_Seg1_Cell7"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL13_NAME "BMS_Voltages_Seg1_Cell13"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL19_NAME "BMS_Voltages_Seg1_Cell19"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL6_NAME "BMS_Voltages_Seg2_Cell6"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL12_NAME "BMS_Voltages_Seg2_Cell12"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL18_NAME "BMS_Voltages_Seg2_Cell18"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL5_NAME "BMS_Voltages_Seg3_Cell5"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL11_NAME "BMS_Voltages_Seg3_Cell11"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL17_NAME "BMS_Voltages_Seg3_Cell17"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL4_NAME "BMS_Voltages_Seg4_Cell4"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL10_NAME "BMS_Voltages_Seg4_Cell10"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL16_NAME "BMS_Voltages_Seg4_Cell16"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL2_NAME "BMS_Voltages_Seg1_Cell2"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL8_NAME "BMS_Voltages_Seg1_Cell8"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL14_NAME "BMS_Voltages_Seg1_Cell14"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL1_NAME "BMS_Voltages_Seg2_Cell1"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL7_NAME "BMS_Voltages_Seg2_Cell7"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL13_NAME "BMS_Voltages_Seg2_Cell13"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL19_NAME "BMS_Voltages_Seg2_Cell19"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL6_NAME "BMS_Voltages_Seg3_Cell6"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL12_NAME "BMS_Voltages_Seg3_Cell12"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL18_NAME "BMS_Voltages_Seg3_Cell18"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL5_NAME "BMS_Voltages_Seg4_Cell5"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL11_NAME "BMS_Voltages_Seg4_Cell11"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL17_NAME "BMS_Voltages_Seg4_Cell17"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL3_NAME "BMS_Voltages_Seg1_Cell3"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL9_NAME "BMS_Voltages_Seg1_Cell9"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL15_NAME "BMS_Voltages_Seg1_Cell15"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL2_NAME "BMS_Voltages_Seg2_Cell2"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL8_NAME "BMS_Voltages_Seg2_Cell8"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL14_NAME "BMS_Voltages_Seg2_Cell14"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL1_NAME "BMS_Voltages_Seg3_Cell1"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL7_NAME "BMS_Voltages_Seg3_Cell7"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL13_NAME "BMS_Voltages_Seg3_Cell13"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL19_NAME "BMS_Voltages_Seg3_Cell19"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL6_NAME "BMS_Voltages_Seg4_Cell6"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL12_NAME "BMS_Voltages_Seg4_Cell12"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL18_NAME "BMS_Voltages_Seg4_Cell18"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL4_NAME "BMS_Voltages_Seg1_Cell4"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL10_NAME "BMS_Voltages_Seg1_Cell10"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL16_NAME "BMS_Voltages_Seg1_Cell16"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL3_NAME "BMS_Voltages_Seg2_Cell3"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL9_NAME "BMS_Voltages_Seg2_Cell9"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL15_NAME "BMS_Voltages_Seg2_Cell15"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL2_NAME "BMS_Voltages_Seg3_Cell2"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL8_NAME "BMS_Voltages_Seg3_Cell8"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL14_NAME "BMS_Voltages_Seg3_Cell14"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL1_NAME "BMS_Voltages_Seg4_Cell1"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL7_NAME "BMS_Voltages_Seg4_Cell7"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL13_NAME "BMS_Voltages_Seg4_Cell13"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL19_NAME "BMS_Voltages_Seg4_Cell19"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL5_NAME "BMS_Voltages_Seg1_Cell5"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL11_NAME "BMS_Voltages_Seg1_Cell11"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL17_NAME "BMS_Voltages_Seg1_Cell17"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL4_NAME "BMS_Voltages_Seg2_Cell4"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL10_NAME "BMS_Voltages_Seg2_Cell10"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL16_NAME "BMS_Voltages_Seg2_Cell16"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL3_NAME "BMS_Voltages_Seg3_Cell3"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL9_NAME "BMS_Voltages_Seg3_Cell9"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL15_NAME "BMS_Voltages_Seg3_Cell15"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL2_NAME "BMS_Voltages_Seg4_Cell2"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL8_NAME "BMS_Voltages_Seg4_Cell8"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL14_NAME "BMS_Voltages_Seg4_Cell14"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL6_NAME "BMS_Voltages_Seg1_Cell6"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL12_NAME "BMS_Voltages_Seg1_Cell12"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG1_CELL18_NAME "BMS_Voltages_Seg1_Cell18"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL5_NAME "BMS_Voltages_Seg2_Cell5"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL11_NAME "BMS_Voltages_Seg2_Cell11"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG2_CELL17_NAME "BMS_Voltages_Seg2_Cell17"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL4_NAME "BMS_Voltages_Seg3_Cell4"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL10_NAME "BMS_Voltages_Seg3_Cell10"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG3_CELL16_NAME "BMS_Voltages_Seg3_Cell16"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL3_NAME "BMS_Voltages_Seg4_Cell3"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL9_NAME "BMS_Voltages_Seg4_Cell9"
#define FORMULA_MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_SEG4_CELL15_NAME "BMS_Voltages_Seg4_Cell15"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_MUX_NAME "BMS_ThermistorVoltages_mux"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM1_NAME "BMS_ThermistorVoltages_Seg1_tm1"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM7_NAME "BMS_ThermistorVoltages_Seg1_tm7"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM5_NAME "BMS_ThermistorVoltages_Seg2_tm5"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM3_NAME "BMS_ThermistorVoltages_Seg3_tm3"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM1_NAME "BMS_ThermistorVoltages_Seg4_tm1"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM7_NAME "BMS_ThermistorVoltages_Seg4_tm7"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM2_NAME "BMS_ThermistorVoltages_Seg1_tm2"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM8_NAME "BMS_ThermistorVoltages_Seg1_tm8"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM6_NAME "BMS_ThermistorVoltages_Seg2_tm6"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM4_NAME "BMS_ThermistorVoltages_Seg3_tm4"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM2_NAME "BMS_ThermistorVoltages_Seg4_tm2"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM8_NAME "BMS_ThermistorVoltages_Seg4_tm8"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM3_NAME "BMS_ThermistorVoltages_Seg1_tm3"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM1_NAME "BMS_ThermistorVoltages_Seg2_tm1"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM7_NAME "BMS_ThermistorVoltages_Seg2_tm7"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM5_NAME "BMS_ThermistorVoltages_Seg3_tm5"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM3_NAME "BMS_ThermistorVoltages_Seg4_tm3"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM4_NAME "BMS_ThermistorVoltages_Seg1_tm4"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM2_NAME "BMS_ThermistorVoltages_Seg2_tm2"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM8_NAME "BMS_ThermistorVoltages_Seg2_tm8"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM6_NAME "BMS_ThermistorVoltages_Seg3_tm6"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM4_NAME "BMS_ThermistorVoltages_Seg4_tm4"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM5_NAME "BMS_ThermistorVoltages_Seg1_tm5"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM3_NAME "BMS_ThermistorVoltages_Seg2_tm3"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM1_NAME "BMS_ThermistorVoltages_Seg3_tm1"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM7_NAME "BMS_ThermistorVoltages_Seg3_tm7"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM5_NAME "BMS_ThermistorVoltages_Seg4_tm5"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG1_TM6_NAME "BMS_ThermistorVoltages_Seg1_tm6"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG2_TM4_NAME "BMS_ThermistorVoltages_Seg2_tm4"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM2_NAME "BMS_ThermistorVoltages_Seg3_tm2"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG3_TM8_NAME "BMS_ThermistorVoltages_Seg3_tm8"
#define FORMULA_MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_SEG4_TM6_NAME "BMS_ThermistorVoltages_Seg4_tm6"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_MUX_NAME "BMS_Temperatures_mux"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_1_NAME "BMS_Temperatures_Seg1_1"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_8_NAME "BMS_Temperatures_Seg1_8"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_7_NAME "BMS_Temperatures_Seg2_7"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_6_NAME "BMS_Temperatures_Seg3_6"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_5_NAME "BMS_Temperatures_Seg4_5"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_2_NAME "BMS_Temperatures_Seg1_2"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_1_NAME "BMS_Temperatures_Seg2_1"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_8_NAME "BMS_Temperatures_Seg2_8"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_7_NAME "BMS_Temperatures_Seg3_7"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_6_NAME "BMS_Temperatures_Seg4_6"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_3_NAME "BMS_Temperatures_Seg1_3"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_2_NAME "BMS_Temperatures_Seg2_2"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_1_NAME "BMS_Temperatures_Seg3_1"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_8_NAME "BMS_Temperatures_Seg3_8"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_7_NAME "BMS_Temperatures_Seg4_7"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_4_NAME "BMS_Temperatures_Seg1_4"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_3_NAME "BMS_Temperatures_Seg2_3"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_2_NAME "BMS_Temperatures_Seg3_2"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_1_NAME "BMS_Temperatures_Seg4_1"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_8_NAME "BMS_Temperatures_Seg4_8"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_5_NAME "BMS_Temperatures_Seg1_5"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_4_NAME "BMS_Temperatures_Seg2_4"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_3_NAME "BMS_Temperatures_Seg3_3"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_2_NAME "BMS_Temperatures_Seg4_2"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_6_NAME "BMS_Temperatures_Seg1_6"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_5_NAME "BMS_Temperatures_Seg2_5"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_4_NAME "BMS_Temperatures_Seg3_4"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_3_NAME "BMS_Temperatures_Seg4_3"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG1_7_NAME "BMS_Temperatures_Seg1_7"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG2_6_NAME "BMS_Temperatures_Seg2_6"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG3_5_NAME "BMS_Temperatures_Seg3_5"
#define FORMULA_MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_SEG4_4_NAME "BMS_Temperatures_Seg4_4"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_MUX_NAME "BMS_DrainStatus_mux"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL1_NAME "BMS_DrainStatus_Seg1_Cell1"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL7_NAME "BMS_DrainStatus_Seg4_Cell7"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL2_NAME "BMS_DrainStatus_Seg1_Cell2"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL8_NAME "BMS_DrainStatus_Seg4_Cell8"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL3_NAME "BMS_DrainStatus_Seg1_Cell3"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL9_NAME "BMS_DrainStatus_Seg4_Cell9"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL4_NAME "BMS_DrainStatus_Seg1_Cell4"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL10_NAME "BMS_DrainStatus_Seg4_Cell10"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL5_NAME "BMS_DrainStatus_Seg1_Cell5"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL11_NAME "BMS_DrainStatus_Seg4_Cell11"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL6_NAME "BMS_DrainStatus_Seg1_Cell6"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL12_NAME "BMS_DrainStatus_Seg4_Cell12"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL7_NAME "BMS_DrainStatus_Seg1_Cell7"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL13_NAME "BMS_DrainStatus_Seg4_Cell13"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL8_NAME "BMS_DrainStatus_Seg1_Cell8"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL14_NAME "BMS_DrainStatus_Seg4_Cell14"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL9_NAME "BMS_DrainStatus_Seg1_Cell9"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL15_NAME "BMS_DrainStatus_Seg4_Cell15"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL10_NAME "BMS_DrainStatus_Seg1_Cell10"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL16_NAME "BMS_DrainStatus_Seg4_Cell16"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL11_NAME "BMS_DrainStatus_Seg1_Cell11"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL17_NAME "BMS_DrainStatus_Seg4_Cell17"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL12_NAME "BMS_DrainStatus_Seg1_Cell12"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL18_NAME "BMS_DrainStatus_Seg4_Cell18"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL13_NAME "BMS_DrainStatus_Seg1_Cell13"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL19_NAME "BMS_DrainStatus_Seg4_Cell19"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL14_NAME "BMS_DrainStatus_Seg1_Cell14"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL15_NAME "BMS_DrainStatus_Seg1_Cell15"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL16_NAME "BMS_DrainStatus_Seg1_Cell16"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL17_NAME "BMS_DrainStatus_Seg1_Cell17"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL18_NAME "BMS_DrainStatus_Seg1_Cell18"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG1_CELL19_NAME "BMS_DrainStatus_Seg1_Cell19"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL1_NAME "BMS_DrainStatus_Seg2_Cell1"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL2_NAME "BMS_DrainStatus_Seg2_Cell2"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL3_NAME "BMS_DrainStatus_Seg2_Cell3"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL4_NAME "BMS_DrainStatus_Seg2_Cell4"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL5_NAME "BMS_DrainStatus_Seg2_Cell5"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL6_NAME "BMS_DrainStatus_Seg2_Cell6"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL7_NAME "BMS_DrainStatus_Seg2_Cell7"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL8_NAME "BMS_DrainStatus_Seg2_Cell8"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL9_NAME "BMS_DrainStatus_Seg2_Cell9"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL10_NAME "BMS_DrainStatus_Seg2_Cell10"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL11_NAME "BMS_DrainStatus_Seg2_Cell11"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL12_NAME "BMS_DrainStatus_Seg2_Cell12"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL13_NAME "BMS_DrainStatus_Seg2_Cell13"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL14_NAME "BMS_DrainStatus_Seg2_Cell14"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL15_NAME "BMS_DrainStatus_Seg2_Cell15"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL16_NAME "BMS_DrainStatus_Seg2_Cell16"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL17_NAME "BMS_DrainStatus_Seg2_Cell17"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL18_NAME "BMS_DrainStatus_Seg2_Cell18"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG2_CELL19_NAME "BMS_DrainStatus_Seg2_Cell19"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL1_NAME "BMS_DrainStatus_Seg3_Cell1"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL2_NAME "BMS_DrainStatus_Seg3_Cell2"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL3_NAME "BMS_DrainStatus_Seg3_Cell3"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL4_NAME "BMS_DrainStatus_Seg3_Cell4"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL5_NAME "BMS_DrainStatus_Seg3_Cell5"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL6_NAME "BMS_DrainStatus_Seg3_Cell6"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL7_NAME "BMS_DrainStatus_Seg3_Cell7"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL8_NAME "BMS_DrainStatus_Seg3_Cell8"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL9_NAME "BMS_DrainStatus_Seg3_Cell9"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL10_NAME "BMS_DrainStatus_Seg3_Cell10"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL11_NAME "BMS_DrainStatus_Seg3_Cell11"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL12_NAME "BMS_DrainStatus_Seg3_Cell12"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL13_NAME "BMS_DrainStatus_Seg3_Cell13"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL14_NAME "BMS_DrainStatus_Seg3_Cell14"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL15_NAME "BMS_DrainStatus_Seg3_Cell15"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL16_NAME "BMS_DrainStatus_Seg3_Cell16"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL17_NAME "BMS_DrainStatus_Seg3_Cell17"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL18_NAME "BMS_DrainStatus_Seg3_Cell18"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG3_CELL19_NAME "BMS_DrainStatus_Seg3_Cell19"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL1_NAME "BMS_DrainStatus_Seg4_Cell1"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL2_NAME "BMS_DrainStatus_Seg4_Cell2"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL3_NAME "BMS_DrainStatus_Seg4_Cell3"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL4_NAME "BMS_DrainStatus_Seg4_Cell4"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL5_NAME "BMS_DrainStatus_Seg4_Cell5"
#define FORMULA_MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_SEG4_CELL6_NAME "BMS_DrainStatus_Seg4_Cell6"
#define FORMULA_MAIN_DBC_BMS_CURRENT_BMS_INST_CURRENT_FILT_NAME "BMS_InstCurrentFilt"
#define FORMULA_MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_NAME "BMS_HardFaultIndicator_task"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_MUX_NAME "BMS_Ref_mux"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF0_NAME "BMS_Ref_ref0"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF6_NAME "BMS_Ref_ref6"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF1_NAME "BMS_Ref_ref1"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF7_NAME "BMS_Ref_ref7"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF2_NAME "BMS_Ref_ref2"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF8_NAME "BMS_Ref_ref8"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF3_NAME "BMS_Ref_ref3"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF9_NAME "BMS_Ref_ref9"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF4_NAME "BMS_Ref_ref4"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF10_NAME "BMS_Ref_ref10"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF5_NAME "BMS_Ref_ref5"
#define FORMULA_MAIN_DBC_BMS_REF_BMS_REF_REF11_NAME "BMS_Ref_ref11"
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_NAME "BMS_LimpMode_VoltageLimpLevel"
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_NAME "BMS_LimpMode_TempLimpLevel"
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_CURRENT_LIMIT_NAME "BMS_LimpMode_VoltageCurrentLimit"
#define FORMULA_MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_CURRENT_LIMIT_NAME "BMS_LimpMode_TempCurrentLimit"
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_BMS_CHARGE_REQUEST_MAX_VOLTAGE_NAME "BMS_ChargeRequest_MaxVoltage"
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_BMS_CHARGE_REQUEST_MAX_CURRENT_NAME "BMS_ChargeRequest_MaxCurrent"
#define FORMULA_MAIN_DBC_BMS_CHARGE_REQUEST_BMS_CHARGE_REQUEST_CONTROL_NAME "BMS_ChargeRequest_Control"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_OUTPUT_VOLTAGE_NAME "CHG_OutputVoltage"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_OUTPUT_CURRENT_NAME "CHG_OutputCurrent"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_HARDWARE_FAILURE_NAME "CHG_Flag_HardwareFailure"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_OVER_TEMPERATURE_NAME "CHG_Flag_OverTemperature"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_INPUT_VOLTAGE_NAME "CHG_Flag_InputVoltage"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_STARTING_STATE_NAME "CHG_Flag_StartingState"
#define FORMULA_MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_COMM_TIMEOUT_NAME "CHG_Flag_CommTimeout"

/**
 * Signals in message BMS_CellOverview.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_cell_overview_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_min;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_max;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_avg;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_min;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_max;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_avg;

    /**
     * Number of cells currently draining
     *
     * Range: 0..76 (0..76 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_overview_drains;
};

/**
 * Signals in message C70_WheelSpeeds.
 *
 * Wheel speeds, relayed by C70
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_c70_wheel_speeds_t {
    /**
     * Range: 0..65536 (0..65536 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t c70_wheel_speed_fl;

    /**
     * Range: 0..65536 (0..65536 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t c70_wheel_speed_fr;

    /**
     * Range: 0..65536 (0..65536 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t c70_wheel_speed_rl;

    /**
     * Range: 0..65536 (0..65536 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t c70_wheel_speed_rr;
};

/**
 * Signals in message C70_BrakePressures.
 *
 * Brake Pressures, relayed by C70
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_c70_brake_pressures_t {
    /**
     * Range: 0..5000 (0..5000 psi)
     * Scale: 1
     * Offset: 0
     */
    uint16_t c70_brake_pressure_front;

    /**
     * Range: -6250..6250 (0..2500 psi)
     * Scale: 0.2
     * Offset: 1250
     */
    int16_t c70_brake_pressure_rear;
};

/**
 * Signals in message VC_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_status_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_status_vehicle_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_status_mc_state;
};

/**
 * Signals in message VC_PedalInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_pedal_inputs_t {
    /**
     * Range: 0..30000 (0..3000 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_brake_pressure;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_pedal_inputs_accel_position_a;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_pedal_inputs_accel_position_b;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_avg;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_pedal_inputs_accel_position_err;

    /**
     * Range: 0..254 (0..254 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_pedal_inputs_torque_requested;
};

/**
 * Signals in message VC_PedalInputsRaw.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_pedal_inputs_raw_t {
    /**
     * Range: 0..500 (0..5 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_accel_voltage_a;

    /**
     * Range: 0..500 (0..5 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_accel_voltage_b;

    /**
     * Range: 0..500 (0..5 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_brake_voltage;
};

/**
 * Signals in message VC_DashInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_dash_inputs_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_rt_dbutton;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch2;
};

/**
 * Signals in message VC_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_shutdown_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bms_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_signal_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_precharge;
};

/**
 * Signals in message VC_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_brake_sensor_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_accelerator_sensor_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_sensor_disagreement;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_double_pedal;
};

/**
 * Signals in message VC_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_hard_fault_indicator_task;
};

/**
 * Signals in message VC_RTDSRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_vc_rtds_request_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_request_rtds;
};

/**
 * Signals in message PBX_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_pbx_status_t {
    /**
     * Range: 0..2000 (0..20 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pbx_lv_voltage;

    /**
     * Range: 0..10000 (0..100 A)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pbx_lv_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pbx_pumps_on;
};

/**
 * Signals in message MCU_Modulation_And_Flux_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_modulation_and_flux_info_t {
    /**
     * Range: -32768..32767 (-3.2768..3.2767 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t d1_modulation_index;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_flux_weakening_output;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_id_command;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_iq_command;
};

/**
 * Signals in message MCU_Torque_And_Timer_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_torque_and_timer_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_commanded_torque;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_torque_feedback;

    /**
     * Range: 0..4294933333 (0..12884800 Sec)
     * Scale: 0.003
     * Offset: 0
     */
    uint32_t d3_power_on_timer;
};

/**
 * Signals in message MCU_Read_Write_Param_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_read_write_param_response_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_parameter_address_response;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_write_success;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_data_response;
};

/**
 * Signals in message MCU_Read_Write_Param_Command.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_read_write_param_command_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_parameter_address_command;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_read_write_command;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_data_command;
};

/**
 * Signals in message MCU_Command_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_command_message_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t torque_command;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_command;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_command;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_enable;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_discharge;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_mode_enable;

    /**
     * Range: 0..15 (0..15 Bits)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t torque_limit_command;
};

/**
 * Signals in message MCU_Fault_Codes.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_fault_codes_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_post_fault_lo;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_post_fault_hi;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d3_run_fault_lo;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d4_run_fault_hi;
};

/**
 * Signals in message MCU_Internal_States.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_internal_states_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_vsm_state;

    /**
     * Range: 0..255 (0..255 kHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_pwm_frequency;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_inverter_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_1_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_2_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_3_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_4_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_5_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_6_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_inverter_run_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_inverter_discharge_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_inverter_command_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_rolling_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_inverter_enable_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_start_mode_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_inverter_enable_lockout;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_direction_command;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_bms_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_bms_torque_limiting;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_max_speed_limiting;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_low_speed_limiting;
};

/**
 * Signals in message MCU_Internal_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_internal_voltages_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d1_reference_voltage_1_5;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d2_reference_voltage_2_5;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d3_reference_voltage_5_0;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d4_reference_voltage_12_0;
};

/**
 * Signals in message MCU_Flux_ID_IQ_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_flux_id_iq_info_t {
    /**
     * Range: -32768..32767 (-32.768..32.767 Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t d1_flux_command;

    /**
     * Range: -32768..32767 (-32.768..32.767 Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t d2_flux_feedback;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_id;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_iq;
};

/**
 * Signals in message MCU_Voltage_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_voltage_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_dc_bus_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_output_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_vab_vd_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_vbc_vq_voltage;
};

/**
 * Signals in message MCU_Current_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_current_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_phase_a_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_phase_b_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_phase_c_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_dc_bus_current;
};

/**
 * Signals in message MCU_Motor_Position_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_motor_position_info_t {
    /**
     * Range: 0..65535 (0..6553.5 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t d1_motor_angle_electrical;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t d2_motor_speed;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_electrical_output_frequency;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_delta_resolver_filtered;
};

/**
 * Signals in message MCU_Digital_Input_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_digital_input_status_t {
    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_digital_input_1;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_digital_input_2;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_digital_input_3;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_digital_input_4;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_digital_input_5;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_digital_input_6;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_digital_input_7;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d8_digital_input_8;
};

/**
 * Signals in message MCU_Analog_Input_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_analog_input_voltages_t {
    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d1_analog_input_1;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d2_analog_input_2;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d3_analog_input_3;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d4_analog_input_4;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d5_analog_input_5;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d6_analog_input_6;
};

/**
 * Signals in message MCU_Temperature_Set_3.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_temperature_set_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_rtd4_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_rtd5_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_motor_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_torque_shudder;
};

/**
 * Signals in message MCU_Temperature_Set_2.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_temperature_set_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_control_board_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_rtd1_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_rtd2_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_rtd3_temperature;
};

/**
 * Signals in message MCU_Temperature_Set_1.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_temperature_set_1_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_module_a;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_module_b;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_module_c;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_gate_driver_board;
};

/**
 * Signals in message MCU_Firmware_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_firmware_info_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_project_code_eep_ver;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_sw_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d3_date_code_mmdd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d4_date_code_yyyy;
};

/**
 * Signals in message MCU_Diag_Data.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_diag_data_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_buffer_record;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_buffer_segment;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_diag_data_1;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d4_diag_data_2;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d5_diag_data_3;
};

/**
 * Signals in message MCU_U2C_Command_Txd.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_u2_c_command_txd_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_id_byte;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_setpoint_calc;
};

/**
 * Signals in message MCU_U2C_Message_Rxd.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_u2_c_message_rxd_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_hv_input_current_sensor_validity;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_14_v_master_fault;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_hv_input_current;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_dtc_status;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_dtc_index;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_14_v_monitor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_14_v_conditional;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d8_14_v_current_monitor;
};

/**
 * Signals in message BMS_Current_Limit.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_current_limit_t {
    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_max_discharge_current;

    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_max_charge_current;
};

/**
 * Signals in message MCU_Fast_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_mcu_fast_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_torque_command;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_torque_feedback;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t fast_motor_speed;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_dc_bus_voltage;
};

/**
 * Signals in message BMS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_status_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc_raw;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_charge_state;

    /**
     * Range: 0..4000 (0..400 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_status_pack_voltage;
};

/**
 * Signals in message BMS_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_cells;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_temps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_drain_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_current_sensor_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_out_of_juice;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_temperature_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_drain_failure;
};

/**
 * Signals in message BMS_FaultAlert.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_fault_alert_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_cell_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_temp_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_drain_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_adc_error_code;

    /**
     * Range: 0..2000000 (0..2000 A)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bms_fault_alert_current;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_voltage;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_voltage_diff;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_lowest_cell_voltage;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_temperature;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_over_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_failed_drain_cell;
};

/**
 * Signals in message BMS_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_voltages_t {
    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg1_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg2_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg3_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_seg4_cell15;
};

/**
 * Signals in message BMS_ThermistorVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_thermistor_voltages_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermistor_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg1_tm6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg2_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg3_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_seg4_tm6;
};

/**
 * Signals in message BMS_Temperatures.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_temperatures_t {
    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temperatures_mux;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg1_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg2_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg3_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_seg4_4;
};

/**
 * Signals in message BMS_DrainStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_drain_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_mux;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg1_cell19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg2_cell19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg3_cell19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_seg4_cell6;
};

/**
 * Signals in message BMS_Current.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_current_t {
    /**
     * Range: -100000..250000 (-100..250 A)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t bms_inst_current_filt;
};

/**
 * Signals in message BMS_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hard_fault_indicator_task;
};

/**
 * Signals in message BMS_Ref.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_ref_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ref_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref11;
};

/**
 * Signals in message BMS_LimpMode.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_limp_mode_t {
    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_limp_mode_voltage_limp_level;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_limp_mode_temp_limp_level;

    /**
     * Range: -100..500 (-100..500 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t bms_limp_mode_voltage_current_limit;

    /**
     * Range: -100..500 (-100..500 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t bms_limp_mode_temp_current_limit;
};

/**
 * Signals in message BMS_ChargeRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_bms_charge_request_t {
    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_request_control;
};

/**
 * Signals in message CHG_ChargeStats.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_main_dbc_chg_charge_stats_t {
    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_output_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_output_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_hardware_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_input_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_starting_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_comm_timeout;
};

/**
 * Pack message BMS_CellOverview.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_cell_overview_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_cell_overview_t *src_p,
    size_t size);

/**
 * Unpack message BMS_CellOverview.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_cell_overview_unpack(
    struct formula_main_dbc_bms_cell_overview_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_CellOverview.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_cell_overview_init(struct formula_main_dbc_bms_cell_overview_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_cell_overview_bms_overview_temp_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_temp_min_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_temp_min_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_cell_overview_bms_overview_temp_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_temp_max_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_temp_max_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_cell_overview_bms_overview_temp_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_temp_avg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_temp_avg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_cell_overview_bms_overview_volt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_volt_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_volt_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_cell_overview_bms_overview_volt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_volt_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_volt_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_cell_overview_bms_overview_volt_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_volt_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_volt_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_cell_overview_bms_overview_drains_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_cell_overview_bms_overview_drains_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_cell_overview_bms_overview_drains_is_in_range(uint8_t value);

/**
 * Pack message C70_WheelSpeeds.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_c70_wheel_speeds_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_c70_wheel_speeds_t *src_p,
    size_t size);

/**
 * Unpack message C70_WheelSpeeds.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_c70_wheel_speeds_unpack(
    struct formula_main_dbc_c70_wheel_speeds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from C70_WheelSpeeds.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_c70_wheel_speeds_init(struct formula_main_dbc_c70_wheel_speeds_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_fr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_wheel_speeds_c70_wheel_speed_rr_is_in_range(int16_t value);

/**
 * Pack message C70_BrakePressures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_c70_brake_pressures_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_c70_brake_pressures_t *src_p,
    size_t size);

/**
 * Unpack message C70_BrakePressures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_c70_brake_pressures_unpack(
    struct formula_main_dbc_c70_brake_pressures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from C70_BrakePressures.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_c70_brake_pressures_init(struct formula_main_dbc_c70_brake_pressures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_c70_brake_pressures_c70_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_brake_pressures_c70_brake_pressure_front_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_brake_pressures_c70_brake_pressure_front_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_c70_brake_pressures_c70_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_c70_brake_pressures_c70_brake_pressure_rear_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_c70_brake_pressures_c70_brake_pressure_rear_is_in_range(int16_t value);

/**
 * Pack message VC_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_status_unpack(
    struct formula_main_dbc_vc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_status_init(struct formula_main_dbc_vc_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_status_vc_status_vehicle_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_status_vc_status_vehicle_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_status_vc_status_vehicle_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_status_vc_status_mc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_status_vc_status_mc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_status_vc_status_mc_state_is_in_range(uint8_t value);

/**
 * Pack message VC_PedalInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_pedal_inputs_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_pedal_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_PedalInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_pedal_inputs_unpack(
    struct formula_main_dbc_vc_pedal_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_PedalInputs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_pedal_inputs_init(struct formula_main_dbc_vc_pedal_inputs_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_torque_requested_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_torque_requested_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_vc_pedal_inputs_torque_requested_is_in_range(uint8_t value);

/**
 * Pack message VC_PedalInputsRaw.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_pedal_inputs_raw_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_pedal_inputs_raw_t *src_p,
    size_t size);

/**
 * Unpack message VC_PedalInputsRaw.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_pedal_inputs_raw_unpack(
    struct formula_main_dbc_vc_pedal_inputs_raw_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_PedalInputsRaw.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_pedal_inputs_raw_init(struct formula_main_dbc_vc_pedal_inputs_raw_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_a_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_a_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_b_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_voltage_b_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_voltage_is_in_range(uint16_t value);

/**
 * Pack message VC_DashInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_dash_inputs_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_dash_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_DashInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_dash_inputs_unpack(
    struct formula_main_dbc_vc_dash_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_DashInputs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_dash_inputs_init(struct formula_main_dbc_vc_dash_inputs_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_is_in_range(uint8_t value);

/**
 * Pack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_shutdown_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_shutdown_status_unpack(
    struct formula_main_dbc_vc_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_ShutdownStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_shutdown_status_init(struct formula_main_dbc_vc_shutdown_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_is_in_range(uint8_t value);

/**
 * Pack message VC_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_fault_vector_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message VC_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_fault_vector_unpack(
    struct formula_main_dbc_vc_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FaultVector.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_fault_vector_init(struct formula_main_dbc_vc_fault_vector_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_is_in_range(uint8_t value);

/**
 * Pack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_hard_fault_indicator_unpack(
    struct formula_main_dbc_vc_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_HardFaultIndicator.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_hard_fault_indicator_init(struct formula_main_dbc_vc_hard_fault_indicator_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message VC_RTDSRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_vc_rtds_request_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_vc_rtds_request_t *src_p,
    size_t size);

/**
 * Unpack message VC_RTDSRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_vc_rtds_request_unpack(
    struct formula_main_dbc_vc_rtds_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RTDSRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_vc_rtds_request_init(struct formula_main_dbc_vc_rtds_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_vc_rtds_request_vc_request_rtds_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_vc_rtds_request_vc_request_rtds_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_vc_rtds_request_vc_request_rtds_is_in_range(uint8_t value);

/**
 * Pack message PBX_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_pbx_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_pbx_status_t *src_p,
    size_t size);

/**
 * Unpack message PBX_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_pbx_status_unpack(
    struct formula_main_dbc_pbx_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PBX_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_pbx_status_init(struct formula_main_dbc_pbx_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_pbx_status_pbx_lv_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_pbx_status_pbx_lv_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_pbx_status_pbx_lv_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_pbx_status_pbx_lv_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_pbx_status_pbx_lv_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_pbx_status_pbx_lv_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_pbx_status_pbx_pumps_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_pbx_status_pbx_pumps_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_pbx_status_pbx_pumps_on_is_in_range(uint8_t value);

/**
 * Pack message MCU_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_modulation_and_flux_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_modulation_and_flux_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_modulation_and_flux_info_unpack(
    struct formula_main_dbc_mcu_modulation_and_flux_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Modulation_And_Flux_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_modulation_and_flux_info_init(struct formula_main_dbc_mcu_modulation_and_flux_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_modulation_and_flux_info_d1_modulation_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_modulation_and_flux_info_d1_modulation_index_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_modulation_and_flux_info_d1_modulation_index_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_modulation_and_flux_info_d3_id_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_modulation_and_flux_info_d3_id_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_modulation_and_flux_info_d3_id_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_modulation_and_flux_info_d4_iq_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_modulation_and_flux_info_d4_iq_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_modulation_and_flux_info_d4_iq_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_torque_and_timer_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_torque_and_timer_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_torque_and_timer_info_unpack(
    struct formula_main_dbc_mcu_torque_and_timer_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Torque_And_Timer_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_torque_and_timer_info_init(struct formula_main_dbc_mcu_torque_and_timer_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_torque_and_timer_info_d1_commanded_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_torque_and_timer_info_d1_commanded_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_torque_and_timer_info_d1_commanded_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_torque_and_timer_info_d2_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_torque_and_timer_info_d2_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_torque_and_timer_info_d2_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t formula_main_dbc_mcu_torque_and_timer_info_d3_power_on_timer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_torque_and_timer_info_d3_power_on_timer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_torque_and_timer_info_d3_power_on_timer_is_in_range(uint32_t value);

/**
 * Pack message MCU_Read_Write_Param_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_read_write_param_response_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_read_write_param_response_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Read_Write_Param_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_read_write_param_response_unpack(
    struct formula_main_dbc_mcu_read_write_param_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Read_Write_Param_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_read_write_param_response_init(struct formula_main_dbc_mcu_read_write_param_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_read_write_param_response_d1_parameter_address_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_response_d1_parameter_address_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_response_d1_parameter_address_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_read_write_param_response_d2_write_success_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_response_d2_write_success_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_response_d2_write_success_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_read_write_param_response_d3_data_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_response_d3_data_response_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_response_d3_data_response_is_in_range(int16_t value);

/**
 * Pack message MCU_Read_Write_Param_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_read_write_param_command_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_read_write_param_command_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Read_Write_Param_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_read_write_param_command_unpack(
    struct formula_main_dbc_mcu_read_write_param_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Read_Write_Param_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_read_write_param_command_init(struct formula_main_dbc_mcu_read_write_param_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_read_write_param_command_d1_parameter_address_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_command_d1_parameter_address_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_command_d1_parameter_address_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_read_write_param_command_d2_read_write_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_command_d2_read_write_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_command_d2_read_write_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_read_write_param_command_d3_data_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_read_write_param_command_d3_data_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_read_write_param_command_d3_data_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Command_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_command_message_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_command_message_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Command_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_command_message_unpack(
    struct formula_main_dbc_mcu_command_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Command_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_command_message_init(struct formula_main_dbc_mcu_command_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_command_message_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_command_message_speed_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_speed_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_speed_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_command_message_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_command_message_inverter_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_inverter_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_inverter_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_command_message_inverter_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_inverter_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_inverter_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_command_message_speed_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_speed_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_speed_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_command_message_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_command_message_torque_limit_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_command_message_torque_limit_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_command_message_torque_limit_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Fault_Codes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_fault_codes_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_fault_codes_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Fault_Codes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_fault_codes_unpack(
    struct formula_main_dbc_mcu_fault_codes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Fault_Codes.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_fault_codes_init(struct formula_main_dbc_mcu_fault_codes_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_fault_codes_d1_post_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fault_codes_d1_post_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fault_codes_d1_post_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_fault_codes_d2_post_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fault_codes_d2_post_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fault_codes_d2_post_fault_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_fault_codes_d3_run_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fault_codes_d3_run_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fault_codes_d3_run_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_fault_codes_d4_run_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fault_codes_d4_run_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fault_codes_d4_run_fault_hi_is_in_range(uint16_t value);

/**
 * Pack message MCU_Internal_States.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_internal_states_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_internal_states_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Internal_States.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_internal_states_unpack(
    struct formula_main_dbc_mcu_internal_states_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Internal_States.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_internal_states_init(struct formula_main_dbc_mcu_internal_states_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d1_vsm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d1_vsm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d1_vsm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d1_pwm_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d1_pwm_frequency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d1_pwm_frequency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d2_inverter_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d2_inverter_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d2_inverter_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_2_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_3_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_3_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_3_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_4_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_4_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_4_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_5_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_5_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_5_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d3_relay_6_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d3_relay_6_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d3_relay_6_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d4_inverter_run_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d4_inverter_run_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d4_inverter_run_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d4_inverter_discharge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d4_inverter_discharge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d4_inverter_discharge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d5_inverter_command_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d5_inverter_command_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d5_inverter_command_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d5_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d5_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d5_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d6_inverter_enable_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d6_inverter_enable_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d6_inverter_enable_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d6_start_mode_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d6_start_mode_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d6_start_mode_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d6_inverter_enable_lockout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d6_inverter_enable_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d6_inverter_enable_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d7_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d7_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d7_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d7_bms_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d7_bms_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d7_bms_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d7_bms_torque_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d7_bms_torque_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d7_bms_torque_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d7_max_speed_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d7_max_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d7_max_speed_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_internal_states_d7_low_speed_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_states_d7_low_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_states_d7_low_speed_limiting_is_in_range(uint8_t value);

/**
 * Pack message MCU_Internal_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_internal_voltages_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_internal_voltages_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Internal_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_internal_voltages_unpack(
    struct formula_main_dbc_mcu_internal_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Internal_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_internal_voltages_init(struct formula_main_dbc_mcu_internal_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_is_in_range(int16_t value);

/**
 * Pack message MCU_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_flux_id_iq_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_flux_id_iq_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_flux_id_iq_info_unpack(
    struct formula_main_dbc_mcu_flux_id_iq_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Flux_ID_IQ_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_flux_id_iq_info_init(struct formula_main_dbc_mcu_flux_id_iq_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_flux_id_iq_info_d1_flux_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_flux_id_iq_info_d1_flux_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_flux_id_iq_info_d1_flux_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_flux_id_iq_info_d2_flux_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_flux_id_iq_info_d2_flux_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_flux_id_iq_info_d2_flux_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_flux_id_iq_info_d3_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_flux_id_iq_info_d3_id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_flux_id_iq_info_d3_id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_flux_id_iq_info_d4_iq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_flux_id_iq_info_d4_iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_flux_id_iq_info_d4_iq_is_in_range(int16_t value);

/**
 * Pack message MCU_Voltage_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_voltage_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_voltage_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Voltage_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_voltage_info_unpack(
    struct formula_main_dbc_mcu_voltage_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Voltage_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_voltage_info_init(struct formula_main_dbc_mcu_voltage_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_voltage_info_d1_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_voltage_info_d1_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_voltage_info_d1_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_voltage_info_d2_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_voltage_info_d2_output_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_voltage_info_d2_output_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_voltage_info_d3_vab_vd_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_voltage_info_d3_vab_vd_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_voltage_info_d3_vab_vd_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_voltage_info_d4_vbc_vq_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_voltage_info_d4_vbc_vq_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_voltage_info_d4_vbc_vq_voltage_is_in_range(int16_t value);

/**
 * Pack message MCU_Current_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_current_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_current_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Current_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_current_info_unpack(
    struct formula_main_dbc_mcu_current_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Current_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_current_info_init(struct formula_main_dbc_mcu_current_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_current_info_d1_phase_a_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_current_info_d1_phase_a_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_current_info_d1_phase_a_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_current_info_d2_phase_b_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_current_info_d2_phase_b_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_current_info_d2_phase_b_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_current_info_d3_phase_c_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_current_info_d3_phase_c_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_current_info_d3_phase_c_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_current_info_d4_dc_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_current_info_d4_dc_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_current_info_d4_dc_bus_current_is_in_range(int16_t value);

/**
 * Pack message MCU_Motor_Position_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_motor_position_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_motor_position_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Motor_Position_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_motor_position_info_unpack(
    struct formula_main_dbc_mcu_motor_position_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Motor_Position_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_motor_position_info_init(struct formula_main_dbc_mcu_motor_position_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_motor_position_info_d1_motor_angle_electrical_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_motor_position_info_d1_motor_angle_electrical_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_motor_position_info_d1_motor_angle_electrical_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_motor_position_info_d2_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_motor_position_info_d2_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_motor_position_info_d2_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_motor_position_info_d3_electrical_output_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_motor_position_info_d3_electrical_output_frequency_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_motor_position_info_d3_electrical_output_frequency_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_is_in_range(int16_t value);

/**
 * Pack message MCU_Digital_Input_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_digital_input_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_digital_input_status_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Digital_Input_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_digital_input_status_unpack(
    struct formula_main_dbc_mcu_digital_input_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Digital_Input_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_digital_input_status_init(struct formula_main_dbc_mcu_digital_input_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d1_digital_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d1_digital_input_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d1_digital_input_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d2_digital_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d2_digital_input_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d2_digital_input_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d3_digital_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d3_digital_input_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d3_digital_input_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d4_digital_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d4_digital_input_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d4_digital_input_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d5_digital_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d5_digital_input_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d5_digital_input_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d6_digital_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d6_digital_input_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d6_digital_input_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d7_digital_input_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d7_digital_input_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d7_digital_input_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_digital_input_status_d8_digital_input_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_digital_input_status_d8_digital_input_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_digital_input_status_d8_digital_input_8_is_in_range(uint8_t value);

/**
 * Pack message MCU_Analog_Input_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_analog_input_voltages_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_analog_input_voltages_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Analog_Input_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_analog_input_voltages_unpack(
    struct formula_main_dbc_mcu_analog_input_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Analog_Input_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_analog_input_voltages_init(struct formula_main_dbc_mcu_analog_input_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d1_analog_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d1_analog_input_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d1_analog_input_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d2_analog_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d2_analog_input_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d2_analog_input_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d3_analog_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d3_analog_input_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d3_analog_input_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d4_analog_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d4_analog_input_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d4_analog_input_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d5_analog_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d5_analog_input_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d5_analog_input_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_analog_input_voltages_d6_analog_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_analog_input_voltages_d6_analog_input_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_analog_input_voltages_d6_analog_input_6_is_in_range(uint16_t value);

/**
 * Pack message MCU_Temperature_Set_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_3_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_temperature_set_3_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_3_unpack(
    struct formula_main_dbc_mcu_temperature_set_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Temperature_Set_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_temperature_set_3_init(struct formula_main_dbc_mcu_temperature_set_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_3_d1_rtd4_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_3_d1_rtd4_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_3_d1_rtd4_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_3_d2_rtd5_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_3_d2_rtd5_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_3_d2_rtd5_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_3_d3_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_3_d3_motor_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_3_d3_motor_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_3_d4_torque_shudder_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_3_d4_torque_shudder_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_3_d4_torque_shudder_is_in_range(int16_t value);

/**
 * Pack message MCU_Temperature_Set_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_2_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_temperature_set_2_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_2_unpack(
    struct formula_main_dbc_mcu_temperature_set_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Temperature_Set_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_temperature_set_2_init(struct formula_main_dbc_mcu_temperature_set_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_2_d1_control_board_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_2_d1_control_board_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_2_d1_control_board_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_2_d2_rtd1_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_2_d2_rtd1_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_2_d2_rtd1_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_2_d3_rtd2_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_2_d3_rtd2_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_2_d3_rtd2_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_2_d4_rtd3_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_2_d4_rtd3_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_2_d4_rtd3_temperature_is_in_range(int16_t value);

/**
 * Pack message MCU_Temperature_Set_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_1_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_temperature_set_1_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_temperature_set_1_unpack(
    struct formula_main_dbc_mcu_temperature_set_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Temperature_Set_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_temperature_set_1_init(struct formula_main_dbc_mcu_temperature_set_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_1_d1_module_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_1_d1_module_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_1_d1_module_a_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_1_d2_module_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_1_d2_module_b_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_1_d2_module_b_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_1_d3_module_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_1_d3_module_c_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_1_d3_module_c_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_temperature_set_1_d4_gate_driver_board_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_temperature_set_1_d4_gate_driver_board_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_temperature_set_1_d4_gate_driver_board_is_in_range(int16_t value);

/**
 * Pack message MCU_Firmware_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_firmware_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_firmware_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Firmware_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_firmware_info_unpack(
    struct formula_main_dbc_mcu_firmware_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Firmware_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_firmware_info_init(struct formula_main_dbc_mcu_firmware_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_firmware_info_d1_project_code_eep_ver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_firmware_info_d1_project_code_eep_ver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_firmware_info_d1_project_code_eep_ver_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_firmware_info_d2_sw_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_firmware_info_d2_sw_version_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_firmware_info_d2_sw_version_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_firmware_info_d3_date_code_mmdd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_firmware_info_d3_date_code_mmdd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_firmware_info_d3_date_code_mmdd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_mcu_firmware_info_d4_date_code_yyyy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_firmware_info_d4_date_code_yyyy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_firmware_info_d4_date_code_yyyy_is_in_range(uint16_t value);

/**
 * Pack message MCU_Diag_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_diag_data_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_diag_data_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Diag_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_diag_data_unpack(
    struct formula_main_dbc_mcu_diag_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Diag_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_diag_data_init(struct formula_main_dbc_mcu_diag_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_diag_data_d1_buffer_record_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_diag_data_d1_buffer_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_diag_data_d1_buffer_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_diag_data_d2_buffer_segment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_diag_data_d2_buffer_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_diag_data_d2_buffer_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_diag_data_d3_diag_data_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_diag_data_d3_diag_data_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_diag_data_d3_diag_data_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_diag_data_d4_diag_data_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_diag_data_d4_diag_data_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_diag_data_d4_diag_data_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_diag_data_d5_diag_data_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_diag_data_d5_diag_data_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_diag_data_d5_diag_data_3_is_in_range(int16_t value);

/**
 * Pack message MCU_U2C_Command_Txd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_u2_c_command_txd_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_u2_c_command_txd_t *src_p,
    size_t size);

/**
 * Unpack message MCU_U2C_Command_Txd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_u2_c_command_txd_unpack(
    struct formula_main_dbc_mcu_u2_c_command_txd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_U2C_Command_Txd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_u2_c_command_txd_init(struct formula_main_dbc_mcu_u2_c_command_txd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_command_txd_d1_id_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_command_txd_d1_id_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_command_txd_d1_id_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_is_in_range(uint8_t value);

/**
 * Pack message MCU_U2C_Message_Rxd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_u2_c_message_rxd_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_u2_c_message_rxd_t *src_p,
    size_t size);

/**
 * Unpack message MCU_U2C_Message_Rxd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_u2_c_message_rxd_unpack(
    struct formula_main_dbc_mcu_u2_c_message_rxd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_U2C_Message_Rxd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_u2_c_message_rxd_init(struct formula_main_dbc_mcu_u2_c_message_rxd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d4_dtc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d4_dtc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d4_dtc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d5_dtc_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d5_dtc_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d5_dtc_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current_Limit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_current_limit_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_current_limit_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current_Limit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_current_limit_unpack(
    struct formula_main_dbc_bms_current_limit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Current_Limit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_current_limit_init(struct formula_main_dbc_bms_current_limit_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_current_limit_d1_max_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_current_limit_d1_max_discharge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_current_limit_d1_max_discharge_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_current_limit_d2_max_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_current_limit_d2_max_charge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_current_limit_d2_max_charge_current_is_in_range(uint16_t value);

/**
 * Pack message MCU_Fast_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_mcu_fast_info_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_mcu_fast_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Fast_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_mcu_fast_info_unpack(
    struct formula_main_dbc_mcu_fast_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_Fast_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_mcu_fast_info_init(struct formula_main_dbc_mcu_fast_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_fast_info_fast_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fast_info_fast_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fast_info_fast_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_fast_info_fast_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fast_info_fast_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fast_info_fast_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_fast_info_fast_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fast_info_fast_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fast_info_fast_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_mcu_fast_info_fast_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_mcu_fast_info_fast_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_mcu_fast_info_fast_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Pack message BMS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_status_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_status_unpack(
    struct formula_main_dbc_bms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_status_init(struct formula_main_dbc_bms_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_status_bms_status_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_status_bms_status_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_status_bms_status_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_status_bms_status_soc_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_status_bms_status_soc_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_status_bms_status_soc_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_status_bms_status_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_status_bms_status_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_status_bms_status_charge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_status_bms_status_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_status_bms_status_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_status_bms_status_pack_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMS_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_fault_vector_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_fault_vector_unpack(
    struct formula_main_dbc_bms_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_FaultVector.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_fault_vector_init(struct formula_main_dbc_bms_fault_vector_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_is_in_range(uint8_t value);

/**
 * Pack message BMS_FaultAlert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_fault_alert_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_fault_alert_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultAlert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_fault_alert_unpack(
    struct formula_main_dbc_bms_fault_alert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_FaultAlert.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_fault_alert_init(struct formula_main_dbc_bms_fault_alert_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t formula_main_dbc_bms_fault_alert_bms_fault_alert_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_current_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_is_in_range(uint8_t value);

/**
 * Pack message BMS_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_voltages_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_voltages_unpack(
    struct formula_main_dbc_bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_voltages_init(struct formula_main_dbc_bms_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_voltages_bms_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg1_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg1_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg1_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg2_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg2_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg2_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg3_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg3_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg3_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_voltages_bms_voltages_seg4_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_voltages_bms_voltages_seg4_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_voltages_bms_voltages_seg4_cell15_is_in_range(uint16_t value);

/**
 * Pack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_thermistor_voltages_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_thermistor_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_thermistor_voltages_unpack(
    struct formula_main_dbc_bms_thermistor_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_ThermistorVoltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_thermistor_voltages_init(struct formula_main_dbc_bms_thermistor_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg1_tm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg2_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg3_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_seg4_tm6_is_in_range(uint16_t value);

/**
 * Pack message BMS_Temperatures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_temperatures_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_temperatures_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Temperatures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_temperatures_unpack(
    struct formula_main_dbc_bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Temperatures.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_temperatures_init(struct formula_main_dbc_bms_temperatures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_temperatures_bms_temperatures_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg1_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg1_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg1_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg2_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg2_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg2_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg3_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg3_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg3_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_main_dbc_bms_temperatures_bms_temperatures_seg4_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_temperatures_bms_temperatures_seg4_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_temperatures_bms_temperatures_seg4_4_is_in_range(int8_t value);

/**
 * Pack message BMS_DrainStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_drain_status_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_drain_status_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DrainStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_drain_status_unpack(
    struct formula_main_dbc_bms_drain_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_DrainStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_drain_status_init(struct formula_main_dbc_bms_drain_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg1_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg2_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg3_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_drain_status_bms_drain_status_seg4_cell6_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_current_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_current_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_current_unpack(
    struct formula_main_dbc_bms_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_current_init(struct formula_main_dbc_bms_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t formula_main_dbc_bms_current_bms_inst_current_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_current_bms_inst_current_filt_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_current_bms_inst_current_filt_is_in_range(int32_t value);

/**
 * Pack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_hard_fault_indicator_unpack(
    struct formula_main_dbc_bms_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_HardFaultIndicator.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_hard_fault_indicator_init(struct formula_main_dbc_bms_hard_fault_indicator_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message BMS_Ref.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_ref_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_ref_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Ref.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_ref_unpack(
    struct formula_main_dbc_bms_ref_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Ref.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_ref_init(struct formula_main_dbc_bms_ref_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_ref_bms_ref_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_ref_bms_ref_ref11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_ref_bms_ref_ref11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_ref_bms_ref_ref11_is_in_range(uint16_t value);

/**
 * Pack message BMS_LimpMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_limp_mode_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_limp_mode_t *src_p,
    size_t size);

/**
 * Unpack message BMS_LimpMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_limp_mode_unpack(
    struct formula_main_dbc_bms_limp_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_LimpMode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_limp_mode_init(struct formula_main_dbc_bms_limp_mode_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_is_in_range(int16_t value);

/**
 * Pack message BMS_ChargeRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_bms_charge_request_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_bms_charge_request_t *src_p,
    size_t size);

/**
 * Unpack message BMS_ChargeRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_bms_charge_request_unpack(
    struct formula_main_dbc_bms_charge_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_ChargeRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_bms_charge_request_init(struct formula_main_dbc_bms_charge_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_charge_request_bms_charge_request_max_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_charge_request_bms_charge_request_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_charge_request_bms_charge_request_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_bms_charge_request_bms_charge_request_max_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_charge_request_bms_charge_request_max_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_charge_request_bms_charge_request_max_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_bms_charge_request_bms_charge_request_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_bms_charge_request_bms_charge_request_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_bms_charge_request_bms_charge_request_control_is_in_range(uint8_t value);

/**
 * Pack message CHG_ChargeStats.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_main_dbc_chg_charge_stats_pack(
    uint8_t *dst_p,
    const struct formula_main_dbc_chg_charge_stats_t *src_p,
    size_t size);

/**
 * Unpack message CHG_ChargeStats.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_main_dbc_chg_charge_stats_unpack(
    struct formula_main_dbc_chg_charge_stats_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CHG_ChargeStats.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int formula_main_dbc_chg_charge_stats_init(struct formula_main_dbc_chg_charge_stats_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_chg_charge_stats_chg_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_output_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_output_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_main_dbc_chg_charge_stats_chg_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_output_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_chg_charge_stats_chg_flag_hardware_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_flag_hardware_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_flag_hardware_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_chg_charge_stats_chg_flag_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_flag_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_flag_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_chg_charge_stats_chg_flag_input_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_flag_input_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_flag_input_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_chg_charge_stats_chg_flag_starting_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_flag_starting_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_flag_starting_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_main_dbc_chg_charge_stats_chg_flag_comm_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_main_dbc_chg_charge_stats_chg_flag_comm_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_main_dbc_chg_charge_stats_chg_flag_comm_timeout_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
