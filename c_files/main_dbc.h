/**
 * @file main_dbc.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Wed Feb 12 09:28:39 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef MAIN_DBC_H
#define MAIN_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MAIN_DBC_BMS_CELL_OVERVIEW_FRAME_ID (0x259u)
#define MAIN_DBC_C70_BRAKE_PRESSURES_FRAME_ID (0x6ffu)
#define MAIN_DBC_C70_TIRE_TEMPS_FRAME_ID (0x752u)
#define MAIN_DBC_C70_ROTOR_TEMPS_FRAME_ID (0x753u)
#define MAIN_DBC_VC_STATUS_FRAME_ID (0x12du)
#define MAIN_DBC_VC_PEDAL_INPUTS_FRAME_ID (0x12eu)
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_FRAME_ID (0x12fu)
#define MAIN_DBC_VC_DASH_INPUTS_FRAME_ID (0x130u)
#define MAIN_DBC_VC_SHUTDOWN_STATUS_FRAME_ID (0x131u)
#define MAIN_DBC_VC_FAULT_VECTOR_FRAME_ID (0x137u)
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_FRAME_ID (0x13bu)
#define MAIN_DBC_VC_RTDS_REQUEST_FRAME_ID (0x13cu)
#define MAIN_DBC_PBX_STATUS_FRAME_ID (0x700u)
#define MAIN_DBC_BMS_CURRENT_LIMIT_FRAME_ID (0x202u)
#define MAIN_DBC_BMS_STATUS_FRAME_ID (0x258u)
#define MAIN_DBC_BMS_FAULT_VECTOR_FRAME_ID (0x2bcu)
#define MAIN_DBC_BMS_FAULT_ALERT_FRAME_ID (0x2bdu)
#define MAIN_DBC_BMS_VOLTAGES_FRAME_ID (0x2beu)
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_FRAME_ID (0x2bfu)
#define MAIN_DBC_BMS_TEMPERATURES_FRAME_ID (0x2c0u)
#define MAIN_DBC_BMS_DRAIN_STATUS_FRAME_ID (0x320u)
#define MAIN_DBC_BMS_CURRENT_FRAME_ID (0x384u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_FRAME_ID (0x3b6u)
#define MAIN_DBC_BMS_REF_FRAME_ID (0x3b7u)
#define MAIN_DBC_BMS_LIMP_MODE_FRAME_ID (0x385u)
#define MAIN_DBC_CHG_CHARGE_REQUEST_FRAME_ID (0x1806e5f4u)
#define MAIN_DBC_CHG_CHARGE_STATS_FRAME_ID (0x18ff50e5u)
#define MAIN_DBC_SSDB_FRONT_FRAME_ID (0x1f8u)
#define MAIN_DBC_SSDB_VECTOR_NAV6_FRAME_ID (0x1f9u)
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_FRAME_ID (0x190u)
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_FRAME_ID (0x191u)
#define MAIN_DBC_VC_RL_INFO_1_FRAME_ID (0x192u)
#define MAIN_DBC_VC_RL_INFO_2_FRAME_ID (0x193u)
#define MAIN_DBC_VC_RL_INFO_3_FRAME_ID (0x194u)
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_FRAME_ID (0x19au)
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_FRAME_ID (0x19bu)
#define MAIN_DBC_VC_RR_INFO_1_FRAME_ID (0x19cu)
#define MAIN_DBC_VC_RR_INFO_2_FRAME_ID (0x19du)
#define MAIN_DBC_VC_RR_INFO_3_FRAME_ID (0x19eu)
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_FRAME_ID (0x1a4u)
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_FRAME_ID (0x1a5u)
#define MAIN_DBC_VC_FL_INFO_1_FRAME_ID (0x1a6u)
#define MAIN_DBC_VC_FL_INFO_2_FRAME_ID (0x1a7u)
#define MAIN_DBC_VC_FL_INFO_3_FRAME_ID (0x1a8u)
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_FRAME_ID (0x1aeu)
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_FRAME_ID (0x1afu)
#define MAIN_DBC_VC_FR_INFO_1_FRAME_ID (0x1b0u)
#define MAIN_DBC_VC_FR_INFO_2_FRAME_ID (0x1b1u)
#define MAIN_DBC_VC_FR_INFO_3_FRAME_ID (0x1b2u)

/* Frame lengths in bytes. */
#define MAIN_DBC_BMS_CELL_OVERVIEW_LENGTH (8u)
#define MAIN_DBC_C70_BRAKE_PRESSURES_LENGTH (8u)
#define MAIN_DBC_C70_TIRE_TEMPS_LENGTH (8u)
#define MAIN_DBC_C70_ROTOR_TEMPS_LENGTH (8u)
#define MAIN_DBC_VC_STATUS_LENGTH (8u)
#define MAIN_DBC_VC_PEDAL_INPUTS_LENGTH (8u)
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_LENGTH (8u)
#define MAIN_DBC_VC_DASH_INPUTS_LENGTH (8u)
#define MAIN_DBC_VC_SHUTDOWN_STATUS_LENGTH (8u)
#define MAIN_DBC_VC_FAULT_VECTOR_LENGTH (8u)
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_LENGTH (8u)
#define MAIN_DBC_VC_RTDS_REQUEST_LENGTH (8u)
#define MAIN_DBC_PBX_STATUS_LENGTH (8u)
#define MAIN_DBC_BMS_CURRENT_LIMIT_LENGTH (8u)
#define MAIN_DBC_BMS_STATUS_LENGTH (8u)
#define MAIN_DBC_BMS_FAULT_VECTOR_LENGTH (8u)
#define MAIN_DBC_BMS_FAULT_ALERT_LENGTH (8u)
#define MAIN_DBC_BMS_VOLTAGES_LENGTH (8u)
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_LENGTH (8u)
#define MAIN_DBC_BMS_TEMPERATURES_LENGTH (8u)
#define MAIN_DBC_BMS_DRAIN_STATUS_LENGTH (8u)
#define MAIN_DBC_BMS_CURRENT_LENGTH (8u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_LENGTH (8u)
#define MAIN_DBC_BMS_REF_LENGTH (8u)
#define MAIN_DBC_BMS_LIMP_MODE_LENGTH (8u)
#define MAIN_DBC_CHG_CHARGE_REQUEST_LENGTH (8u)
#define MAIN_DBC_CHG_CHARGE_STATS_LENGTH (8u)
#define MAIN_DBC_SSDB_FRONT_LENGTH (3u)
#define MAIN_DBC_SSDB_VECTOR_NAV6_LENGTH (8u)
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_LENGTH (8u)
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_LENGTH (8u)
#define MAIN_DBC_VC_RL_INFO_1_LENGTH (8u)
#define MAIN_DBC_VC_RL_INFO_2_LENGTH (8u)
#define MAIN_DBC_VC_RL_INFO_3_LENGTH (8u)
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_LENGTH (8u)
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_LENGTH (8u)
#define MAIN_DBC_VC_RR_INFO_1_LENGTH (8u)
#define MAIN_DBC_VC_RR_INFO_2_LENGTH (8u)
#define MAIN_DBC_VC_RR_INFO_3_LENGTH (8u)
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_LENGTH (8u)
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_LENGTH (8u)
#define MAIN_DBC_VC_FL_INFO_1_LENGTH (8u)
#define MAIN_DBC_VC_FL_INFO_2_LENGTH (8u)
#define MAIN_DBC_VC_FL_INFO_3_LENGTH (8u)
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_LENGTH (8u)
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_LENGTH (8u)
#define MAIN_DBC_VC_FR_INFO_1_LENGTH (8u)
#define MAIN_DBC_VC_FR_INFO_2_LENGTH (8u)
#define MAIN_DBC_VC_FR_INFO_3_LENGTH (8u)

/* Extended or standard frame types. */
#define MAIN_DBC_BMS_CELL_OVERVIEW_IS_EXTENDED (0)
#define MAIN_DBC_C70_BRAKE_PRESSURES_IS_EXTENDED (0)
#define MAIN_DBC_C70_TIRE_TEMPS_IS_EXTENDED (0)
#define MAIN_DBC_C70_ROTOR_TEMPS_IS_EXTENDED (0)
#define MAIN_DBC_VC_STATUS_IS_EXTENDED (0)
#define MAIN_DBC_VC_PEDAL_INPUTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_IS_EXTENDED (0)
#define MAIN_DBC_VC_DASH_INPUTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define MAIN_DBC_VC_FAULT_VECTOR_IS_EXTENDED (0)
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define MAIN_DBC_VC_RTDS_REQUEST_IS_EXTENDED (0)
#define MAIN_DBC_PBX_STATUS_IS_EXTENDED (0)
#define MAIN_DBC_BMS_CURRENT_LIMIT_IS_EXTENDED (0)
#define MAIN_DBC_BMS_STATUS_IS_EXTENDED (0)
#define MAIN_DBC_BMS_FAULT_VECTOR_IS_EXTENDED (0)
#define MAIN_DBC_BMS_FAULT_ALERT_IS_EXTENDED (0)
#define MAIN_DBC_BMS_VOLTAGES_IS_EXTENDED (0)
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_IS_EXTENDED (0)
#define MAIN_DBC_BMS_TEMPERATURES_IS_EXTENDED (0)
#define MAIN_DBC_BMS_DRAIN_STATUS_IS_EXTENDED (0)
#define MAIN_DBC_BMS_CURRENT_IS_EXTENDED (0)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define MAIN_DBC_BMS_REF_IS_EXTENDED (0)
#define MAIN_DBC_BMS_LIMP_MODE_IS_EXTENDED (0)
#define MAIN_DBC_CHG_CHARGE_REQUEST_IS_EXTENDED (1)
#define MAIN_DBC_CHG_CHARGE_STATS_IS_EXTENDED (1)
#define MAIN_DBC_SSDB_FRONT_IS_EXTENDED (0)
#define MAIN_DBC_SSDB_VECTOR_NAV6_IS_EXTENDED (0)
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_RL_INFO_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_RL_INFO_2_IS_EXTENDED (0)
#define MAIN_DBC_VC_RL_INFO_3_IS_EXTENDED (0)
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_RR_INFO_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_RR_INFO_2_IS_EXTENDED (0)
#define MAIN_DBC_VC_RR_INFO_3_IS_EXTENDED (0)
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_FL_INFO_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_FL_INFO_2_IS_EXTENDED (0)
#define MAIN_DBC_VC_FL_INFO_3_IS_EXTENDED (0)
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_IS_EXTENDED (0)
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_FR_INFO_1_IS_EXTENDED (0)
#define MAIN_DBC_VC_FR_INFO_2_IS_EXTENDED (0)
#define MAIN_DBC_VC_FR_INFO_3_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_NOT_READY_CHOICE (0u)
#define MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_STARTUP_CHOICE (1u)
#define MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_READY_TO_DRIVE_CHOICE (2u)
#define MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_FAULTED_CHOICE (3u)

#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_TASK_100_HZ_CHOICE (1u)

#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_DISCONNECTED_CHOICE (0u)
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_CHARGING_CHOICE (1u)
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCING_CHOICE (2u)
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCE_SENSING_CHOICE (3u)
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_COMPLETE_CHOICE (4u)
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_FAULTED_CHOICE (5u)

#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_CELLS_CHOICE (0u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_TEMPS_CHOICE (1u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_DRAIN_REQUEST_CHOICE (2u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CURRENT_SENSOR_COMM_CHOICE (3u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_CURRENT_CHOICE (4u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_IRRATIONAL_CHOICE (5u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_DIFF_CHOICE (6u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULTCODE_OUT_OF_JUICE_CHOICE (7u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_TEMPERATURE_IRRATIONAL_CHOICE (8u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_TEMP_CHOICE (9u)
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_DRAIN_FAILURE_CHOICE (10u)

#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1_HZ_CHOICE (1u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_10_HZ_CHOICE (2u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1K_HZ_CHOICE (3u)
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_CAN_RX_TASK_CHOICE (4u)

#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_NO_LIMP_CHOICE (0u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_1_CHOICE (1u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_2_CHOICE (2u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_3_CHOICE (3u)

#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_NO_LIMP_CHOICE (0u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_1_CHOICE (1u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_2_CHOICE (2u)
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_LIMP_MODE_LEVEL_LEVEL_3_CHOICE (3u)

/* Frame Names. */
#define MAIN_DBC_BMS_CELL_OVERVIEW_NAME "BMS_CellOverview"
#define MAIN_DBC_C70_BRAKE_PRESSURES_NAME "C70_BrakePressures"
#define MAIN_DBC_C70_TIRE_TEMPS_NAME "C70_TireTemps"
#define MAIN_DBC_C70_ROTOR_TEMPS_NAME "C70_RotorTemps"
#define MAIN_DBC_VC_STATUS_NAME "VC_Status"
#define MAIN_DBC_VC_PEDAL_INPUTS_NAME "VC_PedalInputs"
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_NAME "VC_PedalInputsRaw"
#define MAIN_DBC_VC_DASH_INPUTS_NAME "VC_DashInputs"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_NAME "VC_ShutdownStatus"
#define MAIN_DBC_VC_FAULT_VECTOR_NAME "VC_FaultVector"
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_NAME "VC_HardFaultIndicator"
#define MAIN_DBC_VC_RTDS_REQUEST_NAME "VC_RTDSRequest"
#define MAIN_DBC_PBX_STATUS_NAME "PBX_Status"
#define MAIN_DBC_BMS_CURRENT_LIMIT_NAME "BMS_Current_Limit"
#define MAIN_DBC_BMS_STATUS_NAME "BMS_Status"
#define MAIN_DBC_BMS_FAULT_VECTOR_NAME "BMS_FaultVector"
#define MAIN_DBC_BMS_FAULT_ALERT_NAME "BMS_FaultAlert"
#define MAIN_DBC_BMS_VOLTAGES_NAME "BMS_Voltages"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_NAME "BMS_ThermistorVoltages"
#define MAIN_DBC_BMS_TEMPERATURES_NAME "BMS_Temperatures"
#define MAIN_DBC_BMS_DRAIN_STATUS_NAME "BMS_DrainStatus"
#define MAIN_DBC_BMS_CURRENT_NAME "BMS_Current"
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_NAME "BMS_HardFaultIndicator"
#define MAIN_DBC_BMS_REF_NAME "BMS_Ref"
#define MAIN_DBC_BMS_LIMP_MODE_NAME "BMS_LimpMode"
#define MAIN_DBC_CHG_CHARGE_REQUEST_NAME "CHG_ChargeRequest"
#define MAIN_DBC_CHG_CHARGE_STATS_NAME "CHG_ChargeStats"
#define MAIN_DBC_SSDB_FRONT_NAME "SSDB_front"
#define MAIN_DBC_SSDB_VECTOR_NAV6_NAME "SSDB_VectorNav6"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_NAME "VC_RL_AMK_Setpoints"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_NAME "VC_RL_AMK_Actual_1"
#define MAIN_DBC_VC_RL_INFO_1_NAME "VC_RL_Info_1"
#define MAIN_DBC_VC_RL_INFO_2_NAME "VC_RL_Info_2"
#define MAIN_DBC_VC_RL_INFO_3_NAME "VC_RL_Info_3"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_NAME "VC_RR_AMK_Setpoints"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_NAME "VC_RR_AMK_Actual_1"
#define MAIN_DBC_VC_RR_INFO_1_NAME "VC_RR_Info_1"
#define MAIN_DBC_VC_RR_INFO_2_NAME "VC_RR_Info_2"
#define MAIN_DBC_VC_RR_INFO_3_NAME "VC_RR_Info_3"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_NAME "VC_FL_AMK_Setpoints"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_NAME "VC_FL_AMK_Actual_1"
#define MAIN_DBC_VC_FL_INFO_1_NAME "VC_Fl_Info_1"
#define MAIN_DBC_VC_FL_INFO_2_NAME "VC_FL_Info_2"
#define MAIN_DBC_VC_FL_INFO_3_NAME "VC_FL_Info_3"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_NAME "VC_FR_AMK_Setpoints"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_NAME "VC_FR_AMK_Actual_1"
#define MAIN_DBC_VC_FR_INFO_1_NAME "VC_FR_Info_1"
#define MAIN_DBC_VC_FR_INFO_2_NAME "VC_FR_Info_2"
#define MAIN_DBC_VC_FR_INFO_3_NAME "VC_FR_Info_3"

/* Signal Names. */
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_MIN_NAME "BMS_Overview_TempMin"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_MAX_NAME "BMS_Overview_TempMax"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_TEMP_AVG_NAME "BMS_Overview_TempAvg"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_MIN_NAME "BMS_Overview_VoltMin"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_MAX_NAME "BMS_Overview_VoltMax"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_VOLT_AVG_NAME "BMS_Overview_VoltAvg"
#define MAIN_DBC_BMS_CELL_OVERVIEW_BMS_OVERVIEW_DRAINS_NAME "BMS_Overview_Drains"
#define MAIN_DBC_C70_BRAKE_PRESSURES_C70_BRAKE_PRESSURE_FRONT_NAME "C70_BrakePressureFront"
#define MAIN_DBC_C70_BRAKE_PRESSURES_C70_BRAKE_PRESSURE_REAR_NAME "C70_BrakePressureRear"
#define MAIN_DBC_C70_TIRE_TEMPS_TIRE_TEMP_FL_MAX_NAME "TireTemp_FL_Max"
#define MAIN_DBC_C70_TIRE_TEMPS_TIRE_TEMP_FR_MAX_NAME "TireTemp_FR_Max"
#define MAIN_DBC_C70_TIRE_TEMPS_TIRE_TEMP_RL_MAX_NAME "TireTemp_RL_Max"
#define MAIN_DBC_C70_TIRE_TEMPS_TIRE_TEMP_RR_MAX_NAME "TireTemp_RR_Max"
#define MAIN_DBC_C70_ROTOR_TEMPS_ROTOR_TEMP_FL_MAX_NAME "RotorTemp_FL_Max"
#define MAIN_DBC_C70_ROTOR_TEMPS_ROTOR_TEMP_FR_MAX_NAME "RotorTemp_FR_Max"
#define MAIN_DBC_C70_ROTOR_TEMPS_ROTOR_TEMP_RL_MAX_NAME "RotorTemp_RL_Max"
#define MAIN_DBC_C70_ROTOR_TEMPS_ROTOR_TEMP_RR_MAX_NAME "RotorTemp_RR_Max"
#define MAIN_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_NAME "VC_Status_VehicleState"
#define MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_BRAKE_PRESSURE_FRONT_PSI_NAME "VC_PedalInputs_BrakePressureFrontPsi"
#define MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_A_NAME "VC_PedalInputs_AccelPositionA"
#define MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_B_NAME "VC_PedalInputs_AccelPositionB"
#define MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_ACCEL_POSITION_AVG_NAME "VC_PedalInputs_AccelPositionAvg"
#define MAIN_DBC_VC_PEDAL_INPUTS_VC_PEDAL_INPUTS_BRAKE_PRESSURE_REAR_PSI_NAME "VC_PedalInputs_BrakePressureRearPsi"
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_ACCEL_A_ADC_NAME "VC_PedalInputsRaw_AccelA_ADC"
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_ACCEL_B_ADC_NAME "VC_PedalInputsRaw_AccelB_ADC"
#define MAIN_DBC_VC_PEDAL_INPUTS_RAW_VC_PEDAL_INPUTS_RAW_BRAKE_PRESSURE_REAR_ADC_NAME "VC_PedalInputsRaw_BrakePressureRear_ADC"
#define MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_RT_DBUTTON_NAME "VC_DashInputs_RTDbutton"
#define MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH0_NAME "VC_DashInputs_Switch0"
#define MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH1_NAME "VC_DashInputs_Switch1"
#define MAIN_DBC_VC_DASH_INPUTS_VC_DASH_INPUTS_SWITCH2_NAME "VC_DashInputs_Switch2"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BMS_FAULT_NAME "VC_ShutdownStatus_BMS_fault"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_IMD_FAULT_NAME "VC_ShutdownStatus_IMD_fault"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BSPD_FAULT_NAME "VC_ShutdownStatus_BSPD_fault"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_BSPD_SIGNAL_LOST_NAME "VC_ShutdownStatus_BSPD_signal_lost"
#define MAIN_DBC_VC_SHUTDOWN_STATUS_VC_SHUTDOWN_STATUS_PRECHARGE_NAME "VC_ShutdownStatus_precharge"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_BRAKE_IRRA_NAME "VC_FaultVector_BRAKE_IRRA"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_ACCEL_A_IRRA_NAME "VC_FaultVector_ACCEL_A_IRRA"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_ACCEL_B_IRRA_NAME "VC_FaultVector_ACCEL_B_IRRA"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_APPS_DISAG_NAME "VC_FaultVector_APPS_DISAG"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_APPS_DOUBLE_PEDAL_NAME "VC_FaultVector_APPS_DOUBLE_PEDAL"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_STEER_ANGLE_LOST_NAME "VC_FaultVector_STEER_ANGLE_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_RL_LOST_NAME "VC_FaultVector_RL_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_RR_LOST_NAME "VC_FaultVector_RR_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_FL_LOST_NAME "VC_FaultVector_FL_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_FR_LOST_NAME "VC_FaultVector_FR_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_VN_LOST_NAME "VC_FaultVector_VN_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_FBPS_LOST_NAME "VC_FaultVector_FBPS_LOST"
#define MAIN_DBC_VC_FAULT_VECTOR_VC_FAULT_VECTOR_RBPS_LOST_NAME "VC_FaultVector_RBPS_LOST"
#define MAIN_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_NAME "VC_HardFaultIndicator_task"
#define MAIN_DBC_VC_RTDS_REQUEST_VC_REQUEST_RTDS_NAME "VC_RequestRTDS"
#define MAIN_DBC_PBX_STATUS_PBX_LV_VOLTAGE_NAME "PBX_LV_Voltage"
#define MAIN_DBC_PBX_STATUS_PBX_LV_CURRENT_NAME "PBX_LV_Current"
#define MAIN_DBC_PBX_STATUS_PBX_PUMPS_ON_NAME "PBX_PumpsOn"
#define MAIN_DBC_BMS_CURRENT_LIMIT_D1_MAX_DISCHARGE_CURRENT_NAME "D1_Max_Discharge_Current"
#define MAIN_DBC_BMS_CURRENT_LIMIT_D2_MAX_CHARGE_CURRENT_NAME "D2_Max_Charge_Current"
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_SOC_NAME "BMS_Status_SOC"
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_SOC_RAW_NAME "BMS_Status_SOC_raw"
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_NAME "BMS_Status_ChargeState"
#define MAIN_DBC_BMS_STATUS_BMS_STATUS_PACK_VOLTAGE_NAME "BMS_Status_PackVoltage"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_CELLS_NAME "BMS_FaultVector_SLAVE_COMM_CELLS"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_TEMPS_NAME "BMS_FaultVector_SLAVE_COMM_TEMPS"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_SLAVE_COMM_DRAIN_REQUEST_NAME "BMS_FaultVector_SLAVE_COMM_DRAIN_REQUEST"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CURRENT_SENSOR_COMM_NAME "BMS_FaultVector_CURRENT_SENSOR_COMM"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OVER_CURRENT_NAME "BMS_FaultVector_OVER_CURRENT"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CELL_VOLTAGE_IRRATIONAL_NAME "BMS_FaultVector_CELL_VOLTAGE_IRRATIONAL"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_CELL_VOLTAGE_DIFF_NAME "BMS_FaultVector_CELL_VOLTAGE_DIFF"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OUT_OF_JUICE_NAME "BMS_FaultVector_OUT_OF_JUICE"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_TEMPERATURE_IRRATIONAL_NAME "BMS_FaultVector_TEMPERATURE_IRRATIONAL"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_OVER_TEMPERATURE_NAME "BMS_FaultVector_OVER_TEMPERATURE"
#define MAIN_DBC_BMS_FAULT_VECTOR_BMS_FAULT_VECTOR_DRAIN_FAILURE_NAME "BMS_FaultVector_DRAIN_FAILURE"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_NAME "BMS_FaultAlert_code"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CELL_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_cell_comm_slave_board_num"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_TEMP_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_temp_comm_slave_board_num"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_DRAIN_COMM_SLAVE_BOARD_NUM_NAME "BMS_FaultAlert_drain_comm_slave_board_num"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_ADC_ERROR_CODE_NAME "BMS_FaultAlert_adc_error_code"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CURRENT_NAME "BMS_FaultAlert_current"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_IRRATIONAL_VOLTAGE_NAME "BMS_FaultAlert_irrational_voltage"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_VOLTAGE_DIFF_NAME "BMS_FaultAlert_voltage_diff"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_LOWEST_CELL_VOLTAGE_NAME "BMS_FaultAlert_lowest_cell_voltage"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_IRRATIONAL_TEMPERATURE_NAME "BMS_FaultAlert_irrational_temperature"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_OVER_TEMPERATURE_NAME "BMS_FaultAlert_over_temperature"
#define MAIN_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_FAILED_DRAIN_CELL_NAME "BMS_FaultAlert_failed_drain_cell"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_MUX_NAME "BMS_Voltages_mux"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A1_NAME "BMS_Voltages_A1"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A7_NAME "BMS_Voltages_A7"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A13_NAME "BMS_Voltages_A13"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A19_NAME "BMS_Voltages_A19"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B6_NAME "BMS_Voltages_B6"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B12_NAME "BMS_Voltages_B12"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B18_NAME "BMS_Voltages_B18"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C5_NAME "BMS_Voltages_C5"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C11_NAME "BMS_Voltages_C11"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C17_NAME "BMS_Voltages_C17"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D4_NAME "BMS_Voltages_D4"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D10_NAME "BMS_Voltages_D10"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D16_NAME "BMS_Voltages_D16"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A2_NAME "BMS_Voltages_A2"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A8_NAME "BMS_Voltages_A8"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A14_NAME "BMS_Voltages_A14"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B1_NAME "BMS_Voltages_B1"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B7_NAME "BMS_Voltages_B7"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B13_NAME "BMS_Voltages_B13"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B19_NAME "BMS_Voltages_B19"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C6_NAME "BMS_Voltages_C6"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C12_NAME "BMS_Voltages_C12"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C18_NAME "BMS_Voltages_C18"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D5_NAME "BMS_Voltages_D5"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D11_NAME "BMS_Voltages_D11"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D17_NAME "BMS_Voltages_D17"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A3_NAME "BMS_Voltages_A3"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A9_NAME "BMS_Voltages_A9"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A15_NAME "BMS_Voltages_A15"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B2_NAME "BMS_Voltages_B2"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B8_NAME "BMS_Voltages_B8"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B14_NAME "BMS_Voltages_B14"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C1_NAME "BMS_Voltages_C1"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C7_NAME "BMS_Voltages_C7"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C13_NAME "BMS_Voltages_C13"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C19_NAME "BMS_Voltages_C19"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D6_NAME "BMS_Voltages_D6"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D12_NAME "BMS_Voltages_D12"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D18_NAME "BMS_Voltages_D18"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A4_NAME "BMS_Voltages_A4"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A10_NAME "BMS_Voltages_A10"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A16_NAME "BMS_Voltages_A16"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B3_NAME "BMS_Voltages_B3"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B9_NAME "BMS_Voltages_B9"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B15_NAME "BMS_Voltages_B15"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C2_NAME "BMS_Voltages_C2"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C8_NAME "BMS_Voltages_C8"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C14_NAME "BMS_Voltages_C14"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D1_NAME "BMS_Voltages_D1"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D7_NAME "BMS_Voltages_D7"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D13_NAME "BMS_Voltages_D13"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D19_NAME "BMS_Voltages_D19"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A5_NAME "BMS_Voltages_A5"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A11_NAME "BMS_Voltages_A11"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A17_NAME "BMS_Voltages_A17"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B4_NAME "BMS_Voltages_B4"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B10_NAME "BMS_Voltages_B10"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B16_NAME "BMS_Voltages_B16"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C3_NAME "BMS_Voltages_C3"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C9_NAME "BMS_Voltages_C9"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C15_NAME "BMS_Voltages_C15"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D2_NAME "BMS_Voltages_D2"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D8_NAME "BMS_Voltages_D8"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D14_NAME "BMS_Voltages_D14"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A6_NAME "BMS_Voltages_A6"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A12_NAME "BMS_Voltages_A12"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_A18_NAME "BMS_Voltages_A18"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B5_NAME "BMS_Voltages_B5"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B11_NAME "BMS_Voltages_B11"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_B17_NAME "BMS_Voltages_B17"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C4_NAME "BMS_Voltages_C4"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C10_NAME "BMS_Voltages_C10"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_C16_NAME "BMS_Voltages_C16"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D3_NAME "BMS_Voltages_D3"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D9_NAME "BMS_Voltages_D9"
#define MAIN_DBC_BMS_VOLTAGES_BMS_VOLTAGES_D15_NAME "BMS_Voltages_D15"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_MUX_NAME "BMS_ThermistorVoltages_mux"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A1_NAME "BMS_ThermistorVoltages_A1"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A7_NAME "BMS_ThermistorVoltages_A7"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B5_NAME "BMS_ThermistorVoltages_B5"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C3_NAME "BMS_ThermistorVoltages_C3"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D1_NAME "BMS_ThermistorVoltages_D1"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D7_NAME "BMS_ThermistorVoltages_D7"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A2_NAME "BMS_ThermistorVoltages_A2"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A8_NAME "BMS_ThermistorVoltages_A8"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B6_NAME "BMS_ThermistorVoltages_B6"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C4_NAME "BMS_ThermistorVoltages_C4"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D2_NAME "BMS_ThermistorVoltages_D2"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D8_NAME "BMS_ThermistorVoltages_D8"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A3_NAME "BMS_ThermistorVoltages_A3"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B1_NAME "BMS_ThermistorVoltages_B1"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B7_NAME "BMS_ThermistorVoltages_B7"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C5_NAME "BMS_ThermistorVoltages_C5"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D3_NAME "BMS_ThermistorVoltages_D3"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A4_NAME "BMS_ThermistorVoltages_A4"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B2_NAME "BMS_ThermistorVoltages_B2"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B8_NAME "BMS_ThermistorVoltages_B8"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C6_NAME "BMS_ThermistorVoltages_C6"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D4_NAME "BMS_ThermistorVoltages_D4"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A5_NAME "BMS_ThermistorVoltages_A5"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B3_NAME "BMS_ThermistorVoltages_B3"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C1_NAME "BMS_ThermistorVoltages_C1"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C7_NAME "BMS_ThermistorVoltages_C7"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D5_NAME "BMS_ThermistorVoltages_D5"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_A6_NAME "BMS_ThermistorVoltages_A6"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_B4_NAME "BMS_ThermistorVoltages_B4"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C2_NAME "BMS_ThermistorVoltages_C2"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_C8_NAME "BMS_ThermistorVoltages_C8"
#define MAIN_DBC_BMS_THERMISTOR_VOLTAGES_BMS_THERMISTOR_VOLTAGES_D6_NAME "BMS_ThermistorVoltages_D6"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_MUX_NAME "BMS_Temperatures_mux"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A1_NAME "BMS_Temperatures_A1"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A8_NAME "BMS_Temperatures_A8"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B7_NAME "BMS_Temperatures_B7"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C6_NAME "BMS_Temperatures_C6"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D5_NAME "BMS_Temperatures_D5"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A2_NAME "BMS_Temperatures_A2"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B1_NAME "BMS_Temperatures_B1"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B8_NAME "BMS_Temperatures_B8"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C7_NAME "BMS_Temperatures_C7"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D6_NAME "BMS_Temperatures_D6"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A3_NAME "BMS_Temperatures_A3"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B2_NAME "BMS_Temperatures_B2"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C1_NAME "BMS_Temperatures_C1"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C8_NAME "BMS_Temperatures_C8"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D7_NAME "BMS_Temperatures_D7"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A4_NAME "BMS_Temperatures_A4"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B3_NAME "BMS_Temperatures_B3"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C2_NAME "BMS_Temperatures_C2"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D1_NAME "BMS_Temperatures_D1"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D8_NAME "BMS_Temperatures_D8"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A5_NAME "BMS_Temperatures_A5"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B4_NAME "BMS_Temperatures_B4"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C3_NAME "BMS_Temperatures_C3"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D2_NAME "BMS_Temperatures_D2"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A6_NAME "BMS_Temperatures_A6"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B5_NAME "BMS_Temperatures_B5"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C4_NAME "BMS_Temperatures_C4"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D3_NAME "BMS_Temperatures_D3"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_A7_NAME "BMS_Temperatures_A7"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_B6_NAME "BMS_Temperatures_B6"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_C5_NAME "BMS_Temperatures_C5"
#define MAIN_DBC_BMS_TEMPERATURES_BMS_TEMPERATURES_D4_NAME "BMS_Temperatures_D4"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_MUX_NAME "BMS_DrainStatus_mux"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A1_NAME "BMS_DrainStatus_A1"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D7_NAME "BMS_DrainStatus_D7"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A2_NAME "BMS_DrainStatus_A2"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D8_NAME "BMS_DrainStatus_D8"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A3_NAME "BMS_DrainStatus_A3"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D9_NAME "BMS_DrainStatus_D9"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A4_NAME "BMS_DrainStatus_A4"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D10_NAME "BMS_DrainStatus_D10"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A5_NAME "BMS_DrainStatus_A5"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D11_NAME "BMS_DrainStatus_D11"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A6_NAME "BMS_DrainStatus_A6"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D12_NAME "BMS_DrainStatus_D12"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A7_NAME "BMS_DrainStatus_A7"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D13_NAME "BMS_DrainStatus_D13"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A8_NAME "BMS_DrainStatus_A8"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D14_NAME "BMS_DrainStatus_D14"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A9_NAME "BMS_DrainStatus_A9"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D15_NAME "BMS_DrainStatus_D15"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A10_NAME "BMS_DrainStatus_A10"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D16_NAME "BMS_DrainStatus_D16"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A11_NAME "BMS_DrainStatus_A11"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D17_NAME "BMS_DrainStatus_D17"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A12_NAME "BMS_DrainStatus_A12"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D18_NAME "BMS_DrainStatus_D18"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A13_NAME "BMS_DrainStatus_A13"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D19_NAME "BMS_DrainStatus_D19"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A14_NAME "BMS_DrainStatus_A14"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A15_NAME "BMS_DrainStatus_A15"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A16_NAME "BMS_DrainStatus_A16"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A17_NAME "BMS_DrainStatus_A17"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A18_NAME "BMS_DrainStatus_A18"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_A19_NAME "BMS_DrainStatus_A19"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B1_NAME "BMS_DrainStatus_B1"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B2_NAME "BMS_DrainStatus_B2"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B3_NAME "BMS_DrainStatus_B3"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B4_NAME "BMS_DrainStatus_B4"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B5_NAME "BMS_DrainStatus_B5"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B6_NAME "BMS_DrainStatus_B6"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B7_NAME "BMS_DrainStatus_B7"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B8_NAME "BMS_DrainStatus_B8"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B9_NAME "BMS_DrainStatus_B9"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B10_NAME "BMS_DrainStatus_B10"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B11_NAME "BMS_DrainStatus_B11"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B12_NAME "BMS_DrainStatus_B12"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B13_NAME "BMS_DrainStatus_B13"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B14_NAME "BMS_DrainStatus_B14"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B15_NAME "BMS_DrainStatus_B15"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B16_NAME "BMS_DrainStatus_B16"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B17_NAME "BMS_DrainStatus_B17"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B18_NAME "BMS_DrainStatus_B18"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_B19_NAME "BMS_DrainStatus_B19"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C1_NAME "BMS_DrainStatus_C1"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C2_NAME "BMS_DrainStatus_C2"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C3_NAME "BMS_DrainStatus_C3"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C4_NAME "BMS_DrainStatus_C4"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C5_NAME "BMS_DrainStatus_C5"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C6_NAME "BMS_DrainStatus_C6"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C7_NAME "BMS_DrainStatus_C7"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C8_NAME "BMS_DrainStatus_C8"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C9_NAME "BMS_DrainStatus_C9"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C10_NAME "BMS_DrainStatus_C10"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C11_NAME "BMS_DrainStatus_C11"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C12_NAME "BMS_DrainStatus_C12"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C13_NAME "BMS_DrainStatus_C13"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C14_NAME "BMS_DrainStatus_C14"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C15_NAME "BMS_DrainStatus_C15"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C16_NAME "BMS_DrainStatus_C16"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C17_NAME "BMS_DrainStatus_C17"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C18_NAME "BMS_DrainStatus_C18"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_C19_NAME "BMS_DrainStatus_C19"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D1_NAME "BMS_DrainStatus_D1"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D2_NAME "BMS_DrainStatus_D2"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D3_NAME "BMS_DrainStatus_D3"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D4_NAME "BMS_DrainStatus_D4"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D5_NAME "BMS_DrainStatus_D5"
#define MAIN_DBC_BMS_DRAIN_STATUS_BMS_DRAIN_STATUS_D6_NAME "BMS_DrainStatus_D6"
#define MAIN_DBC_BMS_CURRENT_BMS_INST_CURRENT_FILT_NAME "BMS_InstCurrentFilt"
#define MAIN_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_NAME "BMS_HardFaultIndicator_task"
#define MAIN_DBC_BMS_REF_BMS_REF_MUX_NAME "BMS_Ref_mux"
#define MAIN_DBC_BMS_REF_BMS_REF_REF0_NAME "BMS_Ref_ref0"
#define MAIN_DBC_BMS_REF_BMS_REF_REF6_NAME "BMS_Ref_ref6"
#define MAIN_DBC_BMS_REF_BMS_REF_REF1_NAME "BMS_Ref_ref1"
#define MAIN_DBC_BMS_REF_BMS_REF_REF7_NAME "BMS_Ref_ref7"
#define MAIN_DBC_BMS_REF_BMS_REF_REF2_NAME "BMS_Ref_ref2"
#define MAIN_DBC_BMS_REF_BMS_REF_REF8_NAME "BMS_Ref_ref8"
#define MAIN_DBC_BMS_REF_BMS_REF_REF3_NAME "BMS_Ref_ref3"
#define MAIN_DBC_BMS_REF_BMS_REF_REF9_NAME "BMS_Ref_ref9"
#define MAIN_DBC_BMS_REF_BMS_REF_REF4_NAME "BMS_Ref_ref4"
#define MAIN_DBC_BMS_REF_BMS_REF_REF10_NAME "BMS_Ref_ref10"
#define MAIN_DBC_BMS_REF_BMS_REF_REF5_NAME "BMS_Ref_ref5"
#define MAIN_DBC_BMS_REF_BMS_REF_REF11_NAME "BMS_Ref_ref11"
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_LIMP_LEVEL_NAME "BMS_LimpMode_VoltageLimpLevel"
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_LIMP_LEVEL_NAME "BMS_LimpMode_TempLimpLevel"
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_VOLTAGE_CURRENT_LIMIT_NAME "BMS_LimpMode_VoltageCurrentLimit"
#define MAIN_DBC_BMS_LIMP_MODE_BMS_LIMP_MODE_TEMP_CURRENT_LIMIT_NAME "BMS_LimpMode_TempCurrentLimit"
#define MAIN_DBC_CHG_CHARGE_REQUEST_CHG_CHARGE_REQUEST_MAX_VOLTAGE_NAME "CHG_ChargeRequest_MaxVoltage"
#define MAIN_DBC_CHG_CHARGE_REQUEST_CHG_CHARGE_REQUEST_MAX_CURRENT_NAME "CHG_ChargeRequest_MaxCurrent"
#define MAIN_DBC_CHG_CHARGE_REQUEST_CHG_CHARGE_REQUEST_CONTROL_NAME "CHG_ChargeRequest_Control"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_OUTPUT_VOLTAGE_NAME "CHG_OutputVoltage"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_OUTPUT_CURRENT_NAME "CHG_OutputCurrent"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_HARDWARE_FAILURE_NAME "CHG_Flag_HardwareFailure"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_OVER_TEMPERATURE_NAME "CHG_Flag_OverTemperature"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_INPUT_VOLTAGE_NAME "CHG_Flag_InputVoltage"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_STARTING_STATE_NAME "CHG_Flag_StartingState"
#define MAIN_DBC_CHG_CHARGE_STATS_CHG_FLAG_COMM_TIMEOUT_NAME "CHG_Flag_CommTimeout"
#define MAIN_DBC_SSDB_FRONT_SSDB_BRAKE_PRESSURE_FRONT_RAW_NAME "SSDB_brake_pressure_front_raw"
#define MAIN_DBC_SSDB_FRONT_SSDB_STEERING_ANGLE_RAW_NAME "SSDB_steering_angle_raw"
#define MAIN_DBC_SSDB_VECTOR_NAV6_VECTOR_NAV_VEL_NED_N_NAME "VectorNav_VelNedN"
#define MAIN_DBC_SSDB_VECTOR_NAV6_VECTOR_NAV_VEL_NED_E_NAME "VectorNav_VelNedE"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_B_INVERTER_ON_NAME "VC_RL_AMK_bInverterOn"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_B_DC_ON_NAME "VC_RL_AMK_bDCOn"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_B_ENABLE_NAME "VC_RL_AMK_bEnable"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_B_ERROR_RESET_NAME "VC_RL_AMK_bErrorReset"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_TORQUE_SETPOINT_NAME "VC_RL_AMK_TorqueSetpoint"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_TORQUE_LIMIT_POSITIVE_NAME "VC_RL_AMK_TorqueLimitPositive"
#define MAIN_DBC_VC_RL_AMK_SETPOINTS_VC_RL_AMK_TORQUE_LIMIT_NEGATIVE_NAME "VC_RL_AMK_TorqueLimitNegative"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_SYSTEM_READY_NAME "VC_RL_Status_SystemReady"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_ERROR_NAME "VC_RL_Status_Error"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_WARN_NAME "VC_RL_Status_Warn"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_QUIT_DC_ON_NAME "VC_RL_Status_QuitDcOn"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_DC_ON_NAME "VC_RL_Status_DcOn"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_QUIT_INVERTER_ON_NAME "VC_RL_Status_QuitInverterOn"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_INVERTER_ON_NAME "VC_RL_Status_InverterOn"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_STATUS_DERATING_NAME "VC_RL_Status_Derating"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_FEEDBACK_VELOCITY_NAME "VC_RL_FeedbackVelocity"
#define MAIN_DBC_VC_RL_AMK_ACTUAL_1_VC_RL_MAGNETIZING_CURRENT_NAME "VC_RL_MagnetizingCurrent"
#define MAIN_DBC_VC_RL_INFO_1_VC_RL_ERROR_LIST1_NAME "VC_RL_ErrorList1"
#define MAIN_DBC_VC_RL_INFO_1_VC_RL_ERROR_LIST2_NAME "VC_RL_ErrorList2"
#define MAIN_DBC_VC_RL_INFO_2_VC_RL_ERROR_LIST3_NAME "VC_RL_ErrorList3"
#define MAIN_DBC_VC_RL_INFO_2_VC_RL_ERROR_INFO_NAME "VC_RL_ErrorInfo"
#define MAIN_DBC_VC_RL_INFO_2_VC_RL_TEMP_INVERTER_NAME "VC_RL_TempInverter"
#define MAIN_DBC_VC_RL_INFO_3_VC_RL_TEMP_MOTOR_NAME "VC_RL_TempMotor"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_B_INVERTER_ON_NAME "VC_RR_AMK_bInverterOn"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_B_DC_ON_NAME "VC_RR_AMK_bDCOn"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_B_ENABLE_NAME "VC_RR_AMK_bEnable"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_B_ERROR_RESET_NAME "VC_RR_AMK_bErrorReset"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_TORQUE_SETPOINT_NAME "VC_RR_AMK_TorqueSetpoint"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_TORQUE_LIMIT_POSITIVE_NAME "VC_RR_AMK_TorqueLimitPositive"
#define MAIN_DBC_VC_RR_AMK_SETPOINTS_VC_RR_AMK_TORQUE_LIMIT_NEGATIVE_NAME "VC_RR_AMK_TorqueLimitNegative"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_SYSTEM_READY_NAME "VC_RR_Status_SystemReady"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_ERROR_NAME "VC_RR_Status_Error"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_WARN_NAME "VC_RR_Status_Warn"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_QUIT_DC_ON_NAME "VC_RR_Status_QuitDcOn"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_DC_ON_NAME "VC_RR_Status_DcOn"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_QUIT_INVERTER_ON_NAME "VC_RR_Status_QuitInverterOn"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_INVERTER_ON_NAME "VC_RR_Status_InverterOn"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_STATUS_DERATING_NAME "VC_RR_Status_Derating"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_FEEDBACK_VELOCITY_NAME "VC_RR_FeedbackVelocity"
#define MAIN_DBC_VC_RR_AMK_ACTUAL_1_VC_RR_MAGNETIZING_CURRENT_NAME "VC_RR_MagnetizingCurrent"
#define MAIN_DBC_VC_RR_INFO_1_VC_RR_ERROR_LIST1_NAME "VC_RR_ErrorList1"
#define MAIN_DBC_VC_RR_INFO_1_VC_RR_ERROR_LIST2_NAME "VC_RR_ErrorList2"
#define MAIN_DBC_VC_RR_INFO_2_VC_RR_ERROR_LIST3_NAME "VC_RR_ErrorList3"
#define MAIN_DBC_VC_RR_INFO_2_VC_RR_ERROR_INFO_NAME "VC_RR_ErrorInfo"
#define MAIN_DBC_VC_RR_INFO_2_VC_RR_TEMP_INVERTER_NAME "VC_RR_TempInverter"
#define MAIN_DBC_VC_RR_INFO_3_VC_RR_TEMP_MOTOR_NAME "VC_RR_TempMotor"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_B_INVERTER_ON_NAME "VC_FL_AMK_bInverterOn"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_B_DC_ON_NAME "VC_FL_AMK_bDCOn"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_B_ENABLE_NAME "VC_FL_AMK_bEnable"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_B_ERROR_RESET_NAME "VC_FL_AMK_bErrorReset"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_TORQUE_SETPOINT_NAME "VC_FL_AMK_TorqueSetpoint"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_TORQUE_LIMIT_POSITIVE_NAME "VC_FL_AMK_TorqueLimitPositive"
#define MAIN_DBC_VC_FL_AMK_SETPOINTS_VC_FL_AMK_TORQUE_LIMIT_NEGATIVE_NAME "VC_FL_AMK_TorqueLimitNegative"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_SYSTEM_READY_NAME "VC_FL_Status_SystemReady"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_ERROR_NAME "VC_FL_Status_Error"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_WARN_NAME "VC_FL_Status_Warn"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_QUIT_DC_ON_NAME "VC_FL_Status_QuitDcOn"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_DC_ON_NAME "VC_FL_Status_DcOn"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_QUIT_INVERTER_ON_NAME "VC_FL_Status_QuitInverterOn"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_INVERTER_ON_NAME "VC_FL_Status_InverterOn"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_STATUS_DERATING_NAME "VC_FL_Status_Derating"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_FEEDBACK_VELOCITY_NAME "VC_FL_FeedbackVelocity"
#define MAIN_DBC_VC_FL_AMK_ACTUAL_1_VC_FL_MAGNETIZING_CURRENT_NAME "VC_FL_MagnetizingCurrent"
#define MAIN_DBC_VC_FL_INFO_1_VC_FL_ERROR_LIST1_NAME "VC_FL_ErrorList1"
#define MAIN_DBC_VC_FL_INFO_1_VC_FL_ERROR_LIST2_NAME "VC_FL_ErrorList2"
#define MAIN_DBC_VC_FL_INFO_2_VC_FL_ERROR_LIST3_NAME "VC_FL_ErrorList3"
#define MAIN_DBC_VC_FL_INFO_2_VC_FL_ERROR_INFO_NAME "VC_FL_ErrorInfo"
#define MAIN_DBC_VC_FL_INFO_2_VC_FL_TEMP_INVERTER_NAME "VC_FL_TempInverter"
#define MAIN_DBC_VC_FL_INFO_3_VC_FL_TEMP_MOTOR_NAME "VC_FL_TempMotor"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_B_INVERTER_ON_NAME "VC_FR_AMK_bInverterOn"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_B_DC_ON_NAME "VC_FR_AMK_bDCOn"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_B_ENABLE_NAME "VC_FR_AMK_bEnable"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_B_ERROR_RESET_NAME "VC_FR_AMK_bErrorReset"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_TORQUE_SETPOINT_NAME "VC_FR_AMK_TorqueSetpoint"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_TORQUE_LIMIT_POSITIVE_NAME "VC_FR_AMK_TorqueLimitPositive"
#define MAIN_DBC_VC_FR_AMK_SETPOINTS_VC_FR_AMK_TORQUE_LIMIT_NEGATIVE_NAME "VC_FR_AMK_TorqueLimitNegative"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_SYSTEM_READY_NAME "VC_FR_Status_SystemReady"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_ERROR_NAME "VC_FR_Status_Error"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_WARN_NAME "VC_FR_Status_Warn"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_QUIT_DC_ON_NAME "VC_FR_Status_QuitDcOn"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_DC_ON_NAME "VC_FR_Status_DcOn"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_QUIT_INVERTER_ON_NAME "VC_FR_Status_QuitInverterOn"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_INVERTER_ON_NAME "VC_FR_Status_InverterOn"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_STATUS_DERATING_NAME "VC_FR_Status_Derating"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_FEEDBACK_VELOCITY_NAME "VC_FR_FeedbackVelocity"
#define MAIN_DBC_VC_FR_AMK_ACTUAL_1_VC_FR_MAGNETIZING_CURRENT_NAME "VC_FR_MagnetizingCurrent"
#define MAIN_DBC_VC_FR_INFO_1_VC_FR_ERROR_LIST1_NAME "VC_FR_ErrorList1"
#define MAIN_DBC_VC_FR_INFO_1_VC_FR_ERROR_LIST2_NAME "VC_FR_ErrorList2"
#define MAIN_DBC_VC_FR_INFO_2_VC_FR_ERROR_LIST3_NAME "VC_FR_ErrorList3"
#define MAIN_DBC_VC_FR_INFO_2_VC_FR_ERROR_INFO_NAME "VC_FR_ErrorInfo"
#define MAIN_DBC_VC_FR_INFO_2_VC_FR_TEMP_INVERTER_NAME "VC_FR_TempInverter"
#define MAIN_DBC_VC_FR_INFO_3_VC_FR_TEMP_MOTOR_NAME "VC_FR_TempMotor"

/**
 * Signals in message BMS_CellOverview.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_cell_overview_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_min;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_max;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_overview_temp_avg;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_min;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_max;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_overview_volt_avg;

    /**
     * Number of cells currently draining
     *
     * Range: 0..76 (0..76 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_overview_drains;
};

/**
 * Signals in message C70_BrakePressures.
 *
 * Brake Pressures, relayed by C70
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_c70_brake_pressures_t {
    /**
     * Range: -5000..5000 (0..5000 psi)
     * Scale: 0.5
     * Offset: 2500
     */
    int16_t c70_brake_pressure_front;

    /**
     * Range: -6250..6250 (0..2500 psi)
     * Scale: 0.2
     * Offset: 1250
     */
    int16_t c70_brake_pressure_rear;
};

/**
 * Signals in message C70_TireTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_c70_tire_temps_t {
    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t tire_temp_fl_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t tire_temp_fr_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t tire_temp_rl_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t tire_temp_rr_max;
};

/**
 * Signals in message C70_RotorTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_c70_rotor_temps_t {
    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t rotor_temp_fl_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t rotor_temp_fr_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t rotor_temp_rl_max;

    /**
     * Range: 8000..105000 (-20..950 degC)
     * Scale: 0.01
     * Offset: -100
     */
    uint16_t rotor_temp_rr_max;
};

/**
 * Signals in message VC_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_status_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_status_vehicle_state;
};

/**
 * Signals in message VC_PedalInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_pedal_inputs_t {
    /**
     * Range: 0..30000 (0..3000 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_brake_pressure_front_psi;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_a;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_b;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_avg;

    /**
     * Range: 0..30000 (0..3000 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_brake_pressure_rear_psi;
};

/**
 * Signals in message VC_PedalInputsRaw.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_pedal_inputs_raw_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_accel_a_adc;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_accel_b_adc;

    /**
     * Range: 0..4095 (0..4095 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_raw_brake_pressure_rear_adc;
};

/**
 * Signals in message VC_DashInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_dash_inputs_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_rt_dbutton;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch2;
};

/**
 * Signals in message VC_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_shutdown_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bms_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_signal_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_precharge;
};

/**
 * Signals in message VC_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_brake_irra;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_accel_a_irra;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_accel_b_irra;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_disag;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_double_pedal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_steer_angle_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_rl_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_rr_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_fl_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_fr_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_vn_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_fbps_lost;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_rbps_lost;
};

/**
 * Signals in message VC_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_hard_fault_indicator_task;
};

/**
 * Signals in message VC_RTDSRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rtds_request_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_request_rtds;
};

/**
 * Signals in message PBX_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_pbx_status_t {
    /**
     * Range: 0..2000 (0..20 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pbx_lv_voltage;

    /**
     * Range: 0..10000 (0..100 A)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pbx_lv_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pbx_pumps_on;
};

/**
 * Signals in message BMS_Current_Limit.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_current_limit_t {
    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_max_discharge_current;

    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_max_charge_current;
};

/**
 * Signals in message BMS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_status_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc_raw;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_charge_state;

    /**
     * Range: 0..4000 (0..400 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_status_pack_voltage;
};

/**
 * Signals in message BMS_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_cells;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_temps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_drain_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_current_sensor_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_out_of_juice;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_temperature_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_drain_failure;
};

/**
 * Signals in message BMS_FaultAlert.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_fault_alert_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_cell_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_temp_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_drain_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_adc_error_code;

    /**
     * Range: 0..2000000 (0..2000 A)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bms_fault_alert_current;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_voltage;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_voltage_diff;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_lowest_cell_voltage;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_temperature;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_over_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_failed_drain_cell;
};

/**
 * Signals in message BMS_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_voltages_t {
    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_a18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_b17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_c16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_d15;
};

/**
 * Signals in message BMS_ThermistorVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_thermistor_voltages_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermistor_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_a6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_b4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_c8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_d6;
};

/**
 * Signals in message BMS_Temperatures.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_temperatures_t {
    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temperatures_mux;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_a7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_b6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_c5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_d4;
};

/**
 * Signals in message BMS_DrainStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_drain_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_mux;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_c19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_d6;
};

/**
 * Signals in message BMS_Current.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_current_t {
    /**
     * Range: -100000..250000 (-100..250 A)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t bms_inst_current_filt;
};

/**
 * Signals in message BMS_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hard_fault_indicator_task;
};

/**
 * Signals in message BMS_Ref.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_ref_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ref_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref11;
};

/**
 * Signals in message BMS_LimpMode.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_bms_limp_mode_t {
    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_limp_mode_voltage_limp_level;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_limp_mode_temp_limp_level;

    /**
     * Range: -100..500 (-100..500 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t bms_limp_mode_voltage_current_limit;

    /**
     * Range: -100..500 (-100..500 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t bms_limp_mode_temp_current_limit;
};

/**
 * Signals in message CHG_ChargeRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_chg_charge_request_t {
    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_charge_request_max_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_charge_request_max_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_charge_request_control;
};

/**
 * Signals in message CHG_ChargeStats.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_chg_charge_stats_t {
    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_output_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t chg_output_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_hardware_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_input_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_starting_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_flag_comm_timeout;
};

/**
 * Signals in message SSDB_front.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_ssdb_front_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_brake_pressure_front_raw;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_steering_angle_raw;
};

/**
 * Signals in message SSDB_VectorNav6.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_ssdb_vector_nav6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_e;
};

/**
 * Signals in message VC_RL_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rl_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rl_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rl_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rl_amk_torque_limit_negative;
};

/**
 * Signals in message VC_RL_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rl_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rl_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t vc_rl_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vc_rl_magnetizing_current;
};

/**
 * Signals in message VC_RL_Info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rl_info_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rl_error_list1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rl_error_list2;
};

/**
 * Signals in message VC_RL_Info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rl_info_2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rl_error_list3;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_rl_error_info;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rl_temp_inverter;
};

/**
 * Signals in message VC_RL_Info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rl_info_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rl_temp_motor;
};

/**
 * Signals in message VC_RR_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rr_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rr_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rr_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rr_amk_torque_limit_negative;
};

/**
 * Signals in message VC_RR_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rr_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rr_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t vc_rr_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vc_rr_magnetizing_current;
};

/**
 * Signals in message VC_RR_Info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rr_info_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rr_error_list1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rr_error_list2;
};

/**
 * Signals in message VC_RR_Info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rr_info_2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_rr_error_list3;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_rr_error_info;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rr_temp_inverter;
};

/**
 * Signals in message VC_RR_Info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_rr_info_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_rr_temp_motor;
};

/**
 * Signals in message VC_FL_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fl_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fl_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fl_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fl_amk_torque_limit_negative;
};

/**
 * Signals in message VC_FL_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fl_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fl_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t vc_fl_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vc_fl_magnetizing_current;
};

/**
 * Signals in message VC_Fl_Info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fl_info_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fl_error_list1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fl_error_list2;
};

/**
 * Signals in message VC_FL_Info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fl_info_2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fl_error_list3;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_fl_error_info;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fl_temp_inverter;
};

/**
 * Signals in message VC_FL_Info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fl_info_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fl_temp_motor;
};

/**
 * Signals in message VC_FR_AMK_Setpoints.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fr_amk_setpoints_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_amk_b_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_amk_b_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_amk_b_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_amk_b_error_reset;

    /**
     * Range: -10000..10000 (-1000..1000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fr_amk_torque_setpoint;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fr_amk_torque_limit_positive;

    /**
     * Range: -30000..30000 (-3000..3000 % Mn)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fr_amk_torque_limit_negative;
};

/**
 * Signals in message VC_FR_AMK_Actual_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fr_amk_actual_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_system_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_quit_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_dc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_quit_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_inverter_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fr_status_derating;

    /**
     * Range: -1000000000..1000000000 (-100000.0..100000.0 rpm)
     * Scale: 0.0001
     * Offset: 0
     */
    int32_t vc_fr_feedback_velocity;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vc_fr_magnetizing_current;
};

/**
 * Signals in message VC_FR_Info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fr_info_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fr_error_list1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fr_error_list2;
};

/**
 * Signals in message VC_FR_Info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fr_info_2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vc_fr_error_list3;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_fr_error_info;

    /**
     * Range: -327680..327670 (-32768..32767 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fr_temp_inverter;
};

/**
 * Signals in message VC_FR_Info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct main_dbc_vc_fr_info_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vc_fr_temp_motor;
};

/**
 * Pack message BMS_CellOverview.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_cell_overview_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_cell_overview_t *src_p,
    size_t size);

/**
 * Unpack message BMS_CellOverview.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_cell_overview_unpack(
    struct main_dbc_bms_cell_overview_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_CellOverview.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_cell_overview_init(struct main_dbc_bms_cell_overview_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_cell_overview_bms_overview_temp_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_temp_min_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_temp_min_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_cell_overview_bms_overview_temp_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_temp_max_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_temp_max_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_cell_overview_bms_overview_temp_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_temp_avg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_temp_avg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_cell_overview_bms_overview_volt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_volt_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_volt_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_cell_overview_bms_overview_volt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_volt_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_volt_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_cell_overview_bms_overview_volt_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_volt_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_volt_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_cell_overview_bms_overview_drains_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_cell_overview_bms_overview_drains_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_cell_overview_bms_overview_drains_is_in_range(uint8_t value);

/**
 * Pack message C70_BrakePressures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_c70_brake_pressures_pack(
    uint8_t *dst_p,
    const struct main_dbc_c70_brake_pressures_t *src_p,
    size_t size);

/**
 * Unpack message C70_BrakePressures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_c70_brake_pressures_unpack(
    struct main_dbc_c70_brake_pressures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from C70_BrakePressures.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_c70_brake_pressures_init(struct main_dbc_c70_brake_pressures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_c70_brake_pressures_c70_brake_pressure_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_brake_pressures_c70_brake_pressure_front_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_brake_pressures_c70_brake_pressure_front_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_c70_brake_pressures_c70_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_brake_pressures_c70_brake_pressure_rear_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_brake_pressures_c70_brake_pressure_rear_is_in_range(int16_t value);

/**
 * Pack message C70_TireTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_c70_tire_temps_pack(
    uint8_t *dst_p,
    const struct main_dbc_c70_tire_temps_t *src_p,
    size_t size);

/**
 * Unpack message C70_TireTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_c70_tire_temps_unpack(
    struct main_dbc_c70_tire_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from C70_TireTemps.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_c70_tire_temps_init(struct main_dbc_c70_tire_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_tire_temps_tire_temp_fl_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_tire_temps_tire_temp_fl_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_tire_temps_tire_temp_fl_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_tire_temps_tire_temp_fr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_tire_temps_tire_temp_fr_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_tire_temps_tire_temp_fr_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_tire_temps_tire_temp_rl_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_tire_temps_tire_temp_rl_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_tire_temps_tire_temp_rl_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_tire_temps_tire_temp_rr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_tire_temps_tire_temp_rr_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_tire_temps_tire_temp_rr_max_is_in_range(uint16_t value);

/**
 * Pack message C70_RotorTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_c70_rotor_temps_pack(
    uint8_t *dst_p,
    const struct main_dbc_c70_rotor_temps_t *src_p,
    size_t size);

/**
 * Unpack message C70_RotorTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_c70_rotor_temps_unpack(
    struct main_dbc_c70_rotor_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from C70_RotorTemps.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_c70_rotor_temps_init(struct main_dbc_c70_rotor_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_rotor_temps_rotor_temp_fl_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_rotor_temps_rotor_temp_fl_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_rotor_temps_rotor_temp_fl_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_rotor_temps_rotor_temp_fr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_rotor_temps_rotor_temp_fr_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_rotor_temps_rotor_temp_fr_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_rotor_temps_rotor_temp_rl_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_rotor_temps_rotor_temp_rl_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_rotor_temps_rotor_temp_rl_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_c70_rotor_temps_rotor_temp_rr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_c70_rotor_temps_rotor_temp_rr_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_c70_rotor_temps_rotor_temp_rr_max_is_in_range(uint16_t value);

/**
 * Pack message VC_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_status_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_status_unpack(
    struct main_dbc_vc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_status_init(struct main_dbc_vc_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_status_vc_status_vehicle_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_status_vc_status_vehicle_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_status_vc_status_vehicle_state_is_in_range(uint8_t value);

/**
 * Pack message VC_PedalInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_pedal_inputs_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_pedal_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_PedalInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_pedal_inputs_unpack(
    struct main_dbc_vc_pedal_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_PedalInputs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_pedal_inputs_init(struct main_dbc_vc_pedal_inputs_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_front_psi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_front_psi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_front_psi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_rear_psi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_rear_psi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_rear_psi_is_in_range(uint16_t value);

/**
 * Pack message VC_PedalInputsRaw.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_pedal_inputs_raw_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_pedal_inputs_raw_t *src_p,
    size_t size);

/**
 * Unpack message VC_PedalInputsRaw.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_pedal_inputs_raw_unpack(
    struct main_dbc_vc_pedal_inputs_raw_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_PedalInputsRaw.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_pedal_inputs_raw_init(struct main_dbc_vc_pedal_inputs_raw_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_a_adc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_a_adc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_a_adc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_b_adc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_b_adc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_accel_b_adc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_pressure_rear_adc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_pressure_rear_adc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_pedal_inputs_raw_vc_pedal_inputs_raw_brake_pressure_rear_adc_is_in_range(uint16_t value);

/**
 * Pack message VC_DashInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_dash_inputs_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_dash_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_DashInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_dash_inputs_unpack(
    struct main_dbc_vc_dash_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_DashInputs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_dash_inputs_init(struct main_dbc_vc_dash_inputs_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_dash_inputs_vc_dash_inputs_rt_dbutton_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_dash_inputs_vc_dash_inputs_switch0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_dash_inputs_vc_dash_inputs_switch1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_dash_inputs_vc_dash_inputs_switch2_is_in_range(uint8_t value);

/**
 * Pack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_shutdown_status_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_shutdown_status_unpack(
    struct main_dbc_vc_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_ShutdownStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_shutdown_status_init(struct main_dbc_vc_shutdown_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_shutdown_status_vc_shutdown_status_bms_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_shutdown_status_vc_shutdown_status_imd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_shutdown_status_vc_shutdown_status_bspd_signal_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_shutdown_status_vc_shutdown_status_precharge_is_in_range(uint8_t value);

/**
 * Pack message VC_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fault_vector_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message VC_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fault_vector_unpack(
    struct main_dbc_vc_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FaultVector.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fault_vector_init(struct main_dbc_vc_fault_vector_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_brake_irra_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_brake_irra_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_brake_irra_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_accel_a_irra_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_accel_a_irra_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_accel_a_irra_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_accel_b_irra_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_accel_b_irra_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_accel_b_irra_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_apps_disag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_apps_disag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_apps_disag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_steer_angle_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_steer_angle_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_steer_angle_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_rl_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_rl_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_rl_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_rr_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_rr_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_rr_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_fl_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_fl_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_fl_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_fr_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_fr_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_fr_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_vn_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_vn_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_vn_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_fbps_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_fbps_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_fbps_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fault_vector_vc_fault_vector_rbps_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fault_vector_vc_fault_vector_rbps_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fault_vector_vc_fault_vector_rbps_lost_is_in_range(uint8_t value);

/**
 * Pack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_hard_fault_indicator_unpack(
    struct main_dbc_vc_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_HardFaultIndicator.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_hard_fault_indicator_init(struct main_dbc_vc_hard_fault_indicator_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message VC_RTDSRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rtds_request_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rtds_request_t *src_p,
    size_t size);

/**
 * Unpack message VC_RTDSRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rtds_request_unpack(
    struct main_dbc_vc_rtds_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RTDSRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rtds_request_init(struct main_dbc_vc_rtds_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rtds_request_vc_request_rtds_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rtds_request_vc_request_rtds_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rtds_request_vc_request_rtds_is_in_range(uint8_t value);

/**
 * Pack message PBX_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_pbx_status_pack(
    uint8_t *dst_p,
    const struct main_dbc_pbx_status_t *src_p,
    size_t size);

/**
 * Unpack message PBX_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_pbx_status_unpack(
    struct main_dbc_pbx_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PBX_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_pbx_status_init(struct main_dbc_pbx_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_pbx_status_pbx_lv_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_pbx_status_pbx_lv_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_pbx_status_pbx_lv_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_pbx_status_pbx_lv_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_pbx_status_pbx_lv_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_pbx_status_pbx_lv_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_pbx_status_pbx_pumps_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_pbx_status_pbx_pumps_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_pbx_status_pbx_pumps_on_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current_Limit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_current_limit_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_current_limit_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current_Limit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_current_limit_unpack(
    struct main_dbc_bms_current_limit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Current_Limit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_current_limit_init(struct main_dbc_bms_current_limit_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_current_limit_d1_max_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_current_limit_d1_max_discharge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_current_limit_d1_max_discharge_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_current_limit_d2_max_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_current_limit_d2_max_charge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_current_limit_d2_max_charge_current_is_in_range(uint16_t value);

/**
 * Pack message BMS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_status_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_status_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_status_unpack(
    struct main_dbc_bms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_status_init(struct main_dbc_bms_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_status_bms_status_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_status_bms_status_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_status_bms_status_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_status_bms_status_soc_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_status_bms_status_soc_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_status_bms_status_soc_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_status_bms_status_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_status_bms_status_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_status_bms_status_charge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_status_bms_status_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_status_bms_status_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_status_bms_status_pack_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMS_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_fault_vector_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_fault_vector_unpack(
    struct main_dbc_bms_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_FaultVector.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_fault_vector_init(struct main_dbc_bms_fault_vector_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_vector_bms_fault_vector_drain_failure_is_in_range(uint8_t value);

/**
 * Pack message BMS_FaultAlert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_fault_alert_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_fault_alert_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultAlert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_fault_alert_unpack(
    struct main_dbc_bms_fault_alert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_FaultAlert.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_fault_alert_init(struct main_dbc_bms_fault_alert_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_bms_fault_alert_bms_fault_alert_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_current_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_over_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_is_in_range(uint8_t value);

/**
 * Pack message BMS_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_voltages_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_voltages_unpack(
    struct main_dbc_bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_voltages_init(struct main_dbc_bms_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_voltages_bms_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_a18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_a18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_a18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_b17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_b17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_b17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_c16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_c16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_c16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_voltages_bms_voltages_d15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_voltages_bms_voltages_d15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_voltages_bms_voltages_d15_is_in_range(uint16_t value);

/**
 * Pack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_thermistor_voltages_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_thermistor_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_thermistor_voltages_unpack(
    struct main_dbc_bms_thermistor_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_ThermistorVoltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_thermistor_voltages_init(struct main_dbc_bms_thermistor_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_a6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_b4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_c8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_thermistor_voltages_bms_thermistor_voltages_d6_is_in_range(uint16_t value);

/**
 * Pack message BMS_Temperatures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_temperatures_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_temperatures_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Temperatures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_temperatures_unpack(
    struct main_dbc_bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Temperatures.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_temperatures_init(struct main_dbc_bms_temperatures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_temperatures_bms_temperatures_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_a7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_a7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_b6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_b6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_c5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_c5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_c5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t main_dbc_bms_temperatures_bms_temperatures_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_temperatures_bms_temperatures_d4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_temperatures_bms_temperatures_d4_is_in_range(int8_t value);

/**
 * Pack message BMS_DrainStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_drain_status_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_drain_status_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DrainStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_drain_status_unpack(
    struct main_dbc_bms_drain_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_DrainStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_drain_status_init(struct main_dbc_bms_drain_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_a19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_a19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_a19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_b19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_b19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_b19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_c19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_c19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_c19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_drain_status_bms_drain_status_d6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_drain_status_bms_drain_status_d6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_drain_status_bms_drain_status_d6_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_current_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_current_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_current_unpack(
    struct main_dbc_bms_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_current_init(struct main_dbc_bms_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t main_dbc_bms_current_bms_inst_current_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_current_bms_inst_current_filt_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_current_bms_inst_current_filt_is_in_range(int32_t value);

/**
 * Pack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_hard_fault_indicator_unpack(
    struct main_dbc_bms_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_HardFaultIndicator.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_hard_fault_indicator_init(struct main_dbc_bms_hard_fault_indicator_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message BMS_Ref.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_ref_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_ref_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Ref.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_ref_unpack(
    struct main_dbc_bms_ref_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Ref.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_ref_init(struct main_dbc_bms_ref_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_ref_bms_ref_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_bms_ref_bms_ref_ref11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_ref_bms_ref_ref11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_ref_bms_ref_ref11_is_in_range(uint16_t value);

/**
 * Pack message BMS_LimpMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_bms_limp_mode_pack(
    uint8_t *dst_p,
    const struct main_dbc_bms_limp_mode_t *src_p,
    size_t size);

/**
 * Unpack message BMS_LimpMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_bms_limp_mode_unpack(
    struct main_dbc_bms_limp_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_LimpMode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_bms_limp_mode_init(struct main_dbc_bms_limp_mode_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_limp_mode_bms_limp_mode_voltage_limp_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_limp_mode_bms_limp_mode_temp_limp_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_limp_mode_bms_limp_mode_voltage_current_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_bms_limp_mode_bms_limp_mode_temp_current_limit_is_in_range(int16_t value);

/**
 * Pack message CHG_ChargeRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_chg_charge_request_pack(
    uint8_t *dst_p,
    const struct main_dbc_chg_charge_request_t *src_p,
    size_t size);

/**
 * Unpack message CHG_ChargeRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_chg_charge_request_unpack(
    struct main_dbc_chg_charge_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CHG_ChargeRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_chg_charge_request_init(struct main_dbc_chg_charge_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_chg_charge_request_chg_charge_request_max_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_request_chg_charge_request_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_request_chg_charge_request_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_chg_charge_request_chg_charge_request_max_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_request_chg_charge_request_max_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_request_chg_charge_request_max_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_request_chg_charge_request_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_request_chg_charge_request_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_request_chg_charge_request_control_is_in_range(uint8_t value);

/**
 * Pack message CHG_ChargeStats.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_chg_charge_stats_pack(
    uint8_t *dst_p,
    const struct main_dbc_chg_charge_stats_t *src_p,
    size_t size);

/**
 * Unpack message CHG_ChargeStats.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_chg_charge_stats_unpack(
    struct main_dbc_chg_charge_stats_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CHG_ChargeStats.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_chg_charge_stats_init(struct main_dbc_chg_charge_stats_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_chg_charge_stats_chg_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_output_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_output_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_chg_charge_stats_chg_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_output_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_stats_chg_flag_hardware_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_flag_hardware_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_flag_hardware_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_stats_chg_flag_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_flag_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_flag_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_stats_chg_flag_input_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_flag_input_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_flag_input_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_stats_chg_flag_starting_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_flag_starting_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_flag_starting_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_chg_charge_stats_chg_flag_comm_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_chg_charge_stats_chg_flag_comm_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_chg_charge_stats_chg_flag_comm_timeout_is_in_range(uint8_t value);

/**
 * Pack message SSDB_front.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_ssdb_front_pack(
    uint8_t *dst_p,
    const struct main_dbc_ssdb_front_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_front.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_ssdb_front_unpack(
    struct main_dbc_ssdb_front_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_front.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_ssdb_front_init(struct main_dbc_ssdb_front_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_ssdb_front_ssdb_brake_pressure_front_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_ssdb_front_ssdb_brake_pressure_front_raw_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_ssdb_front_ssdb_brake_pressure_front_raw_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_ssdb_front_ssdb_steering_angle_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_ssdb_front_ssdb_steering_angle_raw_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_ssdb_front_ssdb_steering_angle_raw_is_in_range(uint16_t value);

/**
 * Pack message SSDB_VectorNav6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_ssdb_vector_nav6_pack(
    uint8_t *dst_p,
    const struct main_dbc_ssdb_vector_nav6_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_VectorNav6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_ssdb_vector_nav6_unpack(
    struct main_dbc_ssdb_vector_nav6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_VectorNav6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_ssdb_vector_nav6_init(struct main_dbc_ssdb_vector_nav6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_n_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_n_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_e_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_ssdb_vector_nav6_vector_nav_vel_ned_e_is_in_range(float value);

/**
 * Pack message VC_RL_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rl_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rl_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message VC_RL_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rl_amk_setpoints_unpack(
    struct main_dbc_vc_rl_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RL_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rl_amk_setpoints_init(struct main_dbc_vc_rl_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_setpoints_vc_rl_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message VC_RL_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rl_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rl_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_RL_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rl_amk_actual_1_unpack(
    struct main_dbc_vc_rl_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RL_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rl_amk_actual_1_init(struct main_dbc_vc_rl_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rl_amk_actual_1_vc_rl_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t main_dbc_vc_rl_amk_actual_1_vc_rl_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_amk_actual_1_vc_rl_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_amk_actual_1_vc_rl_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_amk_actual_1_vc_rl_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message VC_RL_Info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rl_info_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rl_info_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_RL_Info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rl_info_1_unpack(
    struct main_dbc_vc_rl_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RL_Info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rl_info_1_init(struct main_dbc_vc_rl_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rl_info_1_vc_rl_error_list1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_1_vc_rl_error_list1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_1_vc_rl_error_list1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rl_info_1_vc_rl_error_list2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_1_vc_rl_error_list2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_1_vc_rl_error_list2_is_in_range(uint32_t value);

/**
 * Pack message VC_RL_Info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rl_info_2_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rl_info_2_t *src_p,
    size_t size);

/**
 * Unpack message VC_RL_Info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rl_info_2_unpack(
    struct main_dbc_vc_rl_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RL_Info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rl_info_2_init(struct main_dbc_vc_rl_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rl_info_2_vc_rl_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_2_vc_rl_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_2_vc_rl_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_rl_info_2_vc_rl_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_2_vc_rl_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_2_vc_rl_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_info_2_vc_rl_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_2_vc_rl_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_2_vc_rl_temp_inverter_is_in_range(int16_t value);

/**
 * Pack message VC_RL_Info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rl_info_3_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rl_info_3_t *src_p,
    size_t size);

/**
 * Unpack message VC_RL_Info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rl_info_3_unpack(
    struct main_dbc_vc_rl_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RL_Info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rl_info_3_init(struct main_dbc_vc_rl_info_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rl_info_3_vc_rl_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rl_info_3_vc_rl_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rl_info_3_vc_rl_temp_motor_is_in_range(int16_t value);

/**
 * Pack message VC_RR_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rr_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rr_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message VC_RR_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rr_amk_setpoints_unpack(
    struct main_dbc_vc_rr_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RR_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rr_amk_setpoints_init(struct main_dbc_vc_rr_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_setpoints_vc_rr_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message VC_RR_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rr_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rr_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_RR_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rr_amk_actual_1_unpack(
    struct main_dbc_vc_rr_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RR_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rr_amk_actual_1_init(struct main_dbc_vc_rr_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_rr_amk_actual_1_vc_rr_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t main_dbc_vc_rr_amk_actual_1_vc_rr_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_amk_actual_1_vc_rr_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_amk_actual_1_vc_rr_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_amk_actual_1_vc_rr_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message VC_RR_Info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rr_info_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rr_info_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_RR_Info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rr_info_1_unpack(
    struct main_dbc_vc_rr_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RR_Info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rr_info_1_init(struct main_dbc_vc_rr_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rr_info_1_vc_rr_error_list1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_1_vc_rr_error_list1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_1_vc_rr_error_list1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rr_info_1_vc_rr_error_list2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_1_vc_rr_error_list2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_1_vc_rr_error_list2_is_in_range(uint32_t value);

/**
 * Pack message VC_RR_Info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rr_info_2_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rr_info_2_t *src_p,
    size_t size);

/**
 * Unpack message VC_RR_Info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rr_info_2_unpack(
    struct main_dbc_vc_rr_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RR_Info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rr_info_2_init(struct main_dbc_vc_rr_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_rr_info_2_vc_rr_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_2_vc_rr_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_2_vc_rr_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_rr_info_2_vc_rr_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_2_vc_rr_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_2_vc_rr_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_info_2_vc_rr_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_2_vc_rr_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_2_vc_rr_temp_inverter_is_in_range(int16_t value);

/**
 * Pack message VC_RR_Info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_rr_info_3_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_rr_info_3_t *src_p,
    size_t size);

/**
 * Unpack message VC_RR_Info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_rr_info_3_unpack(
    struct main_dbc_vc_rr_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_RR_Info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_rr_info_3_init(struct main_dbc_vc_rr_info_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_rr_info_3_vc_rr_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_rr_info_3_vc_rr_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_rr_info_3_vc_rr_temp_motor_is_in_range(int16_t value);

/**
 * Pack message VC_FL_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fl_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fl_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message VC_FL_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fl_amk_setpoints_unpack(
    struct main_dbc_vc_fl_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FL_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fl_amk_setpoints_init(struct main_dbc_vc_fl_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_setpoints_vc_fl_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message VC_FL_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fl_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fl_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_FL_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fl_amk_actual_1_unpack(
    struct main_dbc_vc_fl_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FL_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fl_amk_actual_1_init(struct main_dbc_vc_fl_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fl_amk_actual_1_vc_fl_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t main_dbc_vc_fl_amk_actual_1_vc_fl_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_amk_actual_1_vc_fl_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_amk_actual_1_vc_fl_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_amk_actual_1_vc_fl_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message VC_Fl_Info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fl_info_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fl_info_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_Fl_Info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fl_info_1_unpack(
    struct main_dbc_vc_fl_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_Fl_Info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fl_info_1_init(struct main_dbc_vc_fl_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fl_info_1_vc_fl_error_list1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_1_vc_fl_error_list1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_1_vc_fl_error_list1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fl_info_1_vc_fl_error_list2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_1_vc_fl_error_list2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_1_vc_fl_error_list2_is_in_range(uint32_t value);

/**
 * Pack message VC_FL_Info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fl_info_2_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fl_info_2_t *src_p,
    size_t size);

/**
 * Unpack message VC_FL_Info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fl_info_2_unpack(
    struct main_dbc_vc_fl_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FL_Info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fl_info_2_init(struct main_dbc_vc_fl_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fl_info_2_vc_fl_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_2_vc_fl_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_2_vc_fl_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_fl_info_2_vc_fl_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_2_vc_fl_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_2_vc_fl_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_info_2_vc_fl_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_2_vc_fl_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_2_vc_fl_temp_inverter_is_in_range(int16_t value);

/**
 * Pack message VC_FL_Info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fl_info_3_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fl_info_3_t *src_p,
    size_t size);

/**
 * Unpack message VC_FL_Info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fl_info_3_unpack(
    struct main_dbc_vc_fl_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FL_Info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fl_info_3_init(struct main_dbc_vc_fl_info_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fl_info_3_vc_fl_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fl_info_3_vc_fl_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fl_info_3_vc_fl_temp_motor_is_in_range(int16_t value);

/**
 * Pack message VC_FR_AMK_Setpoints.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fr_amk_setpoints_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fr_amk_setpoints_t *src_p,
    size_t size);

/**
 * Unpack message VC_FR_AMK_Setpoints.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fr_amk_setpoints_unpack(
    struct main_dbc_vc_fr_amk_setpoints_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FR_AMK_Setpoints.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fr_amk_setpoints_init(struct main_dbc_vc_fr_amk_setpoints_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_b_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_setpoint_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_setpoint_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_positive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_positive_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_positive_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_negative_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_negative_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_setpoints_vc_fr_amk_torque_limit_negative_is_in_range(int16_t value);

/**
 * Pack message VC_FR_AMK_Actual_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fr_amk_actual_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fr_amk_actual_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_FR_AMK_Actual_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fr_amk_actual_1_unpack(
    struct main_dbc_vc_fr_amk_actual_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FR_AMK_Actual_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fr_amk_actual_1_init(struct main_dbc_vc_fr_amk_actual_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t main_dbc_vc_fr_amk_actual_1_vc_fr_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t main_dbc_vc_fr_amk_actual_1_vc_fr_feedback_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_feedback_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_feedback_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_amk_actual_1_vc_fr_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_amk_actual_1_vc_fr_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_amk_actual_1_vc_fr_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message VC_FR_Info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fr_info_1_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fr_info_1_t *src_p,
    size_t size);

/**
 * Unpack message VC_FR_Info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fr_info_1_unpack(
    struct main_dbc_vc_fr_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FR_Info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fr_info_1_init(struct main_dbc_vc_fr_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fr_info_1_vc_fr_error_list1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_1_vc_fr_error_list1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_1_vc_fr_error_list1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fr_info_1_vc_fr_error_list2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_1_vc_fr_error_list2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_1_vc_fr_error_list2_is_in_range(uint32_t value);

/**
 * Pack message VC_FR_Info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fr_info_2_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fr_info_2_t *src_p,
    size_t size);

/**
 * Unpack message VC_FR_Info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fr_info_2_unpack(
    struct main_dbc_vc_fr_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FR_Info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fr_info_2_init(struct main_dbc_vc_fr_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t main_dbc_vc_fr_info_2_vc_fr_error_list3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_2_vc_fr_error_list3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_2_vc_fr_error_list3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t main_dbc_vc_fr_info_2_vc_fr_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_2_vc_fr_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_2_vc_fr_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_info_2_vc_fr_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_2_vc_fr_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_2_vc_fr_temp_inverter_is_in_range(int16_t value);

/**
 * Pack message VC_FR_Info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int main_dbc_vc_fr_info_3_pack(
    uint8_t *dst_p,
    const struct main_dbc_vc_fr_info_3_t *src_p,
    size_t size);

/**
 * Unpack message VC_FR_Info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int main_dbc_vc_fr_info_3_unpack(
    struct main_dbc_vc_fr_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_FR_Info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int main_dbc_vc_fr_info_3_init(struct main_dbc_vc_fr_info_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t main_dbc_vc_fr_info_3_vc_fr_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double main_dbc_vc_fr_info_3_vc_fr_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool main_dbc_vc_fr_info_3_vc_fr_temp_motor_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
