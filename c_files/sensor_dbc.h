/**
 * @file sensor_dbc.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Tue Feb 11 01:45:37 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef SENSOR_DBC_H
#define SENSOR_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SENSOR_DBC_PIT_PRESSURES_FRAME_ID (0x180u)
#define SENSOR_DBC_TIRE_TEMP_FL_M1_FRAME_ID (0x4c4u)
#define SENSOR_DBC_TIRE_TEMP_FL_M2_FRAME_ID (0x4c5u)
#define SENSOR_DBC_TIRE_TEMP_FL_M3_FRAME_ID (0x4c6u)
#define SENSOR_DBC_TIRE_TEMP_FL_M4_FRAME_ID (0x4c7u)
#define SENSOR_DBC_TIRE_TEMP_FL_M5_FRAME_ID (0x4c8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M1_FRAME_ID (0x4c9u)
#define SENSOR_DBC_TIRE_TEMP_FR_M2_FRAME_ID (0x4cau)
#define SENSOR_DBC_TIRE_TEMP_FR_M3_FRAME_ID (0x4cbu)
#define SENSOR_DBC_TIRE_TEMP_FR_M4_FRAME_ID (0x4ccu)
#define SENSOR_DBC_TIRE_TEMP_FR_M5_FRAME_ID (0x4cdu)
#define SENSOR_DBC_TIRE_TEMP_RL_M1_FRAME_ID (0x4ceu)
#define SENSOR_DBC_TIRE_TEMP_RL_M2_FRAME_ID (0x4cfu)
#define SENSOR_DBC_TIRE_TEMP_RL_M3_FRAME_ID (0x4d0u)
#define SENSOR_DBC_TIRE_TEMP_RL_M4_FRAME_ID (0x4d1u)
#define SENSOR_DBC_TIRE_TEMP_RL_M5_FRAME_ID (0x4d2u)
#define SENSOR_DBC_TIRE_TEMP_RR_M1_FRAME_ID (0x4d3u)
#define SENSOR_DBC_TIRE_TEMP_RR_M2_FRAME_ID (0x4d4u)
#define SENSOR_DBC_TIRE_TEMP_RR_M3_FRAME_ID (0x4d5u)
#define SENSOR_DBC_TIRE_TEMP_RR_M4_FRAME_ID (0x4d6u)
#define SENSOR_DBC_TIRE_TEMP_RR_M5_FRAME_ID (0x4d7u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_FRAME_ID (0x528u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_FRAME_ID (0x529u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_FRAME_ID (0x52au)
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_FRAME_ID (0x52bu)
#define SENSOR_DBC_ROTOR_TEMP_FL_M5_FRAME_ID (0x52cu)
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_FRAME_ID (0x52du)
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_FRAME_ID (0x52eu)
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_FRAME_ID (0x52fu)
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_FRAME_ID (0x530u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M5_FRAME_ID (0x531u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_FRAME_ID (0x532u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_FRAME_ID (0x533u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_FRAME_ID (0x534u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_FRAME_ID (0x535u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M5_FRAME_ID (0x536u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_FRAME_ID (0x537u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_FRAME_ID (0x538u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_FRAME_ID (0x539u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_FRAME_ID (0x53au)
#define SENSOR_DBC_ROTOR_TEMP_RR_M5_FRAME_ID (0x53bu)
#define SENSOR_DBC_VECTOR_NAV0_FRAME_ID (0x190u)
#define SENSOR_DBC_VECTOR_NAV1_FRAME_ID (0x191u)
#define SENSOR_DBC_VECTOR_NAV2_FRAME_ID (0x192u)
#define SENSOR_DBC_VECTOR_NAV3_FRAME_ID (0x193u)
#define SENSOR_DBC_VECTOR_NAV4_FRAME_ID (0x194u)
#define SENSOR_DBC_VECTOR_NAV5_FRAME_ID (0x195u)
#define SENSOR_DBC_VECTOR_NAV6_FRAME_ID (0x196u)
#define SENSOR_DBC_VECTOR_NAV7_FRAME_ID (0x197u)
#define SENSOR_DBC_VECTOR_NAV_FRAME_ID (0x198u)
#define SENSOR_DBC_SSDB_SUSPENSION_FL_M_FRAME_ID (0x1f4u)
#define SENSOR_DBC_SSDB_SUSPENSION_FR_M_FRAME_ID (0x1f5u)
#define SENSOR_DBC_SSDB_SUSPENSION_RL_M_FRAME_ID (0x1f6u)
#define SENSOR_DBC_SSDB_SUSPENSION_RR_M_FRAME_ID (0x1f7u)
#define SENSOR_DBC_VC_BRAKE_PRESSURE_REAR_FRAME_ID (0x64u)

/* Frame lengths in bytes. */
#define SENSOR_DBC_PIT_PRESSURES_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FL_M1_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FL_M2_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FL_M3_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FL_M4_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FL_M5_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M1_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M2_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M3_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M4_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_FR_M5_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RL_M1_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RL_M2_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RL_M3_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RL_M4_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RL_M5_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RR_M1_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RR_M2_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RR_M3_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RR_M4_LENGTH (8u)
#define SENSOR_DBC_TIRE_TEMP_RR_M5_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FL_M5_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_FR_M5_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RL_M5_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_LENGTH (8u)
#define SENSOR_DBC_ROTOR_TEMP_RR_M5_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV0_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV1_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV2_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV3_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV4_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV5_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV6_LENGTH (8u)
#define SENSOR_DBC_VECTOR_NAV7_LENGTH (4u)
#define SENSOR_DBC_VECTOR_NAV_LENGTH (64u)
#define SENSOR_DBC_SSDB_SUSPENSION_FL_M_LENGTH (2u)
#define SENSOR_DBC_SSDB_SUSPENSION_FR_M_LENGTH (2u)
#define SENSOR_DBC_SSDB_SUSPENSION_RL_M_LENGTH (2u)
#define SENSOR_DBC_SSDB_SUSPENSION_RR_M_LENGTH (2u)
#define SENSOR_DBC_VC_BRAKE_PRESSURE_REAR_LENGTH (2u)

/* Extended or standard frame types. */
#define SENSOR_DBC_PIT_PRESSURES_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FL_M1_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FL_M2_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FL_M3_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FL_M4_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FL_M5_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FR_M1_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FR_M2_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FR_M3_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FR_M4_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_FR_M5_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RL_M1_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RL_M2_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RL_M3_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RL_M4_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RL_M5_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RR_M1_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RR_M2_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RR_M3_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RR_M4_IS_EXTENDED (0)
#define SENSOR_DBC_TIRE_TEMP_RR_M5_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FL_M5_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_FR_M5_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RL_M5_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_IS_EXTENDED (0)
#define SENSOR_DBC_ROTOR_TEMP_RR_M5_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV0_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV1_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV2_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV3_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV4_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV5_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV6_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV7_IS_EXTENDED (0)
#define SENSOR_DBC_VECTOR_NAV_IS_EXTENDED (0)
#define SENSOR_DBC_SSDB_SUSPENSION_FL_M_IS_EXTENDED (0)
#define SENSOR_DBC_SSDB_SUSPENSION_FR_M_IS_EXTENDED (0)
#define SENSOR_DBC_SSDB_SUSPENSION_RL_M_IS_EXTENDED (0)
#define SENSOR_DBC_SSDB_SUSPENSION_RR_M_IS_EXTENDED (0)
#define SENSOR_DBC_VC_BRAKE_PRESSURE_REAR_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define SENSOR_DBC_PIT_PRESSURES_NAME "PIT_Pressures"
#define SENSOR_DBC_TIRE_TEMP_FL_M1_NAME "TireTemp_FL_M1"
#define SENSOR_DBC_TIRE_TEMP_FL_M2_NAME "TireTemp_FL_M2"
#define SENSOR_DBC_TIRE_TEMP_FL_M3_NAME "TireTemp_FL_M3"
#define SENSOR_DBC_TIRE_TEMP_FL_M4_NAME "TireTemp_FL_M4"
#define SENSOR_DBC_TIRE_TEMP_FL_M5_NAME "TireTemp_FL_M5"
#define SENSOR_DBC_TIRE_TEMP_FR_M1_NAME "TireTemp_FR_M1"
#define SENSOR_DBC_TIRE_TEMP_FR_M2_NAME "TireTemp_FR_M2"
#define SENSOR_DBC_TIRE_TEMP_FR_M3_NAME "TireTemp_FR_M3"
#define SENSOR_DBC_TIRE_TEMP_FR_M4_NAME "TireTemp_FR_M4"
#define SENSOR_DBC_TIRE_TEMP_FR_M5_NAME "TireTemp_FR_M5"
#define SENSOR_DBC_TIRE_TEMP_RL_M1_NAME "TireTemp_RL_M1"
#define SENSOR_DBC_TIRE_TEMP_RL_M2_NAME "TireTemp_RL_M2"
#define SENSOR_DBC_TIRE_TEMP_RL_M3_NAME "TireTemp_RL_M3"
#define SENSOR_DBC_TIRE_TEMP_RL_M4_NAME "TireTemp_RL_M4"
#define SENSOR_DBC_TIRE_TEMP_RL_M5_NAME "TireTemp_RL_M5"
#define SENSOR_DBC_TIRE_TEMP_RR_M1_NAME "TireTemp_RR_M1"
#define SENSOR_DBC_TIRE_TEMP_RR_M2_NAME "TireTemp_RR_M2"
#define SENSOR_DBC_TIRE_TEMP_RR_M3_NAME "TireTemp_RR_M3"
#define SENSOR_DBC_TIRE_TEMP_RR_M4_NAME "TireTemp_RR_M4"
#define SENSOR_DBC_TIRE_TEMP_RR_M5_NAME "TireTemp_RR_M5"
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_NAME "RotorTemp_FL_M1"
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_NAME "RotorTemp_FL_M2"
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_NAME "RotorTemp_FL_M3"
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_NAME "RotorTemp_FL_M4"
#define SENSOR_DBC_ROTOR_TEMP_FL_M5_NAME "RotorTemp_FL_M5"
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_NAME "RotorTemp_FR_M1"
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_NAME "RotorTemp_FR_M2"
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_NAME "RotorTemp_FR_M3"
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_NAME "RotorTemp_FR_M4"
#define SENSOR_DBC_ROTOR_TEMP_FR_M5_NAME "RotorTemp_FR_M5"
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_NAME "RotorTemp_RL_M1"
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_NAME "RotorTemp_RL_M2"
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_NAME "RotorTemp_RL_M3"
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_NAME "RotorTemp_RL_M4"
#define SENSOR_DBC_ROTOR_TEMP_RL_M5_NAME "RotorTemp_RL_M5"
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_NAME "RotorTemp_RR_M1"
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_NAME "RotorTemp_RR_M2"
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_NAME "RotorTemp_RR_M3"
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_NAME "RotorTemp_RR_M4"
#define SENSOR_DBC_ROTOR_TEMP_RR_M5_NAME "RotorTemp_RR_M5"
#define SENSOR_DBC_VECTOR_NAV0_NAME "VectorNav0"
#define SENSOR_DBC_VECTOR_NAV1_NAME "VectorNav1"
#define SENSOR_DBC_VECTOR_NAV2_NAME "VectorNav2"
#define SENSOR_DBC_VECTOR_NAV3_NAME "VectorNav3"
#define SENSOR_DBC_VECTOR_NAV4_NAME "VectorNav4"
#define SENSOR_DBC_VECTOR_NAV5_NAME "VectorNav5"
#define SENSOR_DBC_VECTOR_NAV6_NAME "VectorNav6"
#define SENSOR_DBC_VECTOR_NAV7_NAME "VectorNav7"
#define SENSOR_DBC_VECTOR_NAV_NAME "VectorNav"
#define SENSOR_DBC_SSDB_SUSPENSION_FL_M_NAME "SSDB_suspension_FL_M"
#define SENSOR_DBC_SSDB_SUSPENSION_FR_M_NAME "SSDB_suspension_FR_M"
#define SENSOR_DBC_SSDB_SUSPENSION_RL_M_NAME "SSDB_suspension_RL_M"
#define SENSOR_DBC_SSDB_SUSPENSION_RR_M_NAME "SSDB_suspension_RR_M"
#define SENSOR_DBC_VC_BRAKE_PRESSURE_REAR_NAME "VC_brake_pressure_rear"

/* Signal Names. */
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE_MUX_NAME "PIT_PressureMux"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE1_NAME "PIT_Pressure1"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE4_NAME "PIT_Pressure4"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE7_NAME "PIT_Pressure7"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE2_NAME "PIT_Pressure2"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE5_NAME "PIT_Pressure5"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE8_NAME "PIT_Pressure8"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE3_NAME "PIT_Pressure3"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE6_NAME "PIT_Pressure6"
#define SENSOR_DBC_PIT_PRESSURES_PIT_SENSOR_NUM_NAME "PIT_SensorNum"
#define SENSOR_DBC_PIT_PRESSURES_PIT_PRESSURE_RANGE_NAME "PIT_PressureRange"
#define SENSOR_DBC_PIT_PRESSURES_PIT_TEMPERATURE_NAME "PIT_Temperature"
#define SENSOR_DBC_TIRE_TEMP_FL_M1_TIRE_TEMP_FL_1_NAME "TireTemp_FL_1"
#define SENSOR_DBC_TIRE_TEMP_FL_M1_TIRE_TEMP_FL_2_NAME "TireTemp_FL_2"
#define SENSOR_DBC_TIRE_TEMP_FL_M1_TIRE_TEMP_FL_3_NAME "TireTemp_FL_3"
#define SENSOR_DBC_TIRE_TEMP_FL_M1_TIRE_TEMP_FL_4_NAME "TireTemp_FL_4"
#define SENSOR_DBC_TIRE_TEMP_FL_M2_TIRE_TEMP_FL_5_NAME "TireTemp_FL_5"
#define SENSOR_DBC_TIRE_TEMP_FL_M2_TIRE_TEMP_FL_6_NAME "TireTemp_FL_6"
#define SENSOR_DBC_TIRE_TEMP_FL_M2_TIRE_TEMP_FL_7_NAME "TireTemp_FL_7"
#define SENSOR_DBC_TIRE_TEMP_FL_M2_TIRE_TEMP_FL_8_NAME "TireTemp_FL_8"
#define SENSOR_DBC_TIRE_TEMP_FL_M3_TIRE_TEMP_FL_9_NAME "TireTemp_FL_9"
#define SENSOR_DBC_TIRE_TEMP_FL_M3_TIRE_TEMP_FL_10_NAME "TireTemp_FL_10"
#define SENSOR_DBC_TIRE_TEMP_FL_M3_TIRE_TEMP_FL_11_NAME "TireTemp_FL_11"
#define SENSOR_DBC_TIRE_TEMP_FL_M3_TIRE_TEMP_FL_12_NAME "TireTemp_FL_12"
#define SENSOR_DBC_TIRE_TEMP_FL_M4_TIRE_TEMP_FL_13_NAME "TireTemp_FL_13"
#define SENSOR_DBC_TIRE_TEMP_FL_M4_TIRE_TEMP_FL_14_NAME "TireTemp_FL_14"
#define SENSOR_DBC_TIRE_TEMP_FL_M4_TIRE_TEMP_FL_15_NAME "TireTemp_FL_15"
#define SENSOR_DBC_TIRE_TEMP_FL_M4_TIRE_TEMP_FL_16_NAME "TireTemp_FL_16"
#define SENSOR_DBC_TIRE_TEMP_FL_M5_TIRE_TEMP_FL_SENSOR_NAME "TireTemp_FL_Sensor"
#define SENSOR_DBC_TIRE_TEMP_FR_M1_TIRE_TEMP_FR_1_NAME "TireTemp_FR_1"
#define SENSOR_DBC_TIRE_TEMP_FR_M1_TIRE_TEMP_FR_2_NAME "TireTemp_FR_2"
#define SENSOR_DBC_TIRE_TEMP_FR_M1_TIRE_TEMP_FR_3_NAME "TireTemp_FR_3"
#define SENSOR_DBC_TIRE_TEMP_FR_M1_TIRE_TEMP_FR_4_NAME "TireTemp_FR_4"
#define SENSOR_DBC_TIRE_TEMP_FR_M2_TIRE_TEMP_FR_5_NAME "TireTemp_FR_5"
#define SENSOR_DBC_TIRE_TEMP_FR_M2_TIRE_TEMP_FR_6_NAME "TireTemp_FR_6"
#define SENSOR_DBC_TIRE_TEMP_FR_M2_TIRE_TEMP_FR_7_NAME "TireTemp_FR_7"
#define SENSOR_DBC_TIRE_TEMP_FR_M2_TIRE_TEMP_FR_8_NAME "TireTemp_FR_8"
#define SENSOR_DBC_TIRE_TEMP_FR_M3_TIRE_TEMP_FR_9_NAME "TireTemp_FR_9"
#define SENSOR_DBC_TIRE_TEMP_FR_M3_TIRE_TEMP_FR_10_NAME "TireTemp_FR_10"
#define SENSOR_DBC_TIRE_TEMP_FR_M3_TIRE_TEMP_FR_11_NAME "TireTemp_FR_11"
#define SENSOR_DBC_TIRE_TEMP_FR_M3_TIRE_TEMP_FR_12_NAME "TireTemp_FR_12"
#define SENSOR_DBC_TIRE_TEMP_FR_M4_TIRE_TEMP_FR_13_NAME "TireTemp_FR_13"
#define SENSOR_DBC_TIRE_TEMP_FR_M4_TIRE_TEMP_FR_14_NAME "TireTemp_FR_14"
#define SENSOR_DBC_TIRE_TEMP_FR_M4_TIRE_TEMP_FR_15_NAME "TireTemp_FR_15"
#define SENSOR_DBC_TIRE_TEMP_FR_M4_TIRE_TEMP_FR_16_NAME "TireTemp_FR_16"
#define SENSOR_DBC_TIRE_TEMP_FR_M5_TIRE_TEMP_FR_SENSOR_NAME "TireTemp_FR_Sensor"
#define SENSOR_DBC_TIRE_TEMP_RL_M1_TIRE_TEMP_RL_1_NAME "TireTemp_RL_1"
#define SENSOR_DBC_TIRE_TEMP_RL_M1_TIRE_TEMP_RL_2_NAME "TireTemp_RL_2"
#define SENSOR_DBC_TIRE_TEMP_RL_M1_TIRE_TEMP_RL_3_NAME "TireTemp_RL_3"
#define SENSOR_DBC_TIRE_TEMP_RL_M1_TIRE_TEMP_RL_4_NAME "TireTemp_RL_4"
#define SENSOR_DBC_TIRE_TEMP_RL_M2_TIRE_TEMP_RL_5_NAME "TireTemp_RL_5"
#define SENSOR_DBC_TIRE_TEMP_RL_M2_TIRE_TEMP_RL_6_NAME "TireTemp_RL_6"
#define SENSOR_DBC_TIRE_TEMP_RL_M2_TIRE_TEMP_RL_7_NAME "TireTemp_RL_7"
#define SENSOR_DBC_TIRE_TEMP_RL_M2_TIRE_TEMP_RL_8_NAME "TireTemp_RL_8"
#define SENSOR_DBC_TIRE_TEMP_RL_M3_TIRE_TEMP_RL_9_NAME "TireTemp_RL_9"
#define SENSOR_DBC_TIRE_TEMP_RL_M3_TIRE_TEMP_RL_10_NAME "TireTemp_RL_10"
#define SENSOR_DBC_TIRE_TEMP_RL_M3_TIRE_TEMP_RL_11_NAME "TireTemp_RL_11"
#define SENSOR_DBC_TIRE_TEMP_RL_M3_TIRE_TEMP_RL_12_NAME "TireTemp_RL_12"
#define SENSOR_DBC_TIRE_TEMP_RL_M4_TIRE_TEMP_RL_13_NAME "TireTemp_RL_13"
#define SENSOR_DBC_TIRE_TEMP_RL_M4_TIRE_TEMP_RL_14_NAME "TireTemp_RL_14"
#define SENSOR_DBC_TIRE_TEMP_RL_M4_TIRE_TEMP_RL_15_NAME "TireTemp_RL_15"
#define SENSOR_DBC_TIRE_TEMP_RL_M4_TIRE_TEMP_RL_16_NAME "TireTemp_RL_16"
#define SENSOR_DBC_TIRE_TEMP_RL_M5_TIRE_TEMP_RL_SENSOR_NAME "TireTemp_RL_Sensor"
#define SENSOR_DBC_TIRE_TEMP_RR_M1_TIRE_TEMP_RR_1_NAME "TireTemp_RR_1"
#define SENSOR_DBC_TIRE_TEMP_RR_M1_TIRE_TEMP_RR_2_NAME "TireTemp_RR_2"
#define SENSOR_DBC_TIRE_TEMP_RR_M1_TIRE_TEMP_RR_3_NAME "TireTemp_RR_3"
#define SENSOR_DBC_TIRE_TEMP_RR_M1_TIRE_TEMP_RR_4_NAME "TireTemp_RR_4"
#define SENSOR_DBC_TIRE_TEMP_RR_M2_TIRE_TEMP_RR_5_NAME "TireTemp_RR_5"
#define SENSOR_DBC_TIRE_TEMP_RR_M2_TIRE_TEMP_RR_6_NAME "TireTemp_RR_6"
#define SENSOR_DBC_TIRE_TEMP_RR_M2_TIRE_TEMP_RR_7_NAME "TireTemp_RR_7"
#define SENSOR_DBC_TIRE_TEMP_RR_M2_TIRE_TEMP_RR_8_NAME "TireTemp_RR_8"
#define SENSOR_DBC_TIRE_TEMP_RR_M3_TIRE_TEMP_RR_9_NAME "TireTemp_RR_9"
#define SENSOR_DBC_TIRE_TEMP_RR_M3_TIRE_TEMP_RR_10_NAME "TireTemp_RR_10"
#define SENSOR_DBC_TIRE_TEMP_RR_M3_TIRE_TEMP_RR_11_NAME "TireTemp_RR_11"
#define SENSOR_DBC_TIRE_TEMP_RR_M3_TIRE_TEMP_RR_12_NAME "TireTemp_RR_12"
#define SENSOR_DBC_TIRE_TEMP_RR_M4_TIRE_TEMP_RR_13_NAME "TireTemp_RR_13"
#define SENSOR_DBC_TIRE_TEMP_RR_M4_TIRE_TEMP_RR_14_NAME "TireTemp_RR_14"
#define SENSOR_DBC_TIRE_TEMP_RR_M4_TIRE_TEMP_RR_15_NAME "TireTemp_RR_15"
#define SENSOR_DBC_TIRE_TEMP_RR_M4_TIRE_TEMP_RR_16_NAME "TireTemp_RR_16"
#define SENSOR_DBC_TIRE_TEMP_RR_M5_TIRE_TEMP_RR_SENSOR_NAME "TireTemp_RR_Sensor"
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_ROTOR_TEMP_FL_1_NAME "RotorTemp_FL_1"
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_ROTOR_TEMP_FL_2_NAME "RotorTemp_FL_2"
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_ROTOR_TEMP_FL_3_NAME "RotorTemp_FL_3"
#define SENSOR_DBC_ROTOR_TEMP_FL_M1_ROTOR_TEMP_FL_4_NAME "RotorTemp_FL_4"
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_ROTOR_TEMP_FL_5_NAME "RotorTemp_FL_5"
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_ROTOR_TEMP_FL_6_NAME "RotorTemp_FL_6"
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_ROTOR_TEMP_FL_7_NAME "RotorTemp_FL_7"
#define SENSOR_DBC_ROTOR_TEMP_FL_M2_ROTOR_TEMP_FL_8_NAME "RotorTemp_FL_8"
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_ROTOR_TEMP_FL_9_NAME "RotorTemp_FL_9"
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_ROTOR_TEMP_FL_10_NAME "RotorTemp_FL_10"
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_ROTOR_TEMP_FL_11_NAME "RotorTemp_FL_11"
#define SENSOR_DBC_ROTOR_TEMP_FL_M3_ROTOR_TEMP_FL_12_NAME "RotorTemp_FL_12"
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_ROTOR_TEMP_FL_13_NAME "RotorTemp_FL_13"
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_ROTOR_TEMP_FL_14_NAME "RotorTemp_FL_14"
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_ROTOR_TEMP_FL_15_NAME "RotorTemp_FL_15"
#define SENSOR_DBC_ROTOR_TEMP_FL_M4_ROTOR_TEMP_FL_16_NAME "RotorTemp_FL_16"
#define SENSOR_DBC_ROTOR_TEMP_FL_M5_ROTOR_TEMP_FL_SENSOR_NAME "RotorTemp_FL_Sensor"
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_ROTOR_TEMP_FR_1_NAME "RotorTemp_FR_1"
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_ROTOR_TEMP_FR_2_NAME "RotorTemp_FR_2"
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_ROTOR_TEMP_FR_3_NAME "RotorTemp_FR_3"
#define SENSOR_DBC_ROTOR_TEMP_FR_M1_ROTOR_TEMP_FR_4_NAME "RotorTemp_FR_4"
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_ROTOR_TEMP_FR_5_NAME "RotorTemp_FR_5"
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_ROTOR_TEMP_FR_6_NAME "RotorTemp_FR_6"
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_ROTOR_TEMP_FR_7_NAME "RotorTemp_FR_7"
#define SENSOR_DBC_ROTOR_TEMP_FR_M2_ROTOR_TEMP_FR_8_NAME "RotorTemp_FR_8"
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_ROTOR_TEMP_FR_9_NAME "RotorTemp_FR_9"
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_ROTOR_TEMP_FR_10_NAME "RotorTemp_FR_10"
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_ROTOR_TEMP_FR_11_NAME "RotorTemp_FR_11"
#define SENSOR_DBC_ROTOR_TEMP_FR_M3_ROTOR_TEMP_FR_12_NAME "RotorTemp_FR_12"
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_ROTOR_TEMP_FR_13_NAME "RotorTemp_FR_13"
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_ROTOR_TEMP_FR_14_NAME "RotorTemp_FR_14"
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_ROTOR_TEMP_FR_15_NAME "RotorTemp_FR_15"
#define SENSOR_DBC_ROTOR_TEMP_FR_M4_ROTOR_TEMP_FR_16_NAME "RotorTemp_FR_16"
#define SENSOR_DBC_ROTOR_TEMP_FR_M5_ROTOR_TEMP_FR_SENSOR_NAME "RotorTemp_FR_Sensor"
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_ROTOR_TEMP_RL_1_NAME "RotorTemp_RL_1"
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_ROTOR_TEMP_RL_2_NAME "RotorTemp_RL_2"
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_ROTOR_TEMP_RL_3_NAME "RotorTemp_RL_3"
#define SENSOR_DBC_ROTOR_TEMP_RL_M1_ROTOR_TEMP_RL_4_NAME "RotorTemp_RL_4"
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_ROTOR_TEMP_RL_5_NAME "RotorTemp_RL_5"
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_ROTOR_TEMP_RL_6_NAME "RotorTemp_RL_6"
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_ROTOR_TEMP_RL_7_NAME "RotorTemp_RL_7"
#define SENSOR_DBC_ROTOR_TEMP_RL_M2_ROTOR_TEMP_RL_8_NAME "RotorTemp_RL_8"
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_ROTOR_TEMP_RL_9_NAME "RotorTemp_RL_9"
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_ROTOR_TEMP_RL_10_NAME "RotorTemp_RL_10"
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_ROTOR_TEMP_RL_11_NAME "RotorTemp_RL_11"
#define SENSOR_DBC_ROTOR_TEMP_RL_M3_ROTOR_TEMP_RL_12_NAME "RotorTemp_RL_12"
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_ROTOR_TEMP_RL_13_NAME "RotorTemp_RL_13"
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_ROTOR_TEMP_RL_14_NAME "RotorTemp_RL_14"
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_ROTOR_TEMP_RL_15_NAME "RotorTemp_RL_15"
#define SENSOR_DBC_ROTOR_TEMP_RL_M4_ROTOR_TEMP_RL_16_NAME "RotorTemp_RL_16"
#define SENSOR_DBC_ROTOR_TEMP_RL_M5_ROTOR_TEMP_RL_SENSOR_NAME "RotorTemp_RL_Sensor"
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_ROTOR_TEMP_RR_1_NAME "RotorTemp_RR_1"
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_ROTOR_TEMP_RR_2_NAME "RotorTemp_RR_2"
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_ROTOR_TEMP_RR_3_NAME "RotorTemp_RR_3"
#define SENSOR_DBC_ROTOR_TEMP_RR_M1_ROTOR_TEMP_RR_4_NAME "RotorTemp_RR_4"
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_ROTOR_TEMP_RR_5_NAME "RotorTemp_RR_5"
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_ROTOR_TEMP_RR_6_NAME "RotorTemp_RR_6"
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_ROTOR_TEMP_RR_7_NAME "RotorTemp_RR_7"
#define SENSOR_DBC_ROTOR_TEMP_RR_M2_ROTOR_TEMP_RR_8_NAME "RotorTemp_RR_8"
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_ROTOR_TEMP_RR_9_NAME "RotorTemp_RR_9"
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_ROTOR_TEMP_RR_10_NAME "RotorTemp_RR_10"
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_ROTOR_TEMP_RR_11_NAME "RotorTemp_RR_11"
#define SENSOR_DBC_ROTOR_TEMP_RR_M3_ROTOR_TEMP_RR_12_NAME "RotorTemp_RR_12"
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_ROTOR_TEMP_RR_13_NAME "RotorTemp_RR_13"
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_ROTOR_TEMP_RR_14_NAME "RotorTemp_RR_14"
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_ROTOR_TEMP_RR_15_NAME "RotorTemp_RR_15"
#define SENSOR_DBC_ROTOR_TEMP_RR_M4_ROTOR_TEMP_RR_16_NAME "RotorTemp_RR_16"
#define SENSOR_DBC_ROTOR_TEMP_RR_M5_ROTOR_TEMP_RR_SENSOR_NAME "RotorTemp_RR_Sensor"
#define SENSOR_DBC_VECTOR_NAV0_VECTOR_NAV_ACCEL_X_NAME "VectorNav_AccelX"
#define SENSOR_DBC_VECTOR_NAV0_VECTOR_NAV_ACCEL_Y_NAME "VectorNav_AccelY"
#define SENSOR_DBC_VECTOR_NAV1_VECTOR_NAV_ACCEL_Z_NAME "VectorNav_AccelZ"
#define SENSOR_DBC_VECTOR_NAV1_VECTOR_NAV_ANGULAR_RATE_X_NAME "VectorNav_AngularRateX"
#define SENSOR_DBC_VECTOR_NAV2_VECTOR_NAV_ANGULAR_RATE_Y_NAME "VectorNav_AngularRateY"
#define SENSOR_DBC_VECTOR_NAV2_VECTOR_NAV_ANGULAR_RATE_Z_NAME "VectorNav_AngularRateZ"
#define SENSOR_DBC_VECTOR_NAV3_VECTOR_NAV_POS_LLA_L_NAME "VectorNav_PosLlaL"
#define SENSOR_DBC_VECTOR_NAV4_VECTOR_NAV_POS_LLA_O_NAME "VectorNav_PosLlaO"
#define SENSOR_DBC_VECTOR_NAV5_VECTOR_NAV_POS_LLA_A_NAME "VectorNav_PosLlaA"
#define SENSOR_DBC_VECTOR_NAV6_VECTOR_NAV_VEL_NED_N_NAME "VectorNav_VelNedN"
#define SENSOR_DBC_VECTOR_NAV6_VECTOR_NAV_VEL_NED_E_NAME "VectorNav_VelNedE"
#define SENSOR_DBC_VECTOR_NAV7_VECTOR_NAV_VEL_NED_D_NAME "VectorNav_VelNedD"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ACCEL_X_NAME "VectorNav_AccelX"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ACCEL_Y_NAME "VectorNav_AccelY"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ACCEL_Z_NAME "VectorNav_AccelZ"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ANGULAR_RATE_X_NAME "VectorNav_AngularRateX"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ANGULAR_RATE_Y_NAME "VectorNav_AngularRateY"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_ANGULAR_RATE_Z_NAME "VectorNav_AngularRateZ"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_POS_LLA_L_NAME "VectorNav_PosLlaL"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_POS_LLA_O_NAME "VectorNav_PosLlaO"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_POS_LLA_A_NAME "VectorNav_PosLlaA"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_VEL_NED_N_NAME "VectorNav_VelNedN"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_VEL_NED_E_NAME "VectorNav_VelNedE"
#define SENSOR_DBC_VECTOR_NAV_VECTOR_NAV_VEL_NED_D_NAME "VectorNav_VelNedD"
#define SENSOR_DBC_SSDB_SUSPENSION_FL_M_SSDB_SUSPENSION_FL_NAME "SSDB_suspension_FL"
#define SENSOR_DBC_SSDB_SUSPENSION_FR_M_SSDB_SUSPENSION_FR_NAME "SSDB_suspension_FR"
#define SENSOR_DBC_SSDB_SUSPENSION_RL_M_SSDB_SUSPENSION_RL_NAME "SSDB_suspension_RL"
#define SENSOR_DBC_SSDB_SUSPENSION_RR_M_SSDB_SUSPENSION_RR_NAME "SSDB_suspension_RR"
#define SENSOR_DBC_VC_BRAKE_PRESSURE_REAR_VC_BRAKE_PRESSURE_REAR_NAME "VC_brake_pressure_rear"

/**
 * Signals in message PIT_Pressures.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_pit_pressures_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pit_pressure_mux;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure1;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure4;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure7;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure2;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure5;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure8;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure3;

    /**
     * Range: 0..60000 (600..1200 mbar)
     * Scale: 0.01
     * Offset: 600
     */
    uint16_t pit_pressure6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pit_sensor_num;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pit_pressure_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t pit_temperature;
};

/**
 * Signals in message TireTemp_FL_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fl_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_4;
};

/**
 * Signals in message TireTemp_FL_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fl_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_8;
};

/**
 * Signals in message TireTemp_FL_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fl_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_12;
};

/**
 * Signals in message TireTemp_FL_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fl_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_16;
};

/**
 * Signals in message TireTemp_FL_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fl_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fl_sensor;
};

/**
 * Signals in message TireTemp_FR_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fr_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_4;
};

/**
 * Signals in message TireTemp_FR_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fr_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_8;
};

/**
 * Signals in message TireTemp_FR_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fr_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_12;
};

/**
 * Signals in message TireTemp_FR_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fr_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_16;
};

/**
 * Signals in message TireTemp_FR_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_fr_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_fr_sensor;
};

/**
 * Signals in message TireTemp_RL_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rl_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_4;
};

/**
 * Signals in message TireTemp_RL_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rl_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_8;
};

/**
 * Signals in message TireTemp_RL_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rl_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_12;
};

/**
 * Signals in message TireTemp_RL_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rl_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_16;
};

/**
 * Signals in message TireTemp_RL_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rl_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rl_sensor;
};

/**
 * Signals in message TireTemp_RR_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rr_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_4;
};

/**
 * Signals in message TireTemp_RR_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rr_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_8;
};

/**
 * Signals in message TireTemp_RR_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rr_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_12;
};

/**
 * Signals in message TireTemp_RR_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rr_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_16;
};

/**
 * Signals in message TireTemp_RR_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_tire_temp_rr_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t tire_temp_rr_sensor;
};

/**
 * Signals in message RotorTemp_FL_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fl_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_4;
};

/**
 * Signals in message RotorTemp_FL_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fl_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_8;
};

/**
 * Signals in message RotorTemp_FL_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fl_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_12;
};

/**
 * Signals in message RotorTemp_FL_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fl_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_16;
};

/**
 * Signals in message RotorTemp_FL_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fl_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fl_sensor;
};

/**
 * Signals in message RotorTemp_FR_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fr_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_4;
};

/**
 * Signals in message RotorTemp_FR_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fr_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_8;
};

/**
 * Signals in message RotorTemp_FR_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fr_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_12;
};

/**
 * Signals in message RotorTemp_FR_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fr_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_16;
};

/**
 * Signals in message RotorTemp_FR_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_fr_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_fr_sensor;
};

/**
 * Signals in message RotorTemp_RL_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rl_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_4;
};

/**
 * Signals in message RotorTemp_RL_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rl_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_8;
};

/**
 * Signals in message RotorTemp_RL_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rl_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_12;
};

/**
 * Signals in message RotorTemp_RL_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rl_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_16;
};

/**
 * Signals in message RotorTemp_RL_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rl_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rl_sensor;
};

/**
 * Signals in message RotorTemp_RR_M1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rr_m1_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_1;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_2;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_3;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_4;
};

/**
 * Signals in message RotorTemp_RR_M2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rr_m2_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_5;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_6;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_7;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_8;
};

/**
 * Signals in message RotorTemp_RR_M3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rr_m3_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_9;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_10;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_11;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_12;
};

/**
 * Signals in message RotorTemp_RR_M4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rr_m4_t {
    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_13;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_14;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_15;

    /**
     * Range: 800..10500 (-20..950 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_16;
};

/**
 * Signals in message RotorTemp_RR_M5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_rotor_temp_rr_m5_t {
    /**
     * Range: 800..1850 (-20..85 degC)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rotor_temp_rr_sensor;
};

/**
 * Signals in message VectorNav0.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav0_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_x;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_y;
};

/**
 * Signals in message VectorNav1.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_z;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_x;
};

/**
 * Signals in message VectorNav2.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_y;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_z;
};

/**
 * Signals in message VectorNav3.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_l;
};

/**
 * Signals in message VectorNav4.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_o;
};

/**
 * Signals in message VectorNav5.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_a;
};

/**
 * Signals in message VectorNav6.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_e;
};

/**
 * Signals in message VectorNav7.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav7_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_d;
};

/**
 * Signals in message VectorNav.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vector_nav_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_x;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_y;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_accel_z;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_x;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_y;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_angular_rate_z;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_o;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double vector_nav_pos_lla_a;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_e;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float vector_nav_vel_ned_d;
};

/**
 * Signals in message SSDB_suspension_FL_M.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_ssdb_suspension_fl_m_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_suspension_fl;
};

/**
 * Signals in message SSDB_suspension_FR_M.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_ssdb_suspension_fr_m_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_suspension_fr;
};

/**
 * Signals in message SSDB_suspension_RL_M.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_ssdb_suspension_rl_m_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_suspension_rl;
};

/**
 * Signals in message SSDB_suspension_RR_M.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_ssdb_suspension_rr_m_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ssdb_suspension_rr;
};

/**
 * Signals in message VC_brake_pressure_rear.
 *
 * All signal values are as on the CAN bus.
 */
struct sensor_dbc_vc_brake_pressure_rear_t {
    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_brake_pressure_rear;
};

/**
 * Pack message PIT_Pressures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_pit_pressures_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_pit_pressures_t *src_p,
    size_t size);

/**
 * Unpack message PIT_Pressures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_pit_pressures_unpack(
    struct sensor_dbc_pit_pressures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PIT_Pressures.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_pit_pressures_init(struct sensor_dbc_pit_pressures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sensor_dbc_pit_pressures_pit_pressure_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_pressure6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_pit_pressures_pit_sensor_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_sensor_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_sensor_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sensor_dbc_pit_pressures_pit_pressure_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_pressure_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_pressure_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t sensor_dbc_pit_pressures_pit_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_pit_pressures_pit_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_pit_pressures_pit_temperature_is_in_range(int8_t value);

/**
 * Pack message TireTemp_FL_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fl_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fl_m1_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FL_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fl_m1_unpack(
    struct sensor_dbc_tire_temp_fl_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FL_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fl_m1_init(struct sensor_dbc_tire_temp_fl_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m1_tire_temp_fl_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m1_tire_temp_fl_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m1_tire_temp_fl_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m1_tire_temp_fl_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m1_tire_temp_fl_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m1_tire_temp_fl_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m1_tire_temp_fl_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m1_tire_temp_fl_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m1_tire_temp_fl_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m1_tire_temp_fl_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m1_tire_temp_fl_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m1_tire_temp_fl_4_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FL_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fl_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fl_m2_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FL_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fl_m2_unpack(
    struct sensor_dbc_tire_temp_fl_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FL_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fl_m2_init(struct sensor_dbc_tire_temp_fl_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m2_tire_temp_fl_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m2_tire_temp_fl_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m2_tire_temp_fl_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m2_tire_temp_fl_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m2_tire_temp_fl_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m2_tire_temp_fl_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m2_tire_temp_fl_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m2_tire_temp_fl_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m2_tire_temp_fl_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m2_tire_temp_fl_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m2_tire_temp_fl_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m2_tire_temp_fl_8_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FL_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fl_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fl_m3_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FL_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fl_m3_unpack(
    struct sensor_dbc_tire_temp_fl_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FL_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fl_m3_init(struct sensor_dbc_tire_temp_fl_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m3_tire_temp_fl_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m3_tire_temp_fl_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m3_tire_temp_fl_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m3_tire_temp_fl_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m3_tire_temp_fl_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m3_tire_temp_fl_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m3_tire_temp_fl_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m3_tire_temp_fl_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m3_tire_temp_fl_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m3_tire_temp_fl_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m3_tire_temp_fl_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m3_tire_temp_fl_12_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FL_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fl_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fl_m4_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FL_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fl_m4_unpack(
    struct sensor_dbc_tire_temp_fl_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FL_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fl_m4_init(struct sensor_dbc_tire_temp_fl_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m4_tire_temp_fl_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m4_tire_temp_fl_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m4_tire_temp_fl_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m4_tire_temp_fl_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m4_tire_temp_fl_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m4_tire_temp_fl_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m4_tire_temp_fl_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m4_tire_temp_fl_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m4_tire_temp_fl_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m4_tire_temp_fl_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m4_tire_temp_fl_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m4_tire_temp_fl_16_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FL_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fl_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fl_m5_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FL_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fl_m5_unpack(
    struct sensor_dbc_tire_temp_fl_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FL_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fl_m5_init(struct sensor_dbc_tire_temp_fl_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fl_m5_tire_temp_fl_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fl_m5_tire_temp_fl_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fl_m5_tire_temp_fl_sensor_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FR_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fr_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fr_m1_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FR_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fr_m1_unpack(
    struct sensor_dbc_tire_temp_fr_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FR_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fr_m1_init(struct sensor_dbc_tire_temp_fr_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m1_tire_temp_fr_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m1_tire_temp_fr_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m1_tire_temp_fr_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m1_tire_temp_fr_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m1_tire_temp_fr_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m1_tire_temp_fr_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m1_tire_temp_fr_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m1_tire_temp_fr_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m1_tire_temp_fr_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m1_tire_temp_fr_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m1_tire_temp_fr_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m1_tire_temp_fr_4_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FR_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fr_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fr_m2_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FR_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fr_m2_unpack(
    struct sensor_dbc_tire_temp_fr_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FR_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fr_m2_init(struct sensor_dbc_tire_temp_fr_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m2_tire_temp_fr_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m2_tire_temp_fr_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m2_tire_temp_fr_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m2_tire_temp_fr_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m2_tire_temp_fr_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m2_tire_temp_fr_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m2_tire_temp_fr_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m2_tire_temp_fr_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m2_tire_temp_fr_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m2_tire_temp_fr_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m2_tire_temp_fr_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m2_tire_temp_fr_8_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FR_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fr_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fr_m3_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FR_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fr_m3_unpack(
    struct sensor_dbc_tire_temp_fr_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FR_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fr_m3_init(struct sensor_dbc_tire_temp_fr_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m3_tire_temp_fr_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m3_tire_temp_fr_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m3_tire_temp_fr_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m3_tire_temp_fr_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m3_tire_temp_fr_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m3_tire_temp_fr_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m3_tire_temp_fr_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m3_tire_temp_fr_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m3_tire_temp_fr_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m3_tire_temp_fr_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m3_tire_temp_fr_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m3_tire_temp_fr_12_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FR_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fr_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fr_m4_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FR_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fr_m4_unpack(
    struct sensor_dbc_tire_temp_fr_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FR_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fr_m4_init(struct sensor_dbc_tire_temp_fr_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m4_tire_temp_fr_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m4_tire_temp_fr_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m4_tire_temp_fr_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m4_tire_temp_fr_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m4_tire_temp_fr_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m4_tire_temp_fr_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m4_tire_temp_fr_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m4_tire_temp_fr_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m4_tire_temp_fr_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m4_tire_temp_fr_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m4_tire_temp_fr_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m4_tire_temp_fr_16_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_FR_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_fr_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_fr_m5_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_FR_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_fr_m5_unpack(
    struct sensor_dbc_tire_temp_fr_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_FR_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_fr_m5_init(struct sensor_dbc_tire_temp_fr_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_fr_m5_tire_temp_fr_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_fr_m5_tire_temp_fr_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_fr_m5_tire_temp_fr_sensor_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RL_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rl_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rl_m1_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RL_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rl_m1_unpack(
    struct sensor_dbc_tire_temp_rl_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RL_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rl_m1_init(struct sensor_dbc_tire_temp_rl_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m1_tire_temp_rl_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m1_tire_temp_rl_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m1_tire_temp_rl_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m1_tire_temp_rl_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m1_tire_temp_rl_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m1_tire_temp_rl_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m1_tire_temp_rl_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m1_tire_temp_rl_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m1_tire_temp_rl_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m1_tire_temp_rl_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m1_tire_temp_rl_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m1_tire_temp_rl_4_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RL_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rl_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rl_m2_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RL_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rl_m2_unpack(
    struct sensor_dbc_tire_temp_rl_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RL_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rl_m2_init(struct sensor_dbc_tire_temp_rl_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m2_tire_temp_rl_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m2_tire_temp_rl_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m2_tire_temp_rl_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m2_tire_temp_rl_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m2_tire_temp_rl_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m2_tire_temp_rl_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m2_tire_temp_rl_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m2_tire_temp_rl_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m2_tire_temp_rl_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m2_tire_temp_rl_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m2_tire_temp_rl_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m2_tire_temp_rl_8_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RL_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rl_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rl_m3_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RL_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rl_m3_unpack(
    struct sensor_dbc_tire_temp_rl_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RL_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rl_m3_init(struct sensor_dbc_tire_temp_rl_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m3_tire_temp_rl_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m3_tire_temp_rl_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m3_tire_temp_rl_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m3_tire_temp_rl_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m3_tire_temp_rl_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m3_tire_temp_rl_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m3_tire_temp_rl_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m3_tire_temp_rl_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m3_tire_temp_rl_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m3_tire_temp_rl_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m3_tire_temp_rl_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m3_tire_temp_rl_12_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RL_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rl_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rl_m4_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RL_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rl_m4_unpack(
    struct sensor_dbc_tire_temp_rl_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RL_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rl_m4_init(struct sensor_dbc_tire_temp_rl_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m4_tire_temp_rl_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m4_tire_temp_rl_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m4_tire_temp_rl_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m4_tire_temp_rl_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m4_tire_temp_rl_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m4_tire_temp_rl_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m4_tire_temp_rl_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m4_tire_temp_rl_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m4_tire_temp_rl_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m4_tire_temp_rl_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m4_tire_temp_rl_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m4_tire_temp_rl_16_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RL_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rl_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rl_m5_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RL_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rl_m5_unpack(
    struct sensor_dbc_tire_temp_rl_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RL_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rl_m5_init(struct sensor_dbc_tire_temp_rl_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rl_m5_tire_temp_rl_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rl_m5_tire_temp_rl_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rl_m5_tire_temp_rl_sensor_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RR_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rr_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rr_m1_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RR_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rr_m1_unpack(
    struct sensor_dbc_tire_temp_rr_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RR_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rr_m1_init(struct sensor_dbc_tire_temp_rr_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m1_tire_temp_rr_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m1_tire_temp_rr_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m1_tire_temp_rr_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m1_tire_temp_rr_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m1_tire_temp_rr_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m1_tire_temp_rr_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m1_tire_temp_rr_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m1_tire_temp_rr_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m1_tire_temp_rr_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m1_tire_temp_rr_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m1_tire_temp_rr_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m1_tire_temp_rr_4_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RR_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rr_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rr_m2_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RR_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rr_m2_unpack(
    struct sensor_dbc_tire_temp_rr_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RR_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rr_m2_init(struct sensor_dbc_tire_temp_rr_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m2_tire_temp_rr_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m2_tire_temp_rr_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m2_tire_temp_rr_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m2_tire_temp_rr_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m2_tire_temp_rr_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m2_tire_temp_rr_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m2_tire_temp_rr_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m2_tire_temp_rr_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m2_tire_temp_rr_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m2_tire_temp_rr_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m2_tire_temp_rr_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m2_tire_temp_rr_8_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RR_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rr_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rr_m3_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RR_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rr_m3_unpack(
    struct sensor_dbc_tire_temp_rr_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RR_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rr_m3_init(struct sensor_dbc_tire_temp_rr_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m3_tire_temp_rr_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m3_tire_temp_rr_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m3_tire_temp_rr_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m3_tire_temp_rr_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m3_tire_temp_rr_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m3_tire_temp_rr_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m3_tire_temp_rr_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m3_tire_temp_rr_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m3_tire_temp_rr_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m3_tire_temp_rr_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m3_tire_temp_rr_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m3_tire_temp_rr_12_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RR_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rr_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rr_m4_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RR_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rr_m4_unpack(
    struct sensor_dbc_tire_temp_rr_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RR_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rr_m4_init(struct sensor_dbc_tire_temp_rr_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m4_tire_temp_rr_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m4_tire_temp_rr_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m4_tire_temp_rr_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m4_tire_temp_rr_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m4_tire_temp_rr_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m4_tire_temp_rr_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m4_tire_temp_rr_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m4_tire_temp_rr_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m4_tire_temp_rr_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m4_tire_temp_rr_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m4_tire_temp_rr_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m4_tire_temp_rr_16_is_in_range(uint16_t value);

/**
 * Pack message TireTemp_RR_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_tire_temp_rr_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_tire_temp_rr_m5_t *src_p,
    size_t size);

/**
 * Unpack message TireTemp_RR_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_tire_temp_rr_m5_unpack(
    struct sensor_dbc_tire_temp_rr_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TireTemp_RR_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_tire_temp_rr_m5_init(struct sensor_dbc_tire_temp_rr_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_tire_temp_rr_m5_tire_temp_rr_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_tire_temp_rr_m5_tire_temp_rr_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_tire_temp_rr_m5_tire_temp_rr_sensor_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FL_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fl_m1_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FL_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m1_unpack(
    struct sensor_dbc_rotor_temp_fl_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FL_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fl_m1_init(struct sensor_dbc_rotor_temp_fl_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m1_rotor_temp_fl_4_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FL_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fl_m2_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FL_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m2_unpack(
    struct sensor_dbc_rotor_temp_fl_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FL_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fl_m2_init(struct sensor_dbc_rotor_temp_fl_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m2_rotor_temp_fl_8_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FL_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fl_m3_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FL_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m3_unpack(
    struct sensor_dbc_rotor_temp_fl_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FL_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fl_m3_init(struct sensor_dbc_rotor_temp_fl_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m3_rotor_temp_fl_12_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FL_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fl_m4_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FL_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m4_unpack(
    struct sensor_dbc_rotor_temp_fl_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FL_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fl_m4_init(struct sensor_dbc_rotor_temp_fl_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m4_rotor_temp_fl_16_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FL_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fl_m5_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FL_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fl_m5_unpack(
    struct sensor_dbc_rotor_temp_fl_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FL_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fl_m5_init(struct sensor_dbc_rotor_temp_fl_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fl_m5_rotor_temp_fl_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fl_m5_rotor_temp_fl_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fl_m5_rotor_temp_fl_sensor_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FR_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fr_m1_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FR_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m1_unpack(
    struct sensor_dbc_rotor_temp_fr_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FR_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fr_m1_init(struct sensor_dbc_rotor_temp_fr_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m1_rotor_temp_fr_4_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FR_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fr_m2_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FR_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m2_unpack(
    struct sensor_dbc_rotor_temp_fr_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FR_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fr_m2_init(struct sensor_dbc_rotor_temp_fr_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m2_rotor_temp_fr_8_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FR_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fr_m3_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FR_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m3_unpack(
    struct sensor_dbc_rotor_temp_fr_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FR_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fr_m3_init(struct sensor_dbc_rotor_temp_fr_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m3_rotor_temp_fr_12_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FR_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fr_m4_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FR_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m4_unpack(
    struct sensor_dbc_rotor_temp_fr_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FR_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fr_m4_init(struct sensor_dbc_rotor_temp_fr_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m4_rotor_temp_fr_16_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_FR_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_fr_m5_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_FR_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_fr_m5_unpack(
    struct sensor_dbc_rotor_temp_fr_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_FR_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_fr_m5_init(struct sensor_dbc_rotor_temp_fr_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_fr_m5_rotor_temp_fr_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_fr_m5_rotor_temp_fr_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_fr_m5_rotor_temp_fr_sensor_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RL_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rl_m1_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RL_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m1_unpack(
    struct sensor_dbc_rotor_temp_rl_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RL_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rl_m1_init(struct sensor_dbc_rotor_temp_rl_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m1_rotor_temp_rl_4_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RL_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rl_m2_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RL_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m2_unpack(
    struct sensor_dbc_rotor_temp_rl_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RL_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rl_m2_init(struct sensor_dbc_rotor_temp_rl_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m2_rotor_temp_rl_8_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RL_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rl_m3_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RL_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m3_unpack(
    struct sensor_dbc_rotor_temp_rl_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RL_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rl_m3_init(struct sensor_dbc_rotor_temp_rl_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m3_rotor_temp_rl_12_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RL_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rl_m4_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RL_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m4_unpack(
    struct sensor_dbc_rotor_temp_rl_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RL_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rl_m4_init(struct sensor_dbc_rotor_temp_rl_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m4_rotor_temp_rl_16_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RL_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rl_m5_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RL_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rl_m5_unpack(
    struct sensor_dbc_rotor_temp_rl_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RL_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rl_m5_init(struct sensor_dbc_rotor_temp_rl_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rl_m5_rotor_temp_rl_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rl_m5_rotor_temp_rl_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rl_m5_rotor_temp_rl_sensor_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RR_M1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rr_m1_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RR_M1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m1_unpack(
    struct sensor_dbc_rotor_temp_rr_m1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RR_M1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rr_m1_init(struct sensor_dbc_rotor_temp_rr_m1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m1_rotor_temp_rr_4_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RR_M2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rr_m2_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RR_M2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m2_unpack(
    struct sensor_dbc_rotor_temp_rr_m2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RR_M2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rr_m2_init(struct sensor_dbc_rotor_temp_rr_m2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m2_rotor_temp_rr_8_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RR_M3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rr_m3_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RR_M3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m3_unpack(
    struct sensor_dbc_rotor_temp_rr_m3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RR_M3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rr_m3_init(struct sensor_dbc_rotor_temp_rr_m3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m3_rotor_temp_rr_12_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RR_M4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rr_m4_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RR_M4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m4_unpack(
    struct sensor_dbc_rotor_temp_rr_m4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RR_M4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rr_m4_init(struct sensor_dbc_rotor_temp_rr_m4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m4_rotor_temp_rr_16_is_in_range(uint16_t value);

/**
 * Pack message RotorTemp_RR_M5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_rotor_temp_rr_m5_t *src_p,
    size_t size);

/**
 * Unpack message RotorTemp_RR_M5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_rotor_temp_rr_m5_unpack(
    struct sensor_dbc_rotor_temp_rr_m5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RotorTemp_RR_M5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_rotor_temp_rr_m5_init(struct sensor_dbc_rotor_temp_rr_m5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_rotor_temp_rr_m5_rotor_temp_rr_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_rotor_temp_rr_m5_rotor_temp_rr_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_rotor_temp_rr_m5_rotor_temp_rr_sensor_is_in_range(uint16_t value);

/**
 * Pack message VectorNav0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav0_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav0_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav0_unpack(
    struct sensor_dbc_vector_nav0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav0_init(struct sensor_dbc_vector_nav0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav0_vector_nav_accel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav0_vector_nav_accel_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav0_vector_nav_accel_x_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav0_vector_nav_accel_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav0_vector_nav_accel_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav0_vector_nav_accel_y_is_in_range(float value);

/**
 * Pack message VectorNav1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav1_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav1_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav1_unpack(
    struct sensor_dbc_vector_nav1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav1_init(struct sensor_dbc_vector_nav1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav1_vector_nav_accel_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav1_vector_nav_accel_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav1_vector_nav_accel_z_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav1_vector_nav_angular_rate_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav1_vector_nav_angular_rate_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav1_vector_nav_angular_rate_x_is_in_range(float value);

/**
 * Pack message VectorNav2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav2_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav2_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav2_unpack(
    struct sensor_dbc_vector_nav2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav2_init(struct sensor_dbc_vector_nav2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav2_vector_nav_angular_rate_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav2_vector_nav_angular_rate_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav2_vector_nav_angular_rate_y_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav2_vector_nav_angular_rate_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav2_vector_nav_angular_rate_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav2_vector_nav_angular_rate_z_is_in_range(float value);

/**
 * Pack message VectorNav3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav3_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav3_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav3_unpack(
    struct sensor_dbc_vector_nav3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav3_init(struct sensor_dbc_vector_nav3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav3_vector_nav_pos_lla_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav3_vector_nav_pos_lla_l_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav3_vector_nav_pos_lla_l_is_in_range(double value);

/**
 * Pack message VectorNav4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav4_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav4_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav4_unpack(
    struct sensor_dbc_vector_nav4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav4_init(struct sensor_dbc_vector_nav4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav4_vector_nav_pos_lla_o_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav4_vector_nav_pos_lla_o_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav4_vector_nav_pos_lla_o_is_in_range(double value);

/**
 * Pack message VectorNav5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav5_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav5_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav5_unpack(
    struct sensor_dbc_vector_nav5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav5_init(struct sensor_dbc_vector_nav5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav5_vector_nav_pos_lla_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav5_vector_nav_pos_lla_a_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav5_vector_nav_pos_lla_a_is_in_range(double value);

/**
 * Pack message VectorNav6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav6_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav6_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav6_unpack(
    struct sensor_dbc_vector_nav6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav6_init(struct sensor_dbc_vector_nav6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav6_vector_nav_vel_ned_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav6_vector_nav_vel_ned_n_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav6_vector_nav_vel_ned_n_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav6_vector_nav_vel_ned_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav6_vector_nav_vel_ned_e_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav6_vector_nav_vel_ned_e_is_in_range(float value);

/**
 * Pack message VectorNav7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav7_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav7_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav7_unpack(
    struct sensor_dbc_vector_nav7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav7_init(struct sensor_dbc_vector_nav7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav7_vector_nav_vel_ned_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav7_vector_nav_vel_ned_d_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav7_vector_nav_vel_ned_d_is_in_range(float value);

/**
 * Pack message VectorNav.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vector_nav_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vector_nav_t *src_p,
    size_t size);

/**
 * Unpack message VectorNav.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vector_nav_unpack(
    struct sensor_dbc_vector_nav_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VectorNav.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vector_nav_init(struct sensor_dbc_vector_nav_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_accel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_accel_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_accel_x_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_accel_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_accel_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_accel_y_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_accel_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_accel_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_accel_z_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_angular_rate_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_angular_rate_x_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_angular_rate_x_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_angular_rate_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_angular_rate_y_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_angular_rate_y_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_angular_rate_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_angular_rate_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_angular_rate_z_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_l_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_pos_lla_l_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_o_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_o_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_pos_lla_o_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_pos_lla_a_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_pos_lla_a_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_vel_ned_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_vel_ned_n_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_vel_ned_n_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_vel_ned_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_vel_ned_e_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_vel_ned_e_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float sensor_dbc_vector_nav_vector_nav_vel_ned_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vector_nav_vector_nav_vel_ned_d_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vector_nav_vector_nav_vel_ned_d_is_in_range(float value);

/**
 * Pack message SSDB_suspension_FL_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_ssdb_suspension_fl_m_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_ssdb_suspension_fl_m_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_suspension_FL_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_ssdb_suspension_fl_m_unpack(
    struct sensor_dbc_ssdb_suspension_fl_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_suspension_FL_M.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_ssdb_suspension_fl_m_init(struct sensor_dbc_ssdb_suspension_fl_m_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_ssdb_suspension_fl_m_ssdb_suspension_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_ssdb_suspension_fl_m_ssdb_suspension_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_ssdb_suspension_fl_m_ssdb_suspension_fl_is_in_range(uint16_t value);

/**
 * Pack message SSDB_suspension_FR_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_ssdb_suspension_fr_m_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_ssdb_suspension_fr_m_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_suspension_FR_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_ssdb_suspension_fr_m_unpack(
    struct sensor_dbc_ssdb_suspension_fr_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_suspension_FR_M.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_ssdb_suspension_fr_m_init(struct sensor_dbc_ssdb_suspension_fr_m_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_ssdb_suspension_fr_m_ssdb_suspension_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_ssdb_suspension_fr_m_ssdb_suspension_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_ssdb_suspension_fr_m_ssdb_suspension_fr_is_in_range(uint16_t value);

/**
 * Pack message SSDB_suspension_RL_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_ssdb_suspension_rl_m_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_ssdb_suspension_rl_m_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_suspension_RL_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_ssdb_suspension_rl_m_unpack(
    struct sensor_dbc_ssdb_suspension_rl_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_suspension_RL_M.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_ssdb_suspension_rl_m_init(struct sensor_dbc_ssdb_suspension_rl_m_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_ssdb_suspension_rl_m_ssdb_suspension_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_ssdb_suspension_rl_m_ssdb_suspension_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_ssdb_suspension_rl_m_ssdb_suspension_rl_is_in_range(uint16_t value);

/**
 * Pack message SSDB_suspension_RR_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_ssdb_suspension_rr_m_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_ssdb_suspension_rr_m_t *src_p,
    size_t size);

/**
 * Unpack message SSDB_suspension_RR_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_ssdb_suspension_rr_m_unpack(
    struct sensor_dbc_ssdb_suspension_rr_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSDB_suspension_RR_M.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_ssdb_suspension_rr_m_init(struct sensor_dbc_ssdb_suspension_rr_m_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_ssdb_suspension_rr_m_ssdb_suspension_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_ssdb_suspension_rr_m_ssdb_suspension_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_ssdb_suspension_rr_m_ssdb_suspension_rr_is_in_range(uint16_t value);

/**
 * Pack message VC_brake_pressure_rear.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sensor_dbc_vc_brake_pressure_rear_pack(
    uint8_t *dst_p,
    const struct sensor_dbc_vc_brake_pressure_rear_t *src_p,
    size_t size);

/**
 * Unpack message VC_brake_pressure_rear.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sensor_dbc_vc_brake_pressure_rear_unpack(
    struct sensor_dbc_vc_brake_pressure_rear_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VC_brake_pressure_rear.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sensor_dbc_vc_brake_pressure_rear_init(struct sensor_dbc_vc_brake_pressure_rear_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sensor_dbc_vc_brake_pressure_rear_vc_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sensor_dbc_vc_brake_pressure_rear_vc_brake_pressure_rear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sensor_dbc_vc_brake_pressure_rear_vc_brake_pressure_rear_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
