/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.2.0 Sat Oct 22 12:16:38 2022.
 */

#ifndef FORMULA_DBC_H
#define FORMULA_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define FORMULA_DBC_MCU_MODULATION_AND_FLUX_INFO_FRAME_ID (0xadu)
#define FORMULA_DBC_MCU_TORQUE_AND_TIMER_INFO_FRAME_ID (0xacu)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_RESPONSE_FRAME_ID (0xc2u)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_COMMAND_FRAME_ID (0xc1u)
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_FRAME_ID (0xc0u)
#define FORMULA_DBC_MCU_FAULT_CODES_FRAME_ID (0xabu)
#define FORMULA_DBC_MCU_INTERNAL_STATES_FRAME_ID (0xaau)
#define FORMULA_DBC_MCU_INTERNAL_VOLTAGES_FRAME_ID (0xa9u)
#define FORMULA_DBC_MCU_FLUX_ID_IQ_INFO_FRAME_ID (0xa8u)
#define FORMULA_DBC_MCU_VOLTAGE_INFO_FRAME_ID (0xa7u)
#define FORMULA_DBC_MCU_CURRENT_INFO_FRAME_ID (0xa6u)
#define FORMULA_DBC_MCU_MOTOR_POSITION_INFO_FRAME_ID (0xa5u)
#define FORMULA_DBC_MCU_DIGITAL_INPUT_STATUS_FRAME_ID (0xa4u)
#define FORMULA_DBC_MCU_ANALOG_INPUT_VOLTAGES_FRAME_ID (0xa3u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_3_FRAME_ID (0xa2u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_2_FRAME_ID (0xa1u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_1_FRAME_ID (0xa0u)
#define FORMULA_DBC_MCU_FIRMWARE_INFO_FRAME_ID (0xaeu)
#define FORMULA_DBC_MCU_DIAG_DATA_FRAME_ID (0xafu)
#define FORMULA_DBC_MCU_U2_C_COMMAND_TXD_FRAME_ID (0x1d7u)
#define FORMULA_DBC_MCU_U2_C_MESSAGE_RXD_FRAME_ID (0x1d5u)
#define FORMULA_DBC_MCU_FAST_INFO_FRAME_ID (0xb0u)
#define FORMULA_DBC_VC_STATUS_FRAME_ID (0x12du)
#define FORMULA_DBC_VC_PEDAL_INPUTS_FRAME_ID (0x12eu)
#define FORMULA_DBC_VC_DASH_INPUTS_FRAME_ID (0x12fu)
#define FORMULA_DBC_VC_SHUTDOWN_STATUS_FRAME_ID (0x131u)
#define FORMULA_DBC_VC_FAULT_VECTOR_FRAME_ID (0x137u)
#define FORMULA_DBC_VC_HARD_FAULT_INDICATOR_FRAME_ID (0x13bu)
#define FORMULA_DBC_BMS_CURRENT_LIMIT_FRAME_ID (0x202u)
#define FORMULA_DBC_BMS_STATUS_FRAME_ID (0x258u)
#define FORMULA_DBC_BMS_FAULT_VECTOR_FRAME_ID (0x2bcu)
#define FORMULA_DBC_BMS_FAULT_ALERT_FRAME_ID (0x2bdu)
#define FORMULA_DBC_BMS_VOLTAGES_FRAME_ID (0x2beu)
#define FORMULA_DBC_BMS_THERMISTOR_VOLTAGES_FRAME_ID (0x2bfu)
#define FORMULA_DBC_BMS_TEMPERATURES_FRAME_ID (0x2c0u)
#define FORMULA_DBC_BMS_DRAIN_STATUS_A_FRAME_ID (0x320u)
#define FORMULA_DBC_BMS_DRAIN_STATUS_B_FRAME_ID (0x321u)
#define FORMULA_DBC_BMS_CURRENT_FRAME_ID (0x384u)
#define FORMULA_DBC_BMS_CHARGE_REQUEST_FRAME_ID (0x1806e5f4u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_FRAME_ID (0x3b6u)
#define FORMULA_DBC_BMS_REF_FRAME_ID (0x3b7u)

/* Frame lengths in bytes. */
#define FORMULA_DBC_MCU_MODULATION_AND_FLUX_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_TORQUE_AND_TIMER_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_RESPONSE_LENGTH (8u)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_COMMAND_LENGTH (8u)
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_LENGTH (8u)
#define FORMULA_DBC_MCU_FAULT_CODES_LENGTH (8u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_LENGTH (8u)
#define FORMULA_DBC_MCU_INTERNAL_VOLTAGES_LENGTH (8u)
#define FORMULA_DBC_MCU_FLUX_ID_IQ_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_VOLTAGE_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_CURRENT_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_MOTOR_POSITION_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_DIGITAL_INPUT_STATUS_LENGTH (8u)
#define FORMULA_DBC_MCU_ANALOG_INPUT_VOLTAGES_LENGTH (8u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_3_LENGTH (8u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_2_LENGTH (8u)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_1_LENGTH (8u)
#define FORMULA_DBC_MCU_FIRMWARE_INFO_LENGTH (8u)
#define FORMULA_DBC_MCU_DIAG_DATA_LENGTH (8u)
#define FORMULA_DBC_MCU_U2_C_COMMAND_TXD_LENGTH (8u)
#define FORMULA_DBC_MCU_U2_C_MESSAGE_RXD_LENGTH (8u)
#define FORMULA_DBC_MCU_FAST_INFO_LENGTH (8u)
#define FORMULA_DBC_VC_STATUS_LENGTH (8u)
#define FORMULA_DBC_VC_PEDAL_INPUTS_LENGTH (8u)
#define FORMULA_DBC_VC_DASH_INPUTS_LENGTH (8u)
#define FORMULA_DBC_VC_SHUTDOWN_STATUS_LENGTH (8u)
#define FORMULA_DBC_VC_FAULT_VECTOR_LENGTH (8u)
#define FORMULA_DBC_VC_HARD_FAULT_INDICATOR_LENGTH (8u)
#define FORMULA_DBC_BMS_CURRENT_LIMIT_LENGTH (8u)
#define FORMULA_DBC_BMS_STATUS_LENGTH (8u)
#define FORMULA_DBC_BMS_FAULT_VECTOR_LENGTH (8u)
#define FORMULA_DBC_BMS_FAULT_ALERT_LENGTH (8u)
#define FORMULA_DBC_BMS_VOLTAGES_LENGTH (8u)
#define FORMULA_DBC_BMS_THERMISTOR_VOLTAGES_LENGTH (8u)
#define FORMULA_DBC_BMS_TEMPERATURES_LENGTH (8u)
#define FORMULA_DBC_BMS_DRAIN_STATUS_A_LENGTH (8u)
#define FORMULA_DBC_BMS_DRAIN_STATUS_B_LENGTH (8u)
#define FORMULA_DBC_BMS_CURRENT_LENGTH (8u)
#define FORMULA_DBC_BMS_CHARGE_REQUEST_LENGTH (8u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_LENGTH (8u)
#define FORMULA_DBC_BMS_REF_LENGTH (8u)

/* Extended or standard frame types. */
#define FORMULA_DBC_MCU_MODULATION_AND_FLUX_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_TORQUE_AND_TIMER_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_RESPONSE_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_READ_WRITE_PARAM_COMMAND_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_FAULT_CODES_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_INTERNAL_STATES_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_INTERNAL_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_FLUX_ID_IQ_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_VOLTAGE_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_CURRENT_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_MOTOR_POSITION_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_DIGITAL_INPUT_STATUS_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_ANALOG_INPUT_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_3_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_2_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_TEMPERATURE_SET_1_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_FIRMWARE_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_DIAG_DATA_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_U2_C_COMMAND_TXD_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_U2_C_MESSAGE_RXD_IS_EXTENDED (0)
#define FORMULA_DBC_MCU_FAST_INFO_IS_EXTENDED (0)
#define FORMULA_DBC_VC_STATUS_IS_EXTENDED (0)
#define FORMULA_DBC_VC_PEDAL_INPUTS_IS_EXTENDED (0)
#define FORMULA_DBC_VC_DASH_INPUTS_IS_EXTENDED (0)
#define FORMULA_DBC_VC_SHUTDOWN_STATUS_IS_EXTENDED (0)
#define FORMULA_DBC_VC_FAULT_VECTOR_IS_EXTENDED (0)
#define FORMULA_DBC_VC_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_CURRENT_LIMIT_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_STATUS_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_FAULT_VECTOR_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_FAULT_ALERT_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_THERMISTOR_VOLTAGES_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_TEMPERATURES_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_DRAIN_STATUS_A_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_DRAIN_STATUS_B_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_CURRENT_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_CHARGE_REQUEST_IS_EXTENDED (1)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_IS_EXTENDED (0)
#define FORMULA_DBC_BMS_REF_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_DIRECTION_COMMAND_CW_CHOICE (0u)
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_DIRECTION_COMMAND_CCW_CHOICE (1u)

#define FORMULA_DBC_MCU_COMMAND_MESSAGE_INVERTER_DISCHARGE_DISCHARGE__DISABLE_CHOICE (0u)
#define FORMULA_DBC_MCU_COMMAND_MESSAGE_INVERTER_DISCHARGE_DISCHARGE__ENABLE__IF_EEPROM_PARAMETER_IS_SET__CHOICE (1u)

#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM__START__STATE_CHOICE (0u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE__CHARGE__INIT_STATE_CHOICE (1u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE_CHARGE_ACTIVE_STATE_CHOICE (2u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_PRE_CHARGE_COMPLETE_STATE_CHOICE (3u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM_WAIT_STATE_CHOICE (4u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_VSM_READY_STATE_CHOICE (5u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_MOTOR__RUNNING__STATE_CHOICE (6u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_BLINK_FAULT_CODE_STATE_CHOICE (7u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_SHUTDOWN_STATE_FOR__KEY__SWITCH__MODE_1_CHOICE (14u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D1_VSM_STATE_RESET_THE_INVERTER_CHOICE (15u)

#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_POWER_UP_CHOICE (0u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_STOP_CHOICE (1u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_OPEN__LOOP_CHOICE (2u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_CLOSED__LOOP_CHOICE (3u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_4_CHOICE (4u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_5_CHOICE (5u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_6_CHOICE (6u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_7_CHOICE (7u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_IDLE__RUN_CHOICE (8u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_IDLE__STOP_CHOICE (9u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_10_CHOICE (10u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERN__STATE_CHOICE (11u)
#define FORMULA_DBC_MCU_INTERNAL_STATES_D2_INVERTER_STATE_INTERNAL__STATE_12_CHOICE (12u)

#define FORMULA_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_NOT_READY_CHOICE (0u)
#define FORMULA_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_STARTUP_CHOICE (1u)
#define FORMULA_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_READY_TO_DRIVE_CHOICE (2u)
#define FORMULA_DBC_VC_STATUS_VC_STATUS_VEHICLE_STATE_VEHICLE_STATE_FAULTED_CHOICE (3u)

#define FORMULA_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define FORMULA_DBC_VC_HARD_FAULT_INDICATOR_VC_HARD_FAULT_INDICATOR_TASK_TASK_100_HZ_CHOICE (1u)

#define FORMULA_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_DISCONNECTED_CHOICE (0u)
#define FORMULA_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_COMPLETE_CHOICE (1u)
#define FORMULA_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCING_CHOICE (2u)
#define FORMULA_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_CHARGING_CHOICE (3u)
#define FORMULA_DBC_BMS_STATUS_BMS_STATUS_CHARGE_STATE_CHARGE_STATE_CONNECTED_BALANCE_SENSING_CHOICE (4u)

#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_CELLS_CHOICE (0u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_TEMPS_CHOICE (1u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_SLAVE_COMM_DRAIN_REQUEST_CHOICE (2u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CURRENT_SENSOR_COMM_CHOICE (3u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_CURRENT_CHOICE (4u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_IRRATIONAL_CHOICE (5u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_CELL_VOLTAGE_DIFF_CHOICE (6u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULTCODE_OUT_OF_JUICE_CHOICE (7u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_TEMPERATURE_IRRATIONAL_CHOICE (8u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_OVER_TEMP_CHOICE (9u)
#define FORMULA_DBC_BMS_FAULT_ALERT_BMS_FAULT_ALERT_CODE_FAULT_CODE_DRAIN_FAILURE_CHOICE (10u)

#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_UNKNOWN_CHOICE (0u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1_HZ_CHOICE (1u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_10_HZ_CHOICE (2u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_TASK_1K_HZ_CHOICE (3u)
#define FORMULA_DBC_BMS_HARD_FAULT_INDICATOR_BMS_HARD_FAULT_INDICATOR_TASK_CAN_RX_TASK_CHOICE (4u)

/**
 * Signals in message MCU_Modulation_And_Flux_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_modulation_and_flux_info_t {
    /**
     * Range: -32768..32767 (-3.2768..3.2767 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t d1_modulation_index;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_flux_weakening_output;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_id_command;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_iq_command;
};

/**
 * Signals in message MCU_Torque_And_Timer_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_torque_and_timer_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_commanded_torque;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_torque_feedback;

    /**
     * Range: 0..4294933333.333333333333333333 (0..12884800 Sec)
     * Scale: 0.003
     * Offset: 0
     */
    uint32_t d3_power_on_timer;
};

/**
 * Signals in message MCU_Read_Write_Param_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_read_write_param_response_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_parameter_address_response;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_write_success;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_data_response;
};

/**
 * Signals in message MCU_Read_Write_Param_Command.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_read_write_param_command_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_parameter_address_command;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_read_write_command;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_data_command;
};

/**
 * Signals in message MCU_Command_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_command_message_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t torque_command;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_command;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_command;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_enable;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_discharge;

    /**
     * Range: 0..1 (0..1 Bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_mode_enable;

    /**
     * Range: 0..15 (0..15 Bits)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t torque_limit_command;
};

/**
 * Signals in message MCU_Fault_Codes.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_fault_codes_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_post_fault_lo;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_post_fault_hi;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d3_run_fault_lo;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d4_run_fault_hi;
};

/**
 * Signals in message MCU_Internal_States.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_internal_states_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_vsm_state;

    /**
     * Range: 0..255 (0..255 kHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_pwm_frequency;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_inverter_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_1_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_2_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_3_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_4_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_5_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_relay_6_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_inverter_run_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_inverter_discharge_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_inverter_command_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_rolling_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_inverter_enable_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_start_mode_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_inverter_enable_lockout;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_direction_command;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_bms_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_bms_torque_limiting;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_max_speed_limiting;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_low_speed_limiting;
};

/**
 * Signals in message MCU_Internal_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_internal_voltages_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d1_reference_voltage_1_5;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d2_reference_voltage_2_5;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d3_reference_voltage_5_0;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t d4_reference_voltage_12_0;
};

/**
 * Signals in message MCU_Flux_ID_IQ_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_flux_id_iq_info_t {
    /**
     * Range: -32768..32767 (-32.768..32.767 Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t d1_flux_command;

    /**
     * Range: -32768..32767 (-32.768..32.767 Wb)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t d2_flux_feedback;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_id;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_iq;
};

/**
 * Signals in message MCU_Voltage_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_voltage_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_dc_bus_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_output_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_vab_vd_voltage;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_vbc_vq_voltage;
};

/**
 * Signals in message MCU_Current_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_current_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_phase_a_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_phase_b_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_phase_c_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_dc_bus_current;
};

/**
 * Signals in message MCU_Motor_Position_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_motor_position_info_t {
    /**
     * Range: 0..65535 (0..6553.5 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t d1_motor_angle_electrical;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t d2_motor_speed;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_electrical_output_frequency;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_delta_resolver_filtered;
};

/**
 * Signals in message MCU_Digital_Input_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_digital_input_status_t {
    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_digital_input_1;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_digital_input_2;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_digital_input_3;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_digital_input_4;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_digital_input_5;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_digital_input_6;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_digital_input_7;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d8_digital_input_8;
};

/**
 * Signals in message MCU_Analog_Input_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_analog_input_voltages_t {
    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d1_analog_input_1;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d2_analog_input_2;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d3_analog_input_3;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d4_analog_input_4;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d5_analog_input_5;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t d6_analog_input_6;
};

/**
 * Signals in message MCU_Temperature_Set_3.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_temperature_set_3_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_rtd4_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_rtd5_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_motor_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_torque_shudder;
};

/**
 * Signals in message MCU_Temperature_Set_2.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_temperature_set_2_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_control_board_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_rtd1_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_rtd2_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_rtd3_temperature;
};

/**
 * Signals in message MCU_Temperature_Set_1.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_temperature_set_1_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d1_module_a;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d2_module_b;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d3_module_c;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 degC)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t d4_gate_driver_board;
};

/**
 * Signals in message MCU_Firmware_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_firmware_info_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_project_code_eep_ver;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_sw_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d3_date_code_mmdd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d4_date_code_yyyy;
};

/**
 * Signals in message MCU_Diag_Data.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_diag_data_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_buffer_record;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_buffer_segment;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d3_diag_data_1;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d4_diag_data_2;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t d5_diag_data_3;
};

/**
 * Signals in message MCU_U2C_Command_Txd.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_u2_c_command_txd_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_id_byte;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_setpoint_calc;
};

/**
 * Signals in message MCU_U2C_Message_Rxd.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_u2_c_message_rxd_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d1_hv_input_current_sensor_validity;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d2_14_v_master_fault;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d3_hv_input_current;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d4_dtc_status;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d5_dtc_index;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d6_14_v_monitor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d7_14_v_conditional;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d8_14_v_current_monitor;
};

/**
 * Signals in message MCU_Fast_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_mcu_fast_info_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_torque_command;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_torque_feedback;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t fast_motor_speed;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fast_dc_bus_voltage;
};

/**
 * Signals in message VC_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_status_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_status_vehicle_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_status_mc_ready;
};

/**
 * Signals in message VC_PedalInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_pedal_inputs_t {
    /**
     * Range: 0..30000 (0..3000 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_brake_pressure;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_a;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_b;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_pedal_inputs_accel_position_avg;
};

/**
 * Signals in message VC_DashInputs.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_dash_inputs_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_dr_sbutton;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_dash_inputs_switch3;
};

/**
 * Signals in message VC_ShutdownStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_shutdown_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bms_input;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bms_latch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_input;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_bspd_latch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd1_input;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd1_latch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd2_input;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_shutdown_status_imd2_latch;
};

/**
 * Signals in message VC_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_brake_sensor_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_accelerator_sensor_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_sensor_disagreement;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fault_vector_apps_double_pedal;
};

/**
 * Signals in message VC_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_vc_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_hard_fault_indicator_task;
};

/**
 * Signals in message BMS_Current_Limit.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_current_limit_t {
    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d1_max_discharge_current;

    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t d2_max_charge_current;
};

/**
 * Signals in message BMS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_status_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_soc_raw;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_status_charge_state;

    /**
     * Range: 0..4000 (0..400 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_status_pack_voltage;
};

/**
 * Signals in message BMS_FaultVector.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_fault_vector_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_cells;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_temps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_slave_comm_drain_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_current_sensor_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_cell_voltage_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_out_of_juice;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_temperature_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_over_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_vector_drain_failure;
};

/**
 * Signals in message BMS_FaultAlert.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_fault_alert_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_cell_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_temp_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_drain_comm_slave_board_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_adc_error_code;

    /**
     * Range: 0..2000000 (0..2000 A)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bms_fault_alert_current;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_voltage;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_voltage_diff;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_lowest_cell_voltage;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_irrational_temperature;

    /**
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_fault_alert_over_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_alert_failed_drain_cell;
};

/**
 * Signals in message BMS_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_voltages_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell24;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell30;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell36;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell42;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell48;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell54;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell60;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell66;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell72;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell78;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell84;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell25;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell31;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell37;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell43;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell49;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell55;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell61;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell67;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell73;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell79;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell85;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell20;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell26;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell32;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell38;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell44;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell50;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell56;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell62;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell68;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell74;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell80;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell86;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell21;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell27;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell33;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell39;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell45;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell51;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell57;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell63;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell69;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell75;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell81;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell87;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell22;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell28;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell34;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell40;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell46;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell52;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell58;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell64;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell70;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell76;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell82;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell88;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell17;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell23;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell29;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell35;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell41;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell47;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell53;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell59;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell65;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell71;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell77;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell83;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_voltages_cell89;
};

/**
 * Signals in message BMS_ThermistorVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_thermistor_voltages_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermistor_voltages_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm12;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm18;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm13;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm19;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm14;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm15;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm16;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm11;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_thermistor_voltages_tm17;
};

/**
 * Signals in message BMS_Temperatures.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_temperatures_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temperatures_mux;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_7;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_14;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_20;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_27;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_34;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_8;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_15;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_21;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_28;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_35;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_9;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_16;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_22;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_29;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_36;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_10;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_17;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_23;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_30;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_37;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_11;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_18;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_24;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_31;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_38;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_5;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_12;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_19;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_25;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_32;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_39;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_6;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_13;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_26;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t bms_temperatures_33;
};

/**
 * Signals in message BMS_DrainStatusA.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_drain_status_a_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell21;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell22;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell23;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell24;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell25;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell26;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell27;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell28;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell29;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell30;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell31;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell32;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell33;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell34;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell35;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell36;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell37;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell38;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell39;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell40;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell41;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell42;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell43;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell44;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell45;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell46;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell47;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell48;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell49;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell50;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell51;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell52;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell53;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell54;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell55;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell56;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell57;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell58;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell59;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell60;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell61;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell62;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_a_cell63;
};

/**
 * Signals in message BMS_DrainStatusB.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_drain_status_b_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell64;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell65;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell66;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell67;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell68;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell69;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell70;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell71;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell72;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell73;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell74;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell75;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell76;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell77;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell78;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell79;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell80;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell81;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell82;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell83;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell84;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell85;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell86;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell87;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell88;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_drain_status_b_cell89;
};

/**
 * Signals in message BMS_Current.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_current_t {
    /**
     * Range: -100000..250000 (-100..250 A)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t bms_inst_current_filt;
};

/**
 * Signals in message BMS_ChargeRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_charge_request_t {
    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_voltage;

    /**
     * Range: 0..65533 (0..6553.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charge_request_max_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_request_control;
};

/**
 * Signals in message BMS_HardFaultIndicator.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_hard_fault_indicator_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hard_fault_indicator_task;
};

/**
 * Signals in message BMS_Ref.
 *
 * All signal values are as on the CAN bus.
 */
struct formula_dbc_bms_ref_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ref_mux;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref0;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref6;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref1;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref7;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref2;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref8;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref3;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref9;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref4;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref10;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref5;

    /**
     * Range: 0..512 (0..5.12 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_ref_ref11;
};

/**
 * Pack message MCU_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_modulation_and_flux_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_modulation_and_flux_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_modulation_and_flux_info_unpack(
    struct formula_dbc_mcu_modulation_and_flux_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_modulation_and_flux_info_d1_modulation_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_modulation_and_flux_info_d1_modulation_index_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_modulation_and_flux_info_d1_modulation_index_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_modulation_and_flux_info_d2_flux_weakening_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_modulation_and_flux_info_d3_id_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_modulation_and_flux_info_d3_id_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_modulation_and_flux_info_d3_id_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_modulation_and_flux_info_d4_iq_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_modulation_and_flux_info_d4_iq_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_modulation_and_flux_info_d4_iq_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_torque_and_timer_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_torque_and_timer_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_torque_and_timer_info_unpack(
    struct formula_dbc_mcu_torque_and_timer_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_torque_and_timer_info_d1_commanded_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_torque_and_timer_info_d1_commanded_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_torque_and_timer_info_d1_commanded_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_torque_and_timer_info_d2_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_torque_and_timer_info_d2_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_torque_and_timer_info_d2_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t formula_dbc_mcu_torque_and_timer_info_d3_power_on_timer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_torque_and_timer_info_d3_power_on_timer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_torque_and_timer_info_d3_power_on_timer_is_in_range(uint32_t value);

/**
 * Pack message MCU_Read_Write_Param_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_read_write_param_response_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_read_write_param_response_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Read_Write_Param_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_read_write_param_response_unpack(
    struct formula_dbc_mcu_read_write_param_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_read_write_param_response_d1_parameter_address_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_response_d1_parameter_address_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_response_d1_parameter_address_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_read_write_param_response_d2_write_success_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_response_d2_write_success_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_response_d2_write_success_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_read_write_param_response_d3_data_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_response_d3_data_response_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_response_d3_data_response_is_in_range(int16_t value);

/**
 * Pack message MCU_Read_Write_Param_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_read_write_param_command_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_read_write_param_command_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Read_Write_Param_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_read_write_param_command_unpack(
    struct formula_dbc_mcu_read_write_param_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_read_write_param_command_d1_parameter_address_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_command_d1_parameter_address_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_command_d1_parameter_address_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_read_write_param_command_d2_read_write_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_command_d2_read_write_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_command_d2_read_write_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_read_write_param_command_d3_data_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_read_write_param_command_d3_data_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_read_write_param_command_d3_data_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Command_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_command_message_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_command_message_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Command_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_command_message_unpack(
    struct formula_dbc_mcu_command_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_command_message_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_command_message_speed_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_speed_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_speed_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_command_message_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_command_message_inverter_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_inverter_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_inverter_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_command_message_inverter_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_inverter_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_inverter_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_command_message_speed_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_speed_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_speed_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_command_message_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_command_message_torque_limit_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_command_message_torque_limit_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_command_message_torque_limit_command_is_in_range(int16_t value);

/**
 * Pack message MCU_Fault_Codes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_fault_codes_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_fault_codes_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Fault_Codes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_fault_codes_unpack(
    struct formula_dbc_mcu_fault_codes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_fault_codes_d1_post_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fault_codes_d1_post_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fault_codes_d1_post_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_fault_codes_d2_post_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fault_codes_d2_post_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fault_codes_d2_post_fault_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_fault_codes_d3_run_fault_lo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fault_codes_d3_run_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fault_codes_d3_run_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_fault_codes_d4_run_fault_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fault_codes_d4_run_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fault_codes_d4_run_fault_hi_is_in_range(uint16_t value);

/**
 * Pack message MCU_Internal_States.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_internal_states_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_internal_states_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Internal_States.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_internal_states_unpack(
    struct formula_dbc_mcu_internal_states_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d1_vsm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d1_vsm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d1_vsm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d1_pwm_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d1_pwm_frequency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d1_pwm_frequency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d2_inverter_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d2_inverter_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d2_inverter_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_2_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_3_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_3_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_3_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_4_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_4_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_4_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_5_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_5_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_5_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d3_relay_6_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d3_relay_6_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d3_relay_6_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d4_inverter_run_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d4_inverter_run_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d4_inverter_run_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d4_inverter_discharge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d4_inverter_discharge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d4_inverter_discharge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d5_inverter_command_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d5_inverter_command_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d5_inverter_command_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d5_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d5_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d5_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d6_inverter_enable_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d6_inverter_enable_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d6_inverter_enable_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d6_start_mode_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d6_start_mode_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d6_start_mode_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d6_inverter_enable_lockout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d6_inverter_enable_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d6_inverter_enable_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d7_direction_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d7_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d7_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d7_bms_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d7_bms_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d7_bms_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d7_bms_torque_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d7_bms_torque_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d7_bms_torque_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d7_max_speed_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d7_max_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d7_max_speed_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_internal_states_d7_low_speed_limiting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_states_d7_low_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_states_d7_low_speed_limiting_is_in_range(uint8_t value);

/**
 * Pack message MCU_Internal_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_internal_voltages_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_internal_voltages_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Internal_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_internal_voltages_unpack(
    struct formula_dbc_mcu_internal_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_voltages_d1_reference_voltage_1_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_voltages_d2_reference_voltage_2_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_voltages_d3_reference_voltage_5_0_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_internal_voltages_d4_reference_voltage_12_0_is_in_range(int16_t value);

/**
 * Pack message MCU_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_flux_id_iq_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_flux_id_iq_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_flux_id_iq_info_unpack(
    struct formula_dbc_mcu_flux_id_iq_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_flux_id_iq_info_d1_flux_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_flux_id_iq_info_d1_flux_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_flux_id_iq_info_d1_flux_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_flux_id_iq_info_d2_flux_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_flux_id_iq_info_d2_flux_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_flux_id_iq_info_d2_flux_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_flux_id_iq_info_d3_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_flux_id_iq_info_d3_id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_flux_id_iq_info_d3_id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_flux_id_iq_info_d4_iq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_flux_id_iq_info_d4_iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_flux_id_iq_info_d4_iq_is_in_range(int16_t value);

/**
 * Pack message MCU_Voltage_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_voltage_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_voltage_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Voltage_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_voltage_info_unpack(
    struct formula_dbc_mcu_voltage_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_voltage_info_d1_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_voltage_info_d1_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_voltage_info_d1_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_voltage_info_d2_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_voltage_info_d2_output_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_voltage_info_d2_output_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_voltage_info_d3_vab_vd_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_voltage_info_d3_vab_vd_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_voltage_info_d3_vab_vd_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_voltage_info_d4_vbc_vq_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_voltage_info_d4_vbc_vq_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_voltage_info_d4_vbc_vq_voltage_is_in_range(int16_t value);

/**
 * Pack message MCU_Current_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_current_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_current_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Current_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_current_info_unpack(
    struct formula_dbc_mcu_current_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_current_info_d1_phase_a_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_current_info_d1_phase_a_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_current_info_d1_phase_a_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_current_info_d2_phase_b_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_current_info_d2_phase_b_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_current_info_d2_phase_b_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_current_info_d3_phase_c_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_current_info_d3_phase_c_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_current_info_d3_phase_c_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_current_info_d4_dc_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_current_info_d4_dc_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_current_info_d4_dc_bus_current_is_in_range(int16_t value);

/**
 * Pack message MCU_Motor_Position_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_motor_position_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_motor_position_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Motor_Position_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_motor_position_info_unpack(
    struct formula_dbc_mcu_motor_position_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_motor_position_info_d1_motor_angle_electrical_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_motor_position_info_d1_motor_angle_electrical_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_motor_position_info_d1_motor_angle_electrical_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_motor_position_info_d2_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_motor_position_info_d2_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_motor_position_info_d2_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_motor_position_info_d3_electrical_output_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_motor_position_info_d3_electrical_output_frequency_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_motor_position_info_d3_electrical_output_frequency_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_motor_position_info_d4_delta_resolver_filtered_is_in_range(int16_t value);

/**
 * Pack message MCU_Digital_Input_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_digital_input_status_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_digital_input_status_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Digital_Input_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_digital_input_status_unpack(
    struct formula_dbc_mcu_digital_input_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d1_digital_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d1_digital_input_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d1_digital_input_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d2_digital_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d2_digital_input_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d2_digital_input_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d3_digital_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d3_digital_input_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d3_digital_input_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d4_digital_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d4_digital_input_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d4_digital_input_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d5_digital_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d5_digital_input_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d5_digital_input_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d6_digital_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d6_digital_input_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d6_digital_input_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d7_digital_input_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d7_digital_input_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d7_digital_input_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_digital_input_status_d8_digital_input_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_digital_input_status_d8_digital_input_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_digital_input_status_d8_digital_input_8_is_in_range(uint8_t value);

/**
 * Pack message MCU_Analog_Input_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_analog_input_voltages_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_analog_input_voltages_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Analog_Input_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_analog_input_voltages_unpack(
    struct formula_dbc_mcu_analog_input_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d1_analog_input_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d1_analog_input_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d1_analog_input_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d2_analog_input_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d2_analog_input_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d2_analog_input_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d3_analog_input_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d3_analog_input_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d3_analog_input_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d4_analog_input_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d4_analog_input_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d4_analog_input_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d5_analog_input_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d5_analog_input_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d5_analog_input_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_analog_input_voltages_d6_analog_input_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_analog_input_voltages_d6_analog_input_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_analog_input_voltages_d6_analog_input_6_is_in_range(uint16_t value);

/**
 * Pack message MCU_Temperature_Set_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_temperature_set_3_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_temperature_set_3_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_temperature_set_3_unpack(
    struct formula_dbc_mcu_temperature_set_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_3_d1_rtd4_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_3_d1_rtd4_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_3_d1_rtd4_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_3_d2_rtd5_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_3_d2_rtd5_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_3_d2_rtd5_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_3_d3_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_3_d3_motor_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_3_d3_motor_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_3_d4_torque_shudder_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_3_d4_torque_shudder_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_3_d4_torque_shudder_is_in_range(int16_t value);

/**
 * Pack message MCU_Temperature_Set_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_temperature_set_2_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_temperature_set_2_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_temperature_set_2_unpack(
    struct formula_dbc_mcu_temperature_set_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_2_d1_control_board_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_2_d1_control_board_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_2_d1_control_board_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_2_d2_rtd1_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_2_d2_rtd1_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_2_d2_rtd1_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_2_d3_rtd2_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_2_d3_rtd2_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_2_d3_rtd2_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_2_d4_rtd3_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_2_d4_rtd3_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_2_d4_rtd3_temperature_is_in_range(int16_t value);

/**
 * Pack message MCU_Temperature_Set_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_temperature_set_1_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_temperature_set_1_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Temperature_Set_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_temperature_set_1_unpack(
    struct formula_dbc_mcu_temperature_set_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_1_d1_module_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_1_d1_module_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_1_d1_module_a_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_1_d2_module_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_1_d2_module_b_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_1_d2_module_b_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_1_d3_module_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_1_d3_module_c_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_1_d3_module_c_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_temperature_set_1_d4_gate_driver_board_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_temperature_set_1_d4_gate_driver_board_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_temperature_set_1_d4_gate_driver_board_is_in_range(int16_t value);

/**
 * Pack message MCU_Firmware_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_firmware_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_firmware_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Firmware_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_firmware_info_unpack(
    struct formula_dbc_mcu_firmware_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_firmware_info_d1_project_code_eep_ver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_firmware_info_d1_project_code_eep_ver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_firmware_info_d1_project_code_eep_ver_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_firmware_info_d2_sw_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_firmware_info_d2_sw_version_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_firmware_info_d2_sw_version_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_firmware_info_d3_date_code_mmdd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_firmware_info_d3_date_code_mmdd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_firmware_info_d3_date_code_mmdd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_mcu_firmware_info_d4_date_code_yyyy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_firmware_info_d4_date_code_yyyy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_firmware_info_d4_date_code_yyyy_is_in_range(uint16_t value);

/**
 * Pack message MCU_Diag_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_diag_data_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_diag_data_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Diag_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_diag_data_unpack(
    struct formula_dbc_mcu_diag_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_diag_data_d1_buffer_record_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_diag_data_d1_buffer_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_diag_data_d1_buffer_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_diag_data_d2_buffer_segment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_diag_data_d2_buffer_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_diag_data_d2_buffer_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_diag_data_d3_diag_data_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_diag_data_d3_diag_data_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_diag_data_d3_diag_data_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_diag_data_d4_diag_data_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_diag_data_d4_diag_data_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_diag_data_d4_diag_data_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_diag_data_d5_diag_data_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_diag_data_d5_diag_data_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_diag_data_d5_diag_data_3_is_in_range(int16_t value);

/**
 * Pack message MCU_U2C_Command_Txd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_u2_c_command_txd_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_u2_c_command_txd_t *src_p,
    size_t size);

/**
 * Unpack message MCU_U2C_Command_Txd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_u2_c_command_txd_unpack(
    struct formula_dbc_mcu_u2_c_command_txd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_command_txd_d1_id_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_command_txd_d1_id_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_command_txd_d1_id_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_command_txd_d2_setpoint_calc_is_in_range(uint8_t value);

/**
 * Pack message MCU_U2C_Message_Rxd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_u2_c_message_rxd_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_u2_c_message_rxd_t *src_p,
    size_t size);

/**
 * Unpack message MCU_U2C_Message_Rxd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_u2_c_message_rxd_unpack(
    struct formula_dbc_mcu_u2_c_message_rxd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d1_hv_input_current_sensor_validity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d2_14_v_master_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d3_hv_input_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d4_dtc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d4_dtc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d4_dtc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d5_dtc_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d5_dtc_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d5_dtc_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d6_14_v_monitor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d7_14_v_conditional_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_u2_c_message_rxd_d8_14_v_current_monitor_is_in_range(uint8_t value);

/**
 * Pack message MCU_Fast_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_mcu_fast_info_pack(
    uint8_t *dst_p,
    const struct formula_dbc_mcu_fast_info_t *src_p,
    size_t size);

/**
 * Unpack message MCU_Fast_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_mcu_fast_info_unpack(
    struct formula_dbc_mcu_fast_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_fast_info_fast_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fast_info_fast_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fast_info_fast_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_fast_info_fast_torque_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fast_info_fast_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fast_info_fast_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_fast_info_fast_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fast_info_fast_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fast_info_fast_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t formula_dbc_mcu_fast_info_fast_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_mcu_fast_info_fast_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_mcu_fast_info_fast_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Pack message VC_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_status_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_status_unpack(
    struct formula_dbc_vc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_status_vc_status_vehicle_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_status_vc_status_vehicle_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_status_vc_status_vehicle_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_status_vc_status_mc_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_status_vc_status_mc_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_status_vc_status_mc_ready_is_in_range(uint8_t value);

/**
 * Pack message VC_PedalInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_pedal_inputs_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_pedal_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_PedalInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_pedal_inputs_unpack(
    struct formula_dbc_vc_pedal_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_pedal_inputs_vc_pedal_inputs_brake_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_a_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_b_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_pedal_inputs_vc_pedal_inputs_accel_position_avg_is_in_range(uint16_t value);

/**
 * Pack message VC_DashInputs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_dash_inputs_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_dash_inputs_t *src_p,
    size_t size);

/**
 * Unpack message VC_DashInputs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_dash_inputs_unpack(
    struct formula_dbc_vc_dash_inputs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_dash_inputs_vc_dash_inputs_dr_sbutton_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_dash_inputs_vc_dash_inputs_dr_sbutton_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_dash_inputs_vc_dash_inputs_dr_sbutton_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_dash_inputs_vc_dash_inputs_switch0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_dash_inputs_vc_dash_inputs_switch0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_dash_inputs_vc_dash_inputs_switch0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_dash_inputs_vc_dash_inputs_switch1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_dash_inputs_vc_dash_inputs_switch1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_dash_inputs_vc_dash_inputs_switch1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_dash_inputs_vc_dash_inputs_switch2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_dash_inputs_vc_dash_inputs_switch2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_dash_inputs_vc_dash_inputs_switch2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_dash_inputs_vc_dash_inputs_switch3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_dash_inputs_vc_dash_inputs_switch3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_dash_inputs_vc_dash_inputs_switch3_is_in_range(uint8_t value);

/**
 * Pack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_shutdown_status_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_shutdown_status_t *src_p,
    size_t size);

/**
 * Unpack message VC_ShutdownStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_shutdown_status_unpack(
    struct formula_dbc_vc_shutdown_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_input_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_latch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_latch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_bms_latch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_input_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_latch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_latch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_bspd_latch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_input_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_latch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_latch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_imd1_latch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_input_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_latch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_latch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_shutdown_status_vc_shutdown_status_imd2_latch_is_in_range(uint8_t value);

/**
 * Pack message VC_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_fault_vector_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message VC_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_fault_vector_unpack(
    struct formula_dbc_vc_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_fault_vector_vc_fault_vector_brake_sensor_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_fault_vector_vc_fault_vector_accelerator_sensor_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_fault_vector_vc_fault_vector_apps_sensor_disagreement_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_fault_vector_vc_fault_vector_apps_double_pedal_is_in_range(uint8_t value);

/**
 * Pack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_vc_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct formula_dbc_vc_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message VC_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_vc_hard_fault_indicator_unpack(
    struct formula_dbc_vc_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_vc_hard_fault_indicator_vc_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current_Limit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_current_limit_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_current_limit_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current_Limit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_current_limit_unpack(
    struct formula_dbc_bms_current_limit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_current_limit_d1_max_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_current_limit_d1_max_discharge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_current_limit_d1_max_discharge_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_current_limit_d2_max_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_current_limit_d2_max_charge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_current_limit_d2_max_charge_current_is_in_range(uint16_t value);

/**
 * Pack message BMS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_status_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_status_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_status_unpack(
    struct formula_dbc_bms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_status_bms_status_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_status_bms_status_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_status_bms_status_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_status_bms_status_soc_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_status_bms_status_soc_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_status_bms_status_soc_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_status_bms_status_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_status_bms_status_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_status_bms_status_charge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_status_bms_status_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_status_bms_status_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_status_bms_status_pack_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMS_FaultVector.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_fault_vector_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_fault_vector_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultVector.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_fault_vector_unpack(
    struct formula_dbc_bms_fault_vector_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_cells_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_temps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_slave_comm_drain_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_current_sensor_comm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_cell_voltage_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_out_of_juice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_temperature_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_vector_bms_fault_vector_drain_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_vector_bms_fault_vector_drain_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_vector_bms_fault_vector_drain_failure_is_in_range(uint8_t value);

/**
 * Pack message BMS_FaultAlert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_fault_alert_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_fault_alert_t *src_p,
    size_t size);

/**
 * Unpack message BMS_FaultAlert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_fault_alert_unpack(
    struct formula_dbc_bms_fault_alert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_cell_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_temp_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_drain_comm_slave_board_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_adc_error_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t formula_dbc_bms_fault_alert_bms_fault_alert_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_current_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_current_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_irrational_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_voltage_diff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_lowest_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_irrational_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_fault_alert_bms_fault_alert_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_over_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_over_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_fault_alert_bms_fault_alert_failed_drain_cell_is_in_range(uint8_t value);

/**
 * Pack message BMS_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_voltages_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_voltages_unpack(
    struct formula_dbc_bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_voltages_bms_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell72_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell84_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell68_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell80_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell76_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell88_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_voltages_bms_voltages_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_voltages_bms_voltages_cell89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_voltages_bms_voltages_cell89_is_in_range(uint16_t value);

/**
 * Pack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_thermistor_voltages_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_thermistor_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_ThermistorVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_thermistor_voltages_unpack(
    struct formula_dbc_bms_thermistor_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_thermistor_voltages_bms_thermistor_voltages_tm17_is_in_range(uint16_t value);

/**
 * Pack message BMS_Temperatures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_temperatures_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_temperatures_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Temperatures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_temperatures_unpack(
    struct formula_dbc_bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_temperatures_bms_temperatures_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_7_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_34_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_34_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_15_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_35_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_35_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_36_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_36_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_23_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_37_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_37_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_31_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_38_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_38_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_32_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_32_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_39_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_39_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t formula_dbc_bms_temperatures_bms_temperatures_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_temperatures_bms_temperatures_33_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_temperatures_bms_temperatures_33_is_in_range(int8_t value);

/**
 * Pack message BMS_DrainStatusA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_drain_status_a_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_drain_status_a_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DrainStatusA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_drain_status_a_unpack(
    struct formula_dbc_bms_drain_status_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_a_bms_drain_status_a_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_a_bms_drain_status_a_cell63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_a_bms_drain_status_a_cell63_is_in_range(uint8_t value);

/**
 * Pack message BMS_DrainStatusB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_drain_status_b_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_drain_status_b_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DrainStatusB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_drain_status_b_unpack(
    struct formula_dbc_bms_drain_status_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell65_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell65_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell66_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell66_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell67_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell67_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell68_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell68_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell69_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell69_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell70_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell70_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell71_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell71_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell72_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell72_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell73_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell73_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell74_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell74_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell75_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell75_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell76_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell76_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell77_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell77_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell78_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell78_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell79_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell79_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell80_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell80_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell81_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell81_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell82_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell82_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell83_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell83_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell84_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell84_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell85_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell85_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell86_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell86_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell87_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell87_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell88_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell88_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_drain_status_b_bms_drain_status_b_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_drain_status_b_bms_drain_status_b_cell89_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_drain_status_b_bms_drain_status_b_cell89_is_in_range(uint8_t value);

/**
 * Pack message BMS_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_current_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_current_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_current_unpack(
    struct formula_dbc_bms_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t formula_dbc_bms_current_bms_inst_current_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_current_bms_inst_current_filt_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_current_bms_inst_current_filt_is_in_range(int32_t value);

/**
 * Pack message BMS_ChargeRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_charge_request_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_charge_request_t *src_p,
    size_t size);

/**
 * Unpack message BMS_ChargeRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_charge_request_unpack(
    struct formula_dbc_bms_charge_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_charge_request_bms_charge_request_max_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_charge_request_bms_charge_request_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_charge_request_bms_charge_request_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_charge_request_bms_charge_request_max_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_charge_request_bms_charge_request_max_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_charge_request_bms_charge_request_max_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_charge_request_bms_charge_request_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_charge_request_bms_charge_request_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_charge_request_bms_charge_request_control_is_in_range(uint8_t value);

/**
 * Pack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_hard_fault_indicator_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_hard_fault_indicator_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HardFaultIndicator.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_hard_fault_indicator_unpack(
    struct formula_dbc_bms_hard_fault_indicator_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_hard_fault_indicator_bms_hard_fault_indicator_task_is_in_range(uint8_t value);

/**
 * Pack message BMS_Ref.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int formula_dbc_bms_ref_pack(
    uint8_t *dst_p,
    const struct formula_dbc_bms_ref_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Ref.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int formula_dbc_bms_ref_unpack(
    struct formula_dbc_bms_ref_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t formula_dbc_bms_ref_bms_ref_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t formula_dbc_bms_ref_bms_ref_ref11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double formula_dbc_bms_ref_bms_ref_ref11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool formula_dbc_bms_ref_bms_ref_ref11_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
